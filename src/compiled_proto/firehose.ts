// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.19.1
// source: firehose.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Any } from "./google/protobuf/any";

export const protobufPackage = "sf.firehose.v2";

export enum ForkStep {
  STEP_UNSET = 0,
  /** STEP_NEW - Incoming block */
  STEP_NEW = 1,
  /** STEP_UNDO - A reorg caused this specific block to be excluded from the chain */
  STEP_UNDO = 2,
  /**
   * STEP_FINAL - Block is now final and can be committed (finality is chain specific,
   * see chain documentation for more details)
   */
  STEP_FINAL = 3,
  UNRECOGNIZED = -1,
}

export function forkStepFromJSON(object: any): ForkStep {
  switch (object) {
    case 0:
    case "STEP_UNSET":
      return ForkStep.STEP_UNSET;
    case 1:
    case "STEP_NEW":
      return ForkStep.STEP_NEW;
    case 2:
    case "STEP_UNDO":
      return ForkStep.STEP_UNDO;
    case 3:
    case "STEP_FINAL":
      return ForkStep.STEP_FINAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ForkStep.UNRECOGNIZED;
  }
}

export function forkStepToJSON(object: ForkStep): string {
  switch (object) {
    case ForkStep.STEP_UNSET:
      return "STEP_UNSET";
    case ForkStep.STEP_NEW:
      return "STEP_NEW";
    case ForkStep.STEP_UNDO:
      return "STEP_UNDO";
    case ForkStep.STEP_FINAL:
      return "STEP_FINAL";
    case ForkStep.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SingleBlockRequest {
  blockNumber?: SingleBlockRequest_BlockNumber | undefined;
  blockHashAndNumber?: SingleBlockRequest_BlockHashAndNumber | undefined;
  cursor?: SingleBlockRequest_Cursor | undefined;
  transforms: Any[];
}

/** Get the current known canonical version of a block at with this number */
export interface SingleBlockRequest_BlockNumber {
  num: number;
}

/** Get the current block with specific hash and number */
export interface SingleBlockRequest_BlockHashAndNumber {
  num: number;
  hash: string;
}

/** Get the block that generated a specific cursor */
export interface SingleBlockRequest_Cursor {
  cursor: string;
}

export interface SingleBlockResponse {
  block: Any | undefined;
}

export interface Request {
  /**
   * Controls where the stream of blocks will start.
   *
   * The stream will start **inclusively** at the requested block num.
   *
   * When not provided, starts at first streamable block of the chain. Not all
   * chain starts at the same block number, so you might get an higher block than
   * requested when using default value of 0.
   *
   * Can be negative, will be resolved relative to the chain head block, assuming
   * a chain at head block #100, then using `-50` as the value will start at block
   * #50. If it resolves before first streamable block of chain, we assume start
   * of chain.
   *
   * If `start_cursor` is given, this value is ignored and the stream instead starts
   * immediately after the Block pointed by the opaque `start_cursor` value.
   */
  startBlockNum: number;
  /**
   * Controls where the stream of blocks will start which will be immediately after
   * the Block pointed by this opaque cursor.
   *
   * Obtain this value from a previously received `Response.cursor`.
   *
   * This value takes precedence over `start_block_num`.
   */
  cursor: string;
  /**
   * When non-zero, controls where the stream of blocks will stop.
   *
   * The stream will close **after** that block has passed so the boundary is
   * **inclusive**.
   */
  stopBlockNum: number;
  /**
   * With final_block_only, you only receive blocks with STEP_FINAL
   * Default behavior will send blocks as STEP_NEW, with occasional STEP_UNDO
   */
  finalBlocksOnly: boolean;
  transforms: Any[];
}

export interface Response {
  /**
   * Chain specific block payload, ex:
   *   - sf.eosio.type.v1.Block
   *   - sf.ethereum.type.v1.Block
   *   - sf.near.type.v1.Block
   */
  block: Any | undefined;
  step: ForkStep;
  cursor: string;
}

function createBaseSingleBlockRequest(): SingleBlockRequest {
  return { blockNumber: undefined, blockHashAndNumber: undefined, cursor: undefined, transforms: [] };
}

export const SingleBlockRequest: MessageFns<SingleBlockRequest> = {
  encode(message: SingleBlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockNumber !== undefined) {
      SingleBlockRequest_BlockNumber.encode(message.blockNumber, writer.uint32(26).fork()).join();
    }
    if (message.blockHashAndNumber !== undefined) {
      SingleBlockRequest_BlockHashAndNumber.encode(message.blockHashAndNumber, writer.uint32(34).fork()).join();
    }
    if (message.cursor !== undefined) {
      SingleBlockRequest_Cursor.encode(message.cursor, writer.uint32(42).fork()).join();
    }
    for (const v of message.transforms) {
      Any.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SingleBlockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSingleBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.blockNumber = SingleBlockRequest_BlockNumber.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.blockHashAndNumber = SingleBlockRequest_BlockHashAndNumber.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.cursor = SingleBlockRequest_Cursor.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.transforms.push(Any.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SingleBlockRequest {
    return {
      blockNumber: isSet(object.blockNumber) ? SingleBlockRequest_BlockNumber.fromJSON(object.blockNumber) : undefined,
      blockHashAndNumber: isSet(object.blockHashAndNumber)
        ? SingleBlockRequest_BlockHashAndNumber.fromJSON(object.blockHashAndNumber)
        : undefined,
      cursor: isSet(object.cursor) ? SingleBlockRequest_Cursor.fromJSON(object.cursor) : undefined,
      transforms: globalThis.Array.isArray(object?.transforms)
        ? object.transforms.map((e: any) => Any.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SingleBlockRequest): unknown {
    const obj: any = {};
    if (message.blockNumber !== undefined) {
      obj.blockNumber = SingleBlockRequest_BlockNumber.toJSON(message.blockNumber);
    }
    if (message.blockHashAndNumber !== undefined) {
      obj.blockHashAndNumber = SingleBlockRequest_BlockHashAndNumber.toJSON(message.blockHashAndNumber);
    }
    if (message.cursor !== undefined) {
      obj.cursor = SingleBlockRequest_Cursor.toJSON(message.cursor);
    }
    if (message.transforms?.length) {
      obj.transforms = message.transforms.map((e) => Any.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SingleBlockRequest>): SingleBlockRequest {
    return SingleBlockRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SingleBlockRequest>): SingleBlockRequest {
    const message = createBaseSingleBlockRequest();
    message.blockNumber = (object.blockNumber !== undefined && object.blockNumber !== null)
      ? SingleBlockRequest_BlockNumber.fromPartial(object.blockNumber)
      : undefined;
    message.blockHashAndNumber = (object.blockHashAndNumber !== undefined && object.blockHashAndNumber !== null)
      ? SingleBlockRequest_BlockHashAndNumber.fromPartial(object.blockHashAndNumber)
      : undefined;
    message.cursor = (object.cursor !== undefined && object.cursor !== null)
      ? SingleBlockRequest_Cursor.fromPartial(object.cursor)
      : undefined;
    message.transforms = object.transforms?.map((e) => Any.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSingleBlockRequest_BlockNumber(): SingleBlockRequest_BlockNumber {
  return { num: 0 };
}

export const SingleBlockRequest_BlockNumber: MessageFns<SingleBlockRequest_BlockNumber> = {
  encode(message: SingleBlockRequest_BlockNumber, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.num !== 0) {
      writer.uint32(8).uint64(message.num);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SingleBlockRequest_BlockNumber {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSingleBlockRequest_BlockNumber();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.num = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SingleBlockRequest_BlockNumber {
    return { num: isSet(object.num) ? globalThis.Number(object.num) : 0 };
  },

  toJSON(message: SingleBlockRequest_BlockNumber): unknown {
    const obj: any = {};
    if (message.num !== 0) {
      obj.num = Math.round(message.num);
    }
    return obj;
  },

  create(base?: DeepPartial<SingleBlockRequest_BlockNumber>): SingleBlockRequest_BlockNumber {
    return SingleBlockRequest_BlockNumber.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SingleBlockRequest_BlockNumber>): SingleBlockRequest_BlockNumber {
    const message = createBaseSingleBlockRequest_BlockNumber();
    message.num = object.num ?? 0;
    return message;
  },
};

function createBaseSingleBlockRequest_BlockHashAndNumber(): SingleBlockRequest_BlockHashAndNumber {
  return { num: 0, hash: "" };
}

export const SingleBlockRequest_BlockHashAndNumber: MessageFns<SingleBlockRequest_BlockHashAndNumber> = {
  encode(message: SingleBlockRequest_BlockHashAndNumber, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.num !== 0) {
      writer.uint32(8).uint64(message.num);
    }
    if (message.hash !== "") {
      writer.uint32(18).string(message.hash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SingleBlockRequest_BlockHashAndNumber {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSingleBlockRequest_BlockHashAndNumber();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.num = longToNumber(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hash = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SingleBlockRequest_BlockHashAndNumber {
    return {
      num: isSet(object.num) ? globalThis.Number(object.num) : 0,
      hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
    };
  },

  toJSON(message: SingleBlockRequest_BlockHashAndNumber): unknown {
    const obj: any = {};
    if (message.num !== 0) {
      obj.num = Math.round(message.num);
    }
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    return obj;
  },

  create(base?: DeepPartial<SingleBlockRequest_BlockHashAndNumber>): SingleBlockRequest_BlockHashAndNumber {
    return SingleBlockRequest_BlockHashAndNumber.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SingleBlockRequest_BlockHashAndNumber>): SingleBlockRequest_BlockHashAndNumber {
    const message = createBaseSingleBlockRequest_BlockHashAndNumber();
    message.num = object.num ?? 0;
    message.hash = object.hash ?? "";
    return message;
  },
};

function createBaseSingleBlockRequest_Cursor(): SingleBlockRequest_Cursor {
  return { cursor: "" };
}

export const SingleBlockRequest_Cursor: MessageFns<SingleBlockRequest_Cursor> = {
  encode(message: SingleBlockRequest_Cursor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cursor !== "") {
      writer.uint32(10).string(message.cursor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SingleBlockRequest_Cursor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSingleBlockRequest_Cursor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cursor = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SingleBlockRequest_Cursor {
    return { cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "" };
  },

  toJSON(message: SingleBlockRequest_Cursor): unknown {
    const obj: any = {};
    if (message.cursor !== "") {
      obj.cursor = message.cursor;
    }
    return obj;
  },

  create(base?: DeepPartial<SingleBlockRequest_Cursor>): SingleBlockRequest_Cursor {
    return SingleBlockRequest_Cursor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SingleBlockRequest_Cursor>): SingleBlockRequest_Cursor {
    const message = createBaseSingleBlockRequest_Cursor();
    message.cursor = object.cursor ?? "";
    return message;
  },
};

function createBaseSingleBlockResponse(): SingleBlockResponse {
  return { block: undefined };
}

export const SingleBlockResponse: MessageFns<SingleBlockResponse> = {
  encode(message: SingleBlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.block !== undefined) {
      Any.encode(message.block, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SingleBlockResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSingleBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.block = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SingleBlockResponse {
    return { block: isSet(object.block) ? Any.fromJSON(object.block) : undefined };
  },

  toJSON(message: SingleBlockResponse): unknown {
    const obj: any = {};
    if (message.block !== undefined) {
      obj.block = Any.toJSON(message.block);
    }
    return obj;
  },

  create(base?: DeepPartial<SingleBlockResponse>): SingleBlockResponse {
    return SingleBlockResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SingleBlockResponse>): SingleBlockResponse {
    const message = createBaseSingleBlockResponse();
    message.block = (object.block !== undefined && object.block !== null) ? Any.fromPartial(object.block) : undefined;
    return message;
  },
};

function createBaseRequest(): Request {
  return { startBlockNum: 0, cursor: "", stopBlockNum: 0, finalBlocksOnly: false, transforms: [] };
}

export const Request: MessageFns<Request> = {
  encode(message: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startBlockNum !== 0) {
      writer.uint32(8).int64(message.startBlockNum);
    }
    if (message.cursor !== "") {
      writer.uint32(18).string(message.cursor);
    }
    if (message.stopBlockNum !== 0) {
      writer.uint32(24).uint64(message.stopBlockNum);
    }
    if (message.finalBlocksOnly !== false) {
      writer.uint32(32).bool(message.finalBlocksOnly);
    }
    for (const v of message.transforms) {
      Any.encode(v!, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.startBlockNum = longToNumber(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cursor = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.stopBlockNum = longToNumber(reader.uint64());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.finalBlocksOnly = reader.bool();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.transforms.push(Any.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      startBlockNum: isSet(object.startBlockNum) ? globalThis.Number(object.startBlockNum) : 0,
      cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
      stopBlockNum: isSet(object.stopBlockNum) ? globalThis.Number(object.stopBlockNum) : 0,
      finalBlocksOnly: isSet(object.finalBlocksOnly) ? globalThis.Boolean(object.finalBlocksOnly) : false,
      transforms: globalThis.Array.isArray(object?.transforms)
        ? object.transforms.map((e: any) => Any.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.startBlockNum !== 0) {
      obj.startBlockNum = Math.round(message.startBlockNum);
    }
    if (message.cursor !== "") {
      obj.cursor = message.cursor;
    }
    if (message.stopBlockNum !== 0) {
      obj.stopBlockNum = Math.round(message.stopBlockNum);
    }
    if (message.finalBlocksOnly !== false) {
      obj.finalBlocksOnly = message.finalBlocksOnly;
    }
    if (message.transforms?.length) {
      obj.transforms = message.transforms.map((e) => Any.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Request>): Request {
    return Request.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Request>): Request {
    const message = createBaseRequest();
    message.startBlockNum = object.startBlockNum ?? 0;
    message.cursor = object.cursor ?? "";
    message.stopBlockNum = object.stopBlockNum ?? 0;
    message.finalBlocksOnly = object.finalBlocksOnly ?? false;
    message.transforms = object.transforms?.map((e) => Any.fromPartial(e)) || [];
    return message;
  },
};

function createBaseResponse(): Response {
  return { block: undefined, step: 0, cursor: "" };
}

export const Response: MessageFns<Response> = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.block !== undefined) {
      Any.encode(message.block, writer.uint32(10).fork()).join();
    }
    if (message.step !== 0) {
      writer.uint32(48).int32(message.step);
    }
    if (message.cursor !== "") {
      writer.uint32(82).string(message.cursor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.block = Any.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.step = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.cursor = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      block: isSet(object.block) ? Any.fromJSON(object.block) : undefined,
      step: isSet(object.step) ? forkStepFromJSON(object.step) : 0,
      cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.block !== undefined) {
      obj.block = Any.toJSON(message.block);
    }
    if (message.step !== 0) {
      obj.step = forkStepToJSON(message.step);
    }
    if (message.cursor !== "") {
      obj.cursor = message.cursor;
    }
    return obj;
  },

  create(base?: DeepPartial<Response>): Response {
    return Response.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Response>): Response {
    const message = createBaseResponse();
    message.block = (object.block !== undefined && object.block !== null) ? Any.fromPartial(object.block) : undefined;
    message.step = object.step ?? 0;
    message.cursor = object.cursor ?? "";
    return message;
  },
};

export type StreamDefinition = typeof StreamDefinition;
export const StreamDefinition = {
  name: "Stream",
  fullName: "sf.firehose.v2.Stream",
  methods: {
    blocks: {
      name: "Blocks",
      requestType: Request,
      requestStream: false,
      responseType: Response,
      responseStream: true,
      options: {},
    },
  },
} as const;

export interface StreamServiceImplementation<CallContextExt = {}> {
  blocks(request: Request, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<Response>>;
}

export interface StreamClient<CallOptionsExt = {}> {
  blocks(request: DeepPartial<Request>, options?: CallOptions & CallOptionsExt): AsyncIterable<Response>;
}

export type FetchDefinition = typeof FetchDefinition;
export const FetchDefinition = {
  name: "Fetch",
  fullName: "sf.firehose.v2.Fetch",
  methods: {
    block: {
      name: "Block",
      requestType: SingleBlockRequest,
      requestStream: false,
      responseType: SingleBlockResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface FetchServiceImplementation<CallContextExt = {}> {
  block(request: SingleBlockRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SingleBlockResponse>>;
}

export interface FetchClient<CallOptionsExt = {}> {
  block(request: DeepPartial<SingleBlockRequest>, options?: CallOptions & CallOptionsExt): Promise<SingleBlockResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
