/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.0
 * source: src/proto/antelope.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace sf.antelope.type.v1 {
    export enum BlockReversibility {
        BLOCKREVERSIBILITY_NONE = 0,
        BLOCKREVERSIBILITY_REVERSIBLE = 1,
        BLOCKREVERSIBILITY_IRREVERSIBLE = 2,
        BLOCKREVERSIBILITY_STALE = 3,
        BLOCKREVERSIBILITY_MAYBESTALE = 4
    }
    export enum TransactionStatus {
        TRANSACTIONSTATUS_NONE = 0,
        TRANSACTIONSTATUS_EXECUTED = 1,
        TRANSACTIONSTATUS_SOFTFAIL = 2,
        TRANSACTIONSTATUS_HARDFAIL = 3,
        TRANSACTIONSTATUS_DELAYED = 4,
        TRANSACTIONSTATUS_EXPIRED = 5,
        TRANSACTIONSTATUS_UNKNOWN = 6,
        TRANSACTIONSTATUS_CANCELED = 7
    }
    export class ActionTraces extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            action_traces?: ActionTrace[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("action_traces" in data && data.action_traces != undefined) {
                    this.action_traces = data.action_traces;
                }
            }
        }
        get action_traces() {
            return pb_1.Message.getRepeatedWrapperField(this, ActionTrace, 1) as ActionTrace[];
        }
        set action_traces(value: ActionTrace[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            action_traces?: ReturnType<typeof ActionTrace.prototype.toObject>[];
        }): ActionTraces {
            const message = new ActionTraces({});
            if (data.action_traces != null) {
                message.action_traces = data.action_traces.map(item => ActionTrace.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                action_traces?: ReturnType<typeof ActionTrace.prototype.toObject>[];
            } = {};
            if (this.action_traces != null) {
                data.action_traces = this.action_traces.map((item: ActionTrace) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.action_traces.length)
                writer.writeRepeatedMessage(1, this.action_traces, (item: ActionTrace) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActionTraces {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActionTraces();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.action_traces, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ActionTrace.deserialize(reader), ActionTrace));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActionTraces {
            return ActionTraces.deserialize(bytes);
        }
    }
    export class TransactionTraces extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transaction_traces?: TransactionTrace[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction_traces" in data && data.transaction_traces != undefined) {
                    this.transaction_traces = data.transaction_traces;
                }
            }
        }
        get transaction_traces() {
            return pb_1.Message.getRepeatedWrapperField(this, TransactionTrace, 1) as TransactionTrace[];
        }
        set transaction_traces(value: TransactionTrace[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            transaction_traces?: ReturnType<typeof TransactionTrace.prototype.toObject>[];
        }): TransactionTraces {
            const message = new TransactionTraces({});
            if (data.transaction_traces != null) {
                message.transaction_traces = data.transaction_traces.map(item => TransactionTrace.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                transaction_traces?: ReturnType<typeof TransactionTrace.prototype.toObject>[];
            } = {};
            if (this.transaction_traces != null) {
                data.transaction_traces = this.transaction_traces.map((item: TransactionTrace) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transaction_traces.length)
                writer.writeRepeatedMessage(1, this.transaction_traces, (item: TransactionTrace) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionTraces {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionTraces();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transaction_traces, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TransactionTrace.deserialize(reader), TransactionTrace));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionTraces {
            return TransactionTraces.deserialize(bytes);
        }
    }
    export class DBOps extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            db_ops?: DBOp[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("db_ops" in data && data.db_ops != undefined) {
                    this.db_ops = data.db_ops;
                }
            }
        }
        get db_ops() {
            return pb_1.Message.getRepeatedWrapperField(this, DBOp, 1) as DBOp[];
        }
        set db_ops(value: DBOp[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            db_ops?: ReturnType<typeof DBOp.prototype.toObject>[];
        }): DBOps {
            const message = new DBOps({});
            if (data.db_ops != null) {
                message.db_ops = data.db_ops.map(item => DBOp.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                db_ops?: ReturnType<typeof DBOp.prototype.toObject>[];
            } = {};
            if (this.db_ops != null) {
                data.db_ops = this.db_ops.map((item: DBOp) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.db_ops.length)
                writer.writeRepeatedMessage(1, this.db_ops, (item: DBOp) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DBOps {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DBOps();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.db_ops, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DBOp.deserialize(reader), DBOp));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DBOps {
            return DBOps.deserialize(bytes);
        }
    }
    export class Block extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            number?: number;
            version?: number;
            header?: BlockHeader;
            producer_signature?: string;
            block_extensions?: Extension[];
            dpos_proposed_irreversible_blocknum?: number;
            dpos_irreversible_blocknum?: number;
            blockroot_merkle?: BlockRootMerkle;
            producer_to_last_produced?: ProducerToLastProduced[];
            producer_to_last_implied_irb?: ProducerToLastImpliedIRB[];
            confirm_count?: number[];
            pending_schedule?: PendingProducerSchedule;
            activated_protocol_features?: ActivatedProtocolFeatures;
            validated?: boolean;
            action_mroot_savanna?: Uint8Array;
            finality_lib?: number;
            finality_data?: FinalityData;
            proposer_policy?: ProposerPolicy;
            finalizer_policy?: FinalizerPolicy;
            rlimit_ops?: RlimitOp[];
            unfiltered_transactions?: TransactionReceipt[];
            filtered_transactions?: TransactionReceipt[];
            unfiltered_transaction_count?: number;
            filtered_transaction_count?: number;
            unfiltered_implicit_transaction_ops?: TrxOp[];
            filtered_implicit_transaction_ops?: TrxOp[];
            unfiltered_transaction_traces?: TransactionTrace[];
            filtered_transaction_traces?: TransactionTrace[];
            unfiltered_transaction_trace_count?: number;
            filtered_transaction_trace_count?: number;
            unfiltered_executed_input_action_count?: number;
            filtered_executed_input_action_count?: number;
            unfiltered_executed_total_action_count?: number;
            filtered_executed_total_action_count?: number;
            block_signing_key?: string;
            active_schedule_v1?: ProducerSchedule;
            valid_block_signing_authority_v2?: BlockSigningAuthority;
            active_schedule_v2?: ProducerAuthoritySchedule;
            filtering_applied?: boolean;
            filtering_include_filter_expr?: string;
            filtering_exclude_filter_expr?: string;
            filtering_system_actions_include_filter_expr?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7, 12, 13, 15, 19, 6, 47, 20, 49, 21, 46], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("number" in data && data.number != undefined) {
                    this.number = data.number;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("producer_signature" in data && data.producer_signature != undefined) {
                    this.producer_signature = data.producer_signature;
                }
                if ("block_extensions" in data && data.block_extensions != undefined) {
                    this.block_extensions = data.block_extensions;
                }
                if ("dpos_proposed_irreversible_blocknum" in data && data.dpos_proposed_irreversible_blocknum != undefined) {
                    this.dpos_proposed_irreversible_blocknum = data.dpos_proposed_irreversible_blocknum;
                }
                if ("dpos_irreversible_blocknum" in data && data.dpos_irreversible_blocknum != undefined) {
                    this.dpos_irreversible_blocknum = data.dpos_irreversible_blocknum;
                }
                if ("blockroot_merkle" in data && data.blockroot_merkle != undefined) {
                    this.blockroot_merkle = data.blockroot_merkle;
                }
                if ("producer_to_last_produced" in data && data.producer_to_last_produced != undefined) {
                    this.producer_to_last_produced = data.producer_to_last_produced;
                }
                if ("producer_to_last_implied_irb" in data && data.producer_to_last_implied_irb != undefined) {
                    this.producer_to_last_implied_irb = data.producer_to_last_implied_irb;
                }
                if ("confirm_count" in data && data.confirm_count != undefined) {
                    this.confirm_count = data.confirm_count;
                }
                if ("pending_schedule" in data && data.pending_schedule != undefined) {
                    this.pending_schedule = data.pending_schedule;
                }
                if ("activated_protocol_features" in data && data.activated_protocol_features != undefined) {
                    this.activated_protocol_features = data.activated_protocol_features;
                }
                if ("validated" in data && data.validated != undefined) {
                    this.validated = data.validated;
                }
                if ("action_mroot_savanna" in data && data.action_mroot_savanna != undefined) {
                    this.action_mroot_savanna = data.action_mroot_savanna;
                }
                if ("finality_lib" in data && data.finality_lib != undefined) {
                    this.finality_lib = data.finality_lib;
                }
                if ("finality_data" in data && data.finality_data != undefined) {
                    this.finality_data = data.finality_data;
                }
                if ("proposer_policy" in data && data.proposer_policy != undefined) {
                    this.proposer_policy = data.proposer_policy;
                }
                if ("finalizer_policy" in data && data.finalizer_policy != undefined) {
                    this.finalizer_policy = data.finalizer_policy;
                }
                if ("rlimit_ops" in data && data.rlimit_ops != undefined) {
                    this.rlimit_ops = data.rlimit_ops;
                }
                if ("unfiltered_transactions" in data && data.unfiltered_transactions != undefined) {
                    this.unfiltered_transactions = data.unfiltered_transactions;
                }
                if ("filtered_transactions" in data && data.filtered_transactions != undefined) {
                    this.filtered_transactions = data.filtered_transactions;
                }
                if ("unfiltered_transaction_count" in data && data.unfiltered_transaction_count != undefined) {
                    this.unfiltered_transaction_count = data.unfiltered_transaction_count;
                }
                if ("filtered_transaction_count" in data && data.filtered_transaction_count != undefined) {
                    this.filtered_transaction_count = data.filtered_transaction_count;
                }
                if ("unfiltered_implicit_transaction_ops" in data && data.unfiltered_implicit_transaction_ops != undefined) {
                    this.unfiltered_implicit_transaction_ops = data.unfiltered_implicit_transaction_ops;
                }
                if ("filtered_implicit_transaction_ops" in data && data.filtered_implicit_transaction_ops != undefined) {
                    this.filtered_implicit_transaction_ops = data.filtered_implicit_transaction_ops;
                }
                if ("unfiltered_transaction_traces" in data && data.unfiltered_transaction_traces != undefined) {
                    this.unfiltered_transaction_traces = data.unfiltered_transaction_traces;
                }
                if ("filtered_transaction_traces" in data && data.filtered_transaction_traces != undefined) {
                    this.filtered_transaction_traces = data.filtered_transaction_traces;
                }
                if ("unfiltered_transaction_trace_count" in data && data.unfiltered_transaction_trace_count != undefined) {
                    this.unfiltered_transaction_trace_count = data.unfiltered_transaction_trace_count;
                }
                if ("filtered_transaction_trace_count" in data && data.filtered_transaction_trace_count != undefined) {
                    this.filtered_transaction_trace_count = data.filtered_transaction_trace_count;
                }
                if ("unfiltered_executed_input_action_count" in data && data.unfiltered_executed_input_action_count != undefined) {
                    this.unfiltered_executed_input_action_count = data.unfiltered_executed_input_action_count;
                }
                if ("filtered_executed_input_action_count" in data && data.filtered_executed_input_action_count != undefined) {
                    this.filtered_executed_input_action_count = data.filtered_executed_input_action_count;
                }
                if ("unfiltered_executed_total_action_count" in data && data.unfiltered_executed_total_action_count != undefined) {
                    this.unfiltered_executed_total_action_count = data.unfiltered_executed_total_action_count;
                }
                if ("filtered_executed_total_action_count" in data && data.filtered_executed_total_action_count != undefined) {
                    this.filtered_executed_total_action_count = data.filtered_executed_total_action_count;
                }
                if ("block_signing_key" in data && data.block_signing_key != undefined) {
                    this.block_signing_key = data.block_signing_key;
                }
                if ("active_schedule_v1" in data && data.active_schedule_v1 != undefined) {
                    this.active_schedule_v1 = data.active_schedule_v1;
                }
                if ("valid_block_signing_authority_v2" in data && data.valid_block_signing_authority_v2 != undefined) {
                    this.valid_block_signing_authority_v2 = data.valid_block_signing_authority_v2;
                }
                if ("active_schedule_v2" in data && data.active_schedule_v2 != undefined) {
                    this.active_schedule_v2 = data.active_schedule_v2;
                }
                if ("filtering_applied" in data && data.filtering_applied != undefined) {
                    this.filtering_applied = data.filtering_applied;
                }
                if ("filtering_include_filter_expr" in data && data.filtering_include_filter_expr != undefined) {
                    this.filtering_include_filter_expr = data.filtering_include_filter_expr;
                }
                if ("filtering_exclude_filter_expr" in data && data.filtering_exclude_filter_expr != undefined) {
                    this.filtering_exclude_filter_expr = data.filtering_exclude_filter_expr;
                }
                if ("filtering_system_actions_include_filter_expr" in data && data.filtering_system_actions_include_filter_expr != undefined) {
                    this.filtering_system_actions_include_filter_expr = data.filtering_system_actions_include_filter_expr;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get number() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set number(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get header() {
            return pb_1.Message.getWrapperField(this, BlockHeader, 4) as BlockHeader;
        }
        set header(value: BlockHeader) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get producer_signature() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set producer_signature(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get block_extensions() {
            return pb_1.Message.getRepeatedWrapperField(this, Extension, 7) as Extension[];
        }
        set block_extensions(value: Extension[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get dpos_proposed_irreversible_blocknum() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set dpos_proposed_irreversible_blocknum(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get dpos_irreversible_blocknum() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set dpos_irreversible_blocknum(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get blockroot_merkle() {
            return pb_1.Message.getWrapperField(this, BlockRootMerkle, 11) as BlockRootMerkle;
        }
        set blockroot_merkle(value: BlockRootMerkle) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_blockroot_merkle() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get producer_to_last_produced() {
            return pb_1.Message.getRepeatedWrapperField(this, ProducerToLastProduced, 12) as ProducerToLastProduced[];
        }
        set producer_to_last_produced(value: ProducerToLastProduced[]) {
            pb_1.Message.setRepeatedWrapperField(this, 12, value);
        }
        get producer_to_last_implied_irb() {
            return pb_1.Message.getRepeatedWrapperField(this, ProducerToLastImpliedIRB, 13) as ProducerToLastImpliedIRB[];
        }
        set producer_to_last_implied_irb(value: ProducerToLastImpliedIRB[]) {
            pb_1.Message.setRepeatedWrapperField(this, 13, value);
        }
        get confirm_count() {
            return pb_1.Message.getFieldWithDefault(this, 15, []) as number[];
        }
        set confirm_count(value: number[]) {
            pb_1.Message.setField(this, 15, value);
        }
        get pending_schedule() {
            return pb_1.Message.getWrapperField(this, PendingProducerSchedule, 16) as PendingProducerSchedule;
        }
        set pending_schedule(value: PendingProducerSchedule) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get has_pending_schedule() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get activated_protocol_features() {
            return pb_1.Message.getWrapperField(this, ActivatedProtocolFeatures, 17) as ActivatedProtocolFeatures;
        }
        set activated_protocol_features(value: ActivatedProtocolFeatures) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get has_activated_protocol_features() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get validated() {
            return pb_1.Message.getFieldWithDefault(this, 18, false) as boolean;
        }
        set validated(value: boolean) {
            pb_1.Message.setField(this, 18, value);
        }
        get action_mroot_savanna() {
            return pb_1.Message.getFieldWithDefault(this, 60, new Uint8Array(0)) as Uint8Array;
        }
        set action_mroot_savanna(value: Uint8Array) {
            pb_1.Message.setField(this, 60, value);
        }
        get finality_lib() {
            return pb_1.Message.getFieldWithDefault(this, 61, 0) as number;
        }
        set finality_lib(value: number) {
            pb_1.Message.setField(this, 61, value);
        }
        get finality_data() {
            return pb_1.Message.getWrapperField(this, FinalityData, 62) as FinalityData;
        }
        set finality_data(value: FinalityData) {
            pb_1.Message.setWrapperField(this, 62, value);
        }
        get has_finality_data() {
            return pb_1.Message.getField(this, 62) != null;
        }
        get proposer_policy() {
            return pb_1.Message.getWrapperField(this, ProposerPolicy, 63) as ProposerPolicy;
        }
        set proposer_policy(value: ProposerPolicy) {
            pb_1.Message.setWrapperField(this, 63, value);
        }
        get has_proposer_policy() {
            return pb_1.Message.getField(this, 63) != null;
        }
        get finalizer_policy() {
            return pb_1.Message.getWrapperField(this, FinalizerPolicy, 64) as FinalizerPolicy;
        }
        set finalizer_policy(value: FinalizerPolicy) {
            pb_1.Message.setWrapperField(this, 64, value);
        }
        get has_finalizer_policy() {
            return pb_1.Message.getField(this, 64) != null;
        }
        get rlimit_ops() {
            return pb_1.Message.getRepeatedWrapperField(this, RlimitOp, 19) as RlimitOp[];
        }
        set rlimit_ops(value: RlimitOp[]) {
            pb_1.Message.setRepeatedWrapperField(this, 19, value);
        }
        get unfiltered_transactions() {
            return pb_1.Message.getRepeatedWrapperField(this, TransactionReceipt, 6) as TransactionReceipt[];
        }
        set unfiltered_transactions(value: TransactionReceipt[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get filtered_transactions() {
            return pb_1.Message.getRepeatedWrapperField(this, TransactionReceipt, 47) as TransactionReceipt[];
        }
        set filtered_transactions(value: TransactionReceipt[]) {
            pb_1.Message.setRepeatedWrapperField(this, 47, value);
        }
        get unfiltered_transaction_count() {
            return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
        }
        set unfiltered_transaction_count(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        get filtered_transaction_count() {
            return pb_1.Message.getFieldWithDefault(this, 48, 0) as number;
        }
        set filtered_transaction_count(value: number) {
            pb_1.Message.setField(this, 48, value);
        }
        get unfiltered_implicit_transaction_ops() {
            return pb_1.Message.getRepeatedWrapperField(this, TrxOp, 20) as TrxOp[];
        }
        set unfiltered_implicit_transaction_ops(value: TrxOp[]) {
            pb_1.Message.setRepeatedWrapperField(this, 20, value);
        }
        get filtered_implicit_transaction_ops() {
            return pb_1.Message.getRepeatedWrapperField(this, TrxOp, 49) as TrxOp[];
        }
        set filtered_implicit_transaction_ops(value: TrxOp[]) {
            pb_1.Message.setRepeatedWrapperField(this, 49, value);
        }
        get unfiltered_transaction_traces() {
            return pb_1.Message.getRepeatedWrapperField(this, TransactionTrace, 21) as TransactionTrace[];
        }
        set unfiltered_transaction_traces(value: TransactionTrace[]) {
            pb_1.Message.setRepeatedWrapperField(this, 21, value);
        }
        get filtered_transaction_traces() {
            return pb_1.Message.getRepeatedWrapperField(this, TransactionTrace, 46) as TransactionTrace[];
        }
        set filtered_transaction_traces(value: TransactionTrace[]) {
            pb_1.Message.setRepeatedWrapperField(this, 46, value);
        }
        get unfiltered_transaction_trace_count() {
            return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
        }
        set unfiltered_transaction_trace_count(value: number) {
            pb_1.Message.setField(this, 23, value);
        }
        get filtered_transaction_trace_count() {
            return pb_1.Message.getFieldWithDefault(this, 43, 0) as number;
        }
        set filtered_transaction_trace_count(value: number) {
            pb_1.Message.setField(this, 43, value);
        }
        get unfiltered_executed_input_action_count() {
            return pb_1.Message.getFieldWithDefault(this, 24, 0) as number;
        }
        set unfiltered_executed_input_action_count(value: number) {
            pb_1.Message.setField(this, 24, value);
        }
        get filtered_executed_input_action_count() {
            return pb_1.Message.getFieldWithDefault(this, 44, 0) as number;
        }
        set filtered_executed_input_action_count(value: number) {
            pb_1.Message.setField(this, 44, value);
        }
        get unfiltered_executed_total_action_count() {
            return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
        }
        set unfiltered_executed_total_action_count(value: number) {
            pb_1.Message.setField(this, 25, value);
        }
        get filtered_executed_total_action_count() {
            return pb_1.Message.getFieldWithDefault(this, 45, 0) as number;
        }
        set filtered_executed_total_action_count(value: number) {
            pb_1.Message.setField(this, 45, value);
        }
        get block_signing_key() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set block_signing_key(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get active_schedule_v1() {
            return pb_1.Message.getWrapperField(this, ProducerSchedule, 10) as ProducerSchedule;
        }
        set active_schedule_v1(value: ProducerSchedule) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_active_schedule_v1() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get valid_block_signing_authority_v2() {
            return pb_1.Message.getWrapperField(this, BlockSigningAuthority, 30) as BlockSigningAuthority;
        }
        set valid_block_signing_authority_v2(value: BlockSigningAuthority) {
            pb_1.Message.setWrapperField(this, 30, value);
        }
        get has_valid_block_signing_authority_v2() {
            return pb_1.Message.getField(this, 30) != null;
        }
        get active_schedule_v2() {
            return pb_1.Message.getWrapperField(this, ProducerAuthoritySchedule, 31) as ProducerAuthoritySchedule;
        }
        set active_schedule_v2(value: ProducerAuthoritySchedule) {
            pb_1.Message.setWrapperField(this, 31, value);
        }
        get has_active_schedule_v2() {
            return pb_1.Message.getField(this, 31) != null;
        }
        get filtering_applied() {
            return pb_1.Message.getFieldWithDefault(this, 40, false) as boolean;
        }
        set filtering_applied(value: boolean) {
            pb_1.Message.setField(this, 40, value);
        }
        get filtering_include_filter_expr() {
            return pb_1.Message.getFieldWithDefault(this, 41, "") as string;
        }
        set filtering_include_filter_expr(value: string) {
            pb_1.Message.setField(this, 41, value);
        }
        get filtering_exclude_filter_expr() {
            return pb_1.Message.getFieldWithDefault(this, 42, "") as string;
        }
        set filtering_exclude_filter_expr(value: string) {
            pb_1.Message.setField(this, 42, value);
        }
        get filtering_system_actions_include_filter_expr() {
            return pb_1.Message.getFieldWithDefault(this, 50, "") as string;
        }
        set filtering_system_actions_include_filter_expr(value: string) {
            pb_1.Message.setField(this, 50, value);
        }
        static fromObject(data: {
            id?: string;
            number?: number;
            version?: number;
            header?: ReturnType<typeof BlockHeader.prototype.toObject>;
            producer_signature?: string;
            block_extensions?: ReturnType<typeof Extension.prototype.toObject>[];
            dpos_proposed_irreversible_blocknum?: number;
            dpos_irreversible_blocknum?: number;
            blockroot_merkle?: ReturnType<typeof BlockRootMerkle.prototype.toObject>;
            producer_to_last_produced?: ReturnType<typeof ProducerToLastProduced.prototype.toObject>[];
            producer_to_last_implied_irb?: ReturnType<typeof ProducerToLastImpliedIRB.prototype.toObject>[];
            confirm_count?: number[];
            pending_schedule?: ReturnType<typeof PendingProducerSchedule.prototype.toObject>;
            activated_protocol_features?: ReturnType<typeof ActivatedProtocolFeatures.prototype.toObject>;
            validated?: boolean;
            action_mroot_savanna?: Uint8Array;
            finality_lib?: number;
            finality_data?: ReturnType<typeof FinalityData.prototype.toObject>;
            proposer_policy?: ReturnType<typeof ProposerPolicy.prototype.toObject>;
            finalizer_policy?: ReturnType<typeof FinalizerPolicy.prototype.toObject>;
            rlimit_ops?: ReturnType<typeof RlimitOp.prototype.toObject>[];
            unfiltered_transactions?: ReturnType<typeof TransactionReceipt.prototype.toObject>[];
            filtered_transactions?: ReturnType<typeof TransactionReceipt.prototype.toObject>[];
            unfiltered_transaction_count?: number;
            filtered_transaction_count?: number;
            unfiltered_implicit_transaction_ops?: ReturnType<typeof TrxOp.prototype.toObject>[];
            filtered_implicit_transaction_ops?: ReturnType<typeof TrxOp.prototype.toObject>[];
            unfiltered_transaction_traces?: ReturnType<typeof TransactionTrace.prototype.toObject>[];
            filtered_transaction_traces?: ReturnType<typeof TransactionTrace.prototype.toObject>[];
            unfiltered_transaction_trace_count?: number;
            filtered_transaction_trace_count?: number;
            unfiltered_executed_input_action_count?: number;
            filtered_executed_input_action_count?: number;
            unfiltered_executed_total_action_count?: number;
            filtered_executed_total_action_count?: number;
            block_signing_key?: string;
            active_schedule_v1?: ReturnType<typeof ProducerSchedule.prototype.toObject>;
            valid_block_signing_authority_v2?: ReturnType<typeof BlockSigningAuthority.prototype.toObject>;
            active_schedule_v2?: ReturnType<typeof ProducerAuthoritySchedule.prototype.toObject>;
            filtering_applied?: boolean;
            filtering_include_filter_expr?: string;
            filtering_exclude_filter_expr?: string;
            filtering_system_actions_include_filter_expr?: string;
        }): Block {
            const message = new Block({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.number != null) {
                message.number = data.number;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.header != null) {
                message.header = BlockHeader.fromObject(data.header);
            }
            if (data.producer_signature != null) {
                message.producer_signature = data.producer_signature;
            }
            if (data.block_extensions != null) {
                message.block_extensions = data.block_extensions.map(item => Extension.fromObject(item));
            }
            if (data.dpos_proposed_irreversible_blocknum != null) {
                message.dpos_proposed_irreversible_blocknum = data.dpos_proposed_irreversible_blocknum;
            }
            if (data.dpos_irreversible_blocknum != null) {
                message.dpos_irreversible_blocknum = data.dpos_irreversible_blocknum;
            }
            if (data.blockroot_merkle != null) {
                message.blockroot_merkle = BlockRootMerkle.fromObject(data.blockroot_merkle);
            }
            if (data.producer_to_last_produced != null) {
                message.producer_to_last_produced = data.producer_to_last_produced.map(item => ProducerToLastProduced.fromObject(item));
            }
            if (data.producer_to_last_implied_irb != null) {
                message.producer_to_last_implied_irb = data.producer_to_last_implied_irb.map(item => ProducerToLastImpliedIRB.fromObject(item));
            }
            if (data.confirm_count != null) {
                message.confirm_count = data.confirm_count;
            }
            if (data.pending_schedule != null) {
                message.pending_schedule = PendingProducerSchedule.fromObject(data.pending_schedule);
            }
            if (data.activated_protocol_features != null) {
                message.activated_protocol_features = ActivatedProtocolFeatures.fromObject(data.activated_protocol_features);
            }
            if (data.validated != null) {
                message.validated = data.validated;
            }
            if (data.action_mroot_savanna != null) {
                message.action_mroot_savanna = data.action_mroot_savanna;
            }
            if (data.finality_lib != null) {
                message.finality_lib = data.finality_lib;
            }
            if (data.finality_data != null) {
                message.finality_data = FinalityData.fromObject(data.finality_data);
            }
            if (data.proposer_policy != null) {
                message.proposer_policy = ProposerPolicy.fromObject(data.proposer_policy);
            }
            if (data.finalizer_policy != null) {
                message.finalizer_policy = FinalizerPolicy.fromObject(data.finalizer_policy);
            }
            if (data.rlimit_ops != null) {
                message.rlimit_ops = data.rlimit_ops.map(item => RlimitOp.fromObject(item));
            }
            if (data.unfiltered_transactions != null) {
                message.unfiltered_transactions = data.unfiltered_transactions.map(item => TransactionReceipt.fromObject(item));
            }
            if (data.filtered_transactions != null) {
                message.filtered_transactions = data.filtered_transactions.map(item => TransactionReceipt.fromObject(item));
            }
            if (data.unfiltered_transaction_count != null) {
                message.unfiltered_transaction_count = data.unfiltered_transaction_count;
            }
            if (data.filtered_transaction_count != null) {
                message.filtered_transaction_count = data.filtered_transaction_count;
            }
            if (data.unfiltered_implicit_transaction_ops != null) {
                message.unfiltered_implicit_transaction_ops = data.unfiltered_implicit_transaction_ops.map(item => TrxOp.fromObject(item));
            }
            if (data.filtered_implicit_transaction_ops != null) {
                message.filtered_implicit_transaction_ops = data.filtered_implicit_transaction_ops.map(item => TrxOp.fromObject(item));
            }
            if (data.unfiltered_transaction_traces != null) {
                message.unfiltered_transaction_traces = data.unfiltered_transaction_traces.map(item => TransactionTrace.fromObject(item));
            }
            if (data.filtered_transaction_traces != null) {
                message.filtered_transaction_traces = data.filtered_transaction_traces.map(item => TransactionTrace.fromObject(item));
            }
            if (data.unfiltered_transaction_trace_count != null) {
                message.unfiltered_transaction_trace_count = data.unfiltered_transaction_trace_count;
            }
            if (data.filtered_transaction_trace_count != null) {
                message.filtered_transaction_trace_count = data.filtered_transaction_trace_count;
            }
            if (data.unfiltered_executed_input_action_count != null) {
                message.unfiltered_executed_input_action_count = data.unfiltered_executed_input_action_count;
            }
            if (data.filtered_executed_input_action_count != null) {
                message.filtered_executed_input_action_count = data.filtered_executed_input_action_count;
            }
            if (data.unfiltered_executed_total_action_count != null) {
                message.unfiltered_executed_total_action_count = data.unfiltered_executed_total_action_count;
            }
            if (data.filtered_executed_total_action_count != null) {
                message.filtered_executed_total_action_count = data.filtered_executed_total_action_count;
            }
            if (data.block_signing_key != null) {
                message.block_signing_key = data.block_signing_key;
            }
            if (data.active_schedule_v1 != null) {
                message.active_schedule_v1 = ProducerSchedule.fromObject(data.active_schedule_v1);
            }
            if (data.valid_block_signing_authority_v2 != null) {
                message.valid_block_signing_authority_v2 = BlockSigningAuthority.fromObject(data.valid_block_signing_authority_v2);
            }
            if (data.active_schedule_v2 != null) {
                message.active_schedule_v2 = ProducerAuthoritySchedule.fromObject(data.active_schedule_v2);
            }
            if (data.filtering_applied != null) {
                message.filtering_applied = data.filtering_applied;
            }
            if (data.filtering_include_filter_expr != null) {
                message.filtering_include_filter_expr = data.filtering_include_filter_expr;
            }
            if (data.filtering_exclude_filter_expr != null) {
                message.filtering_exclude_filter_expr = data.filtering_exclude_filter_expr;
            }
            if (data.filtering_system_actions_include_filter_expr != null) {
                message.filtering_system_actions_include_filter_expr = data.filtering_system_actions_include_filter_expr;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                number?: number;
                version?: number;
                header?: ReturnType<typeof BlockHeader.prototype.toObject>;
                producer_signature?: string;
                block_extensions?: ReturnType<typeof Extension.prototype.toObject>[];
                dpos_proposed_irreversible_blocknum?: number;
                dpos_irreversible_blocknum?: number;
                blockroot_merkle?: ReturnType<typeof BlockRootMerkle.prototype.toObject>;
                producer_to_last_produced?: ReturnType<typeof ProducerToLastProduced.prototype.toObject>[];
                producer_to_last_implied_irb?: ReturnType<typeof ProducerToLastImpliedIRB.prototype.toObject>[];
                confirm_count?: number[];
                pending_schedule?: ReturnType<typeof PendingProducerSchedule.prototype.toObject>;
                activated_protocol_features?: ReturnType<typeof ActivatedProtocolFeatures.prototype.toObject>;
                validated?: boolean;
                action_mroot_savanna?: Uint8Array;
                finality_lib?: number;
                finality_data?: ReturnType<typeof FinalityData.prototype.toObject>;
                proposer_policy?: ReturnType<typeof ProposerPolicy.prototype.toObject>;
                finalizer_policy?: ReturnType<typeof FinalizerPolicy.prototype.toObject>;
                rlimit_ops?: ReturnType<typeof RlimitOp.prototype.toObject>[];
                unfiltered_transactions?: ReturnType<typeof TransactionReceipt.prototype.toObject>[];
                filtered_transactions?: ReturnType<typeof TransactionReceipt.prototype.toObject>[];
                unfiltered_transaction_count?: number;
                filtered_transaction_count?: number;
                unfiltered_implicit_transaction_ops?: ReturnType<typeof TrxOp.prototype.toObject>[];
                filtered_implicit_transaction_ops?: ReturnType<typeof TrxOp.prototype.toObject>[];
                unfiltered_transaction_traces?: ReturnType<typeof TransactionTrace.prototype.toObject>[];
                filtered_transaction_traces?: ReturnType<typeof TransactionTrace.prototype.toObject>[];
                unfiltered_transaction_trace_count?: number;
                filtered_transaction_trace_count?: number;
                unfiltered_executed_input_action_count?: number;
                filtered_executed_input_action_count?: number;
                unfiltered_executed_total_action_count?: number;
                filtered_executed_total_action_count?: number;
                block_signing_key?: string;
                active_schedule_v1?: ReturnType<typeof ProducerSchedule.prototype.toObject>;
                valid_block_signing_authority_v2?: ReturnType<typeof BlockSigningAuthority.prototype.toObject>;
                active_schedule_v2?: ReturnType<typeof ProducerAuthoritySchedule.prototype.toObject>;
                filtering_applied?: boolean;
                filtering_include_filter_expr?: string;
                filtering_exclude_filter_expr?: string;
                filtering_system_actions_include_filter_expr?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.number != null) {
                data.number = this.number;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.producer_signature != null) {
                data.producer_signature = this.producer_signature;
            }
            if (this.block_extensions != null) {
                data.block_extensions = this.block_extensions.map((item: Extension) => item.toObject());
            }
            if (this.dpos_proposed_irreversible_blocknum != null) {
                data.dpos_proposed_irreversible_blocknum = this.dpos_proposed_irreversible_blocknum;
            }
            if (this.dpos_irreversible_blocknum != null) {
                data.dpos_irreversible_blocknum = this.dpos_irreversible_blocknum;
            }
            if (this.blockroot_merkle != null) {
                data.blockroot_merkle = this.blockroot_merkle.toObject();
            }
            if (this.producer_to_last_produced != null) {
                data.producer_to_last_produced = this.producer_to_last_produced.map((item: ProducerToLastProduced) => item.toObject());
            }
            if (this.producer_to_last_implied_irb != null) {
                data.producer_to_last_implied_irb = this.producer_to_last_implied_irb.map((item: ProducerToLastImpliedIRB) => item.toObject());
            }
            if (this.confirm_count != null) {
                data.confirm_count = this.confirm_count;
            }
            if (this.pending_schedule != null) {
                data.pending_schedule = this.pending_schedule.toObject();
            }
            if (this.activated_protocol_features != null) {
                data.activated_protocol_features = this.activated_protocol_features.toObject();
            }
            if (this.validated != null) {
                data.validated = this.validated;
            }
            if (this.action_mroot_savanna != null) {
                data.action_mroot_savanna = this.action_mroot_savanna;
            }
            if (this.finality_lib != null) {
                data.finality_lib = this.finality_lib;
            }
            if (this.finality_data != null) {
                data.finality_data = this.finality_data.toObject();
            }
            if (this.proposer_policy != null) {
                data.proposer_policy = this.proposer_policy.toObject();
            }
            if (this.finalizer_policy != null) {
                data.finalizer_policy = this.finalizer_policy.toObject();
            }
            if (this.rlimit_ops != null) {
                data.rlimit_ops = this.rlimit_ops.map((item: RlimitOp) => item.toObject());
            }
            if (this.unfiltered_transactions != null) {
                data.unfiltered_transactions = this.unfiltered_transactions.map((item: TransactionReceipt) => item.toObject());
            }
            if (this.filtered_transactions != null) {
                data.filtered_transactions = this.filtered_transactions.map((item: TransactionReceipt) => item.toObject());
            }
            if (this.unfiltered_transaction_count != null) {
                data.unfiltered_transaction_count = this.unfiltered_transaction_count;
            }
            if (this.filtered_transaction_count != null) {
                data.filtered_transaction_count = this.filtered_transaction_count;
            }
            if (this.unfiltered_implicit_transaction_ops != null) {
                data.unfiltered_implicit_transaction_ops = this.unfiltered_implicit_transaction_ops.map((item: TrxOp) => item.toObject());
            }
            if (this.filtered_implicit_transaction_ops != null) {
                data.filtered_implicit_transaction_ops = this.filtered_implicit_transaction_ops.map((item: TrxOp) => item.toObject());
            }
            if (this.unfiltered_transaction_traces != null) {
                data.unfiltered_transaction_traces = this.unfiltered_transaction_traces.map((item: TransactionTrace) => item.toObject());
            }
            if (this.filtered_transaction_traces != null) {
                data.filtered_transaction_traces = this.filtered_transaction_traces.map((item: TransactionTrace) => item.toObject());
            }
            if (this.unfiltered_transaction_trace_count != null) {
                data.unfiltered_transaction_trace_count = this.unfiltered_transaction_trace_count;
            }
            if (this.filtered_transaction_trace_count != null) {
                data.filtered_transaction_trace_count = this.filtered_transaction_trace_count;
            }
            if (this.unfiltered_executed_input_action_count != null) {
                data.unfiltered_executed_input_action_count = this.unfiltered_executed_input_action_count;
            }
            if (this.filtered_executed_input_action_count != null) {
                data.filtered_executed_input_action_count = this.filtered_executed_input_action_count;
            }
            if (this.unfiltered_executed_total_action_count != null) {
                data.unfiltered_executed_total_action_count = this.unfiltered_executed_total_action_count;
            }
            if (this.filtered_executed_total_action_count != null) {
                data.filtered_executed_total_action_count = this.filtered_executed_total_action_count;
            }
            if (this.block_signing_key != null) {
                data.block_signing_key = this.block_signing_key;
            }
            if (this.active_schedule_v1 != null) {
                data.active_schedule_v1 = this.active_schedule_v1.toObject();
            }
            if (this.valid_block_signing_authority_v2 != null) {
                data.valid_block_signing_authority_v2 = this.valid_block_signing_authority_v2.toObject();
            }
            if (this.active_schedule_v2 != null) {
                data.active_schedule_v2 = this.active_schedule_v2.toObject();
            }
            if (this.filtering_applied != null) {
                data.filtering_applied = this.filtering_applied;
            }
            if (this.filtering_include_filter_expr != null) {
                data.filtering_include_filter_expr = this.filtering_include_filter_expr;
            }
            if (this.filtering_exclude_filter_expr != null) {
                data.filtering_exclude_filter_expr = this.filtering_exclude_filter_expr;
            }
            if (this.filtering_system_actions_include_filter_expr != null) {
                data.filtering_system_actions_include_filter_expr = this.filtering_system_actions_include_filter_expr;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.number != 0)
                writer.writeUint32(2, this.number);
            if (this.version != 0)
                writer.writeUint32(3, this.version);
            if (this.has_header)
                writer.writeMessage(4, this.header, () => this.header.serialize(writer));
            if (this.producer_signature.length)
                writer.writeString(5, this.producer_signature);
            if (this.block_extensions.length)
                writer.writeRepeatedMessage(7, this.block_extensions, (item: Extension) => item.serialize(writer));
            if (this.dpos_proposed_irreversible_blocknum != 0)
                writer.writeUint32(8, this.dpos_proposed_irreversible_blocknum);
            if (this.dpos_irreversible_blocknum != 0)
                writer.writeUint32(9, this.dpos_irreversible_blocknum);
            if (this.has_blockroot_merkle)
                writer.writeMessage(11, this.blockroot_merkle, () => this.blockroot_merkle.serialize(writer));
            if (this.producer_to_last_produced.length)
                writer.writeRepeatedMessage(12, this.producer_to_last_produced, (item: ProducerToLastProduced) => item.serialize(writer));
            if (this.producer_to_last_implied_irb.length)
                writer.writeRepeatedMessage(13, this.producer_to_last_implied_irb, (item: ProducerToLastImpliedIRB) => item.serialize(writer));
            if (this.confirm_count.length)
                writer.writePackedUint32(15, this.confirm_count);
            if (this.has_pending_schedule)
                writer.writeMessage(16, this.pending_schedule, () => this.pending_schedule.serialize(writer));
            if (this.has_activated_protocol_features)
                writer.writeMessage(17, this.activated_protocol_features, () => this.activated_protocol_features.serialize(writer));
            if (this.validated != false)
                writer.writeBool(18, this.validated);
            if (this.action_mroot_savanna.length)
                writer.writeBytes(60, this.action_mroot_savanna);
            if (this.finality_lib != 0)
                writer.writeUint32(61, this.finality_lib);
            if (this.has_finality_data)
                writer.writeMessage(62, this.finality_data, () => this.finality_data.serialize(writer));
            if (this.has_proposer_policy)
                writer.writeMessage(63, this.proposer_policy, () => this.proposer_policy.serialize(writer));
            if (this.has_finalizer_policy)
                writer.writeMessage(64, this.finalizer_policy, () => this.finalizer_policy.serialize(writer));
            if (this.rlimit_ops.length)
                writer.writeRepeatedMessage(19, this.rlimit_ops, (item: RlimitOp) => item.serialize(writer));
            if (this.unfiltered_transactions.length)
                writer.writeRepeatedMessage(6, this.unfiltered_transactions, (item: TransactionReceipt) => item.serialize(writer));
            if (this.filtered_transactions.length)
                writer.writeRepeatedMessage(47, this.filtered_transactions, (item: TransactionReceipt) => item.serialize(writer));
            if (this.unfiltered_transaction_count != 0)
                writer.writeUint32(22, this.unfiltered_transaction_count);
            if (this.filtered_transaction_count != 0)
                writer.writeUint32(48, this.filtered_transaction_count);
            if (this.unfiltered_implicit_transaction_ops.length)
                writer.writeRepeatedMessage(20, this.unfiltered_implicit_transaction_ops, (item: TrxOp) => item.serialize(writer));
            if (this.filtered_implicit_transaction_ops.length)
                writer.writeRepeatedMessage(49, this.filtered_implicit_transaction_ops, (item: TrxOp) => item.serialize(writer));
            if (this.unfiltered_transaction_traces.length)
                writer.writeRepeatedMessage(21, this.unfiltered_transaction_traces, (item: TransactionTrace) => item.serialize(writer));
            if (this.filtered_transaction_traces.length)
                writer.writeRepeatedMessage(46, this.filtered_transaction_traces, (item: TransactionTrace) => item.serialize(writer));
            if (this.unfiltered_transaction_trace_count != 0)
                writer.writeUint32(23, this.unfiltered_transaction_trace_count);
            if (this.filtered_transaction_trace_count != 0)
                writer.writeUint32(43, this.filtered_transaction_trace_count);
            if (this.unfiltered_executed_input_action_count != 0)
                writer.writeUint32(24, this.unfiltered_executed_input_action_count);
            if (this.filtered_executed_input_action_count != 0)
                writer.writeUint32(44, this.filtered_executed_input_action_count);
            if (this.unfiltered_executed_total_action_count != 0)
                writer.writeUint32(25, this.unfiltered_executed_total_action_count);
            if (this.filtered_executed_total_action_count != 0)
                writer.writeUint32(45, this.filtered_executed_total_action_count);
            if (this.block_signing_key.length)
                writer.writeString(14, this.block_signing_key);
            if (this.has_active_schedule_v1)
                writer.writeMessage(10, this.active_schedule_v1, () => this.active_schedule_v1.serialize(writer));
            if (this.has_valid_block_signing_authority_v2)
                writer.writeMessage(30, this.valid_block_signing_authority_v2, () => this.valid_block_signing_authority_v2.serialize(writer));
            if (this.has_active_schedule_v2)
                writer.writeMessage(31, this.active_schedule_v2, () => this.active_schedule_v2.serialize(writer));
            if (this.filtering_applied != false)
                writer.writeBool(40, this.filtering_applied);
            if (this.filtering_include_filter_expr.length)
                writer.writeString(41, this.filtering_include_filter_expr);
            if (this.filtering_exclude_filter_expr.length)
                writer.writeString(42, this.filtering_exclude_filter_expr);
            if (this.filtering_system_actions_include_filter_expr.length)
                writer.writeString(50, this.filtering_system_actions_include_filter_expr);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Block {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Block();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.number = reader.readUint32();
                        break;
                    case 3:
                        message.version = reader.readUint32();
                        break;
                    case 4:
                        reader.readMessage(message.header, () => message.header = BlockHeader.deserialize(reader));
                        break;
                    case 5:
                        message.producer_signature = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.block_extensions, () => pb_1.Message.addToRepeatedWrapperField(message, 7, Extension.deserialize(reader), Extension));
                        break;
                    case 8:
                        message.dpos_proposed_irreversible_blocknum = reader.readUint32();
                        break;
                    case 9:
                        message.dpos_irreversible_blocknum = reader.readUint32();
                        break;
                    case 11:
                        reader.readMessage(message.blockroot_merkle, () => message.blockroot_merkle = BlockRootMerkle.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.producer_to_last_produced, () => pb_1.Message.addToRepeatedWrapperField(message, 12, ProducerToLastProduced.deserialize(reader), ProducerToLastProduced));
                        break;
                    case 13:
                        reader.readMessage(message.producer_to_last_implied_irb, () => pb_1.Message.addToRepeatedWrapperField(message, 13, ProducerToLastImpliedIRB.deserialize(reader), ProducerToLastImpliedIRB));
                        break;
                    case 15:
                        message.confirm_count = reader.readPackedUint32();
                        break;
                    case 16:
                        reader.readMessage(message.pending_schedule, () => message.pending_schedule = PendingProducerSchedule.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.activated_protocol_features, () => message.activated_protocol_features = ActivatedProtocolFeatures.deserialize(reader));
                        break;
                    case 18:
                        message.validated = reader.readBool();
                        break;
                    case 60:
                        message.action_mroot_savanna = reader.readBytes();
                        break;
                    case 61:
                        message.finality_lib = reader.readUint32();
                        break;
                    case 62:
                        reader.readMessage(message.finality_data, () => message.finality_data = FinalityData.deserialize(reader));
                        break;
                    case 63:
                        reader.readMessage(message.proposer_policy, () => message.proposer_policy = ProposerPolicy.deserialize(reader));
                        break;
                    case 64:
                        reader.readMessage(message.finalizer_policy, () => message.finalizer_policy = FinalizerPolicy.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.rlimit_ops, () => pb_1.Message.addToRepeatedWrapperField(message, 19, RlimitOp.deserialize(reader), RlimitOp));
                        break;
                    case 6:
                        reader.readMessage(message.unfiltered_transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 6, TransactionReceipt.deserialize(reader), TransactionReceipt));
                        break;
                    case 47:
                        reader.readMessage(message.filtered_transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 47, TransactionReceipt.deserialize(reader), TransactionReceipt));
                        break;
                    case 22:
                        message.unfiltered_transaction_count = reader.readUint32();
                        break;
                    case 48:
                        message.filtered_transaction_count = reader.readUint32();
                        break;
                    case 20:
                        reader.readMessage(message.unfiltered_implicit_transaction_ops, () => pb_1.Message.addToRepeatedWrapperField(message, 20, TrxOp.deserialize(reader), TrxOp));
                        break;
                    case 49:
                        reader.readMessage(message.filtered_implicit_transaction_ops, () => pb_1.Message.addToRepeatedWrapperField(message, 49, TrxOp.deserialize(reader), TrxOp));
                        break;
                    case 21:
                        reader.readMessage(message.unfiltered_transaction_traces, () => pb_1.Message.addToRepeatedWrapperField(message, 21, TransactionTrace.deserialize(reader), TransactionTrace));
                        break;
                    case 46:
                        reader.readMessage(message.filtered_transaction_traces, () => pb_1.Message.addToRepeatedWrapperField(message, 46, TransactionTrace.deserialize(reader), TransactionTrace));
                        break;
                    case 23:
                        message.unfiltered_transaction_trace_count = reader.readUint32();
                        break;
                    case 43:
                        message.filtered_transaction_trace_count = reader.readUint32();
                        break;
                    case 24:
                        message.unfiltered_executed_input_action_count = reader.readUint32();
                        break;
                    case 44:
                        message.filtered_executed_input_action_count = reader.readUint32();
                        break;
                    case 25:
                        message.unfiltered_executed_total_action_count = reader.readUint32();
                        break;
                    case 45:
                        message.filtered_executed_total_action_count = reader.readUint32();
                        break;
                    case 14:
                        message.block_signing_key = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.active_schedule_v1, () => message.active_schedule_v1 = ProducerSchedule.deserialize(reader));
                        break;
                    case 30:
                        reader.readMessage(message.valid_block_signing_authority_v2, () => message.valid_block_signing_authority_v2 = BlockSigningAuthority.deserialize(reader));
                        break;
                    case 31:
                        reader.readMessage(message.active_schedule_v2, () => message.active_schedule_v2 = ProducerAuthoritySchedule.deserialize(reader));
                        break;
                    case 40:
                        message.filtering_applied = reader.readBool();
                        break;
                    case 41:
                        message.filtering_include_filter_expr = reader.readString();
                        break;
                    case 42:
                        message.filtering_exclude_filter_expr = reader.readString();
                        break;
                    case 50:
                        message.filtering_system_actions_include_filter_expr = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Block {
            return Block.deserialize(bytes);
        }
    }
    export class FinalityData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            major_version?: number;
            minor_version?: number;
            active_finalizer_policy_generation?: number;
            action_mroot?: Uint8Array;
            reversible_blocks_mroot?: Uint8Array;
            latest_qc_claim_block_num?: number;
            latest_qc_claim_finality_digest?: Uint8Array;
            latest_qc_claim_timestamp?: dependency_1.google.protobuf.Timestamp;
            base_digest?: Uint8Array;
            pending_finalizer_policy?: FinalizerPolicy;
            last_pending_finalizer_policy_generation?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("major_version" in data && data.major_version != undefined) {
                    this.major_version = data.major_version;
                }
                if ("minor_version" in data && data.minor_version != undefined) {
                    this.minor_version = data.minor_version;
                }
                if ("active_finalizer_policy_generation" in data && data.active_finalizer_policy_generation != undefined) {
                    this.active_finalizer_policy_generation = data.active_finalizer_policy_generation;
                }
                if ("action_mroot" in data && data.action_mroot != undefined) {
                    this.action_mroot = data.action_mroot;
                }
                if ("reversible_blocks_mroot" in data && data.reversible_blocks_mroot != undefined) {
                    this.reversible_blocks_mroot = data.reversible_blocks_mroot;
                }
                if ("latest_qc_claim_block_num" in data && data.latest_qc_claim_block_num != undefined) {
                    this.latest_qc_claim_block_num = data.latest_qc_claim_block_num;
                }
                if ("latest_qc_claim_finality_digest" in data && data.latest_qc_claim_finality_digest != undefined) {
                    this.latest_qc_claim_finality_digest = data.latest_qc_claim_finality_digest;
                }
                if ("latest_qc_claim_timestamp" in data && data.latest_qc_claim_timestamp != undefined) {
                    this.latest_qc_claim_timestamp = data.latest_qc_claim_timestamp;
                }
                if ("base_digest" in data && data.base_digest != undefined) {
                    this.base_digest = data.base_digest;
                }
                if ("pending_finalizer_policy" in data && data.pending_finalizer_policy != undefined) {
                    this.pending_finalizer_policy = data.pending_finalizer_policy;
                }
                if ("last_pending_finalizer_policy_generation" in data && data.last_pending_finalizer_policy_generation != undefined) {
                    this.last_pending_finalizer_policy_generation = data.last_pending_finalizer_policy_generation;
                }
            }
        }
        get major_version() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set major_version(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get minor_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set minor_version(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get active_finalizer_policy_generation() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set active_finalizer_policy_generation(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get action_mroot() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set action_mroot(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get reversible_blocks_mroot() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set reversible_blocks_mroot(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get latest_qc_claim_block_num() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set latest_qc_claim_block_num(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get latest_qc_claim_finality_digest() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set latest_qc_claim_finality_digest(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        get latest_qc_claim_timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 8) as dependency_1.google.protobuf.Timestamp;
        }
        set latest_qc_claim_timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_latest_qc_claim_timestamp() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get base_digest() {
            return pb_1.Message.getFieldWithDefault(this, 9, new Uint8Array(0)) as Uint8Array;
        }
        set base_digest(value: Uint8Array) {
            pb_1.Message.setField(this, 9, value);
        }
        get pending_finalizer_policy() {
            return pb_1.Message.getWrapperField(this, FinalizerPolicy, 10) as FinalizerPolicy;
        }
        set pending_finalizer_policy(value: FinalizerPolicy) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_pending_finalizer_policy() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get last_pending_finalizer_policy_generation() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set last_pending_finalizer_policy_generation(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            major_version?: number;
            minor_version?: number;
            active_finalizer_policy_generation?: number;
            action_mroot?: Uint8Array;
            reversible_blocks_mroot?: Uint8Array;
            latest_qc_claim_block_num?: number;
            latest_qc_claim_finality_digest?: Uint8Array;
            latest_qc_claim_timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            base_digest?: Uint8Array;
            pending_finalizer_policy?: ReturnType<typeof FinalizerPolicy.prototype.toObject>;
            last_pending_finalizer_policy_generation?: number;
        }): FinalityData {
            const message = new FinalityData({});
            if (data.major_version != null) {
                message.major_version = data.major_version;
            }
            if (data.minor_version != null) {
                message.minor_version = data.minor_version;
            }
            if (data.active_finalizer_policy_generation != null) {
                message.active_finalizer_policy_generation = data.active_finalizer_policy_generation;
            }
            if (data.action_mroot != null) {
                message.action_mroot = data.action_mroot;
            }
            if (data.reversible_blocks_mroot != null) {
                message.reversible_blocks_mroot = data.reversible_blocks_mroot;
            }
            if (data.latest_qc_claim_block_num != null) {
                message.latest_qc_claim_block_num = data.latest_qc_claim_block_num;
            }
            if (data.latest_qc_claim_finality_digest != null) {
                message.latest_qc_claim_finality_digest = data.latest_qc_claim_finality_digest;
            }
            if (data.latest_qc_claim_timestamp != null) {
                message.latest_qc_claim_timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.latest_qc_claim_timestamp);
            }
            if (data.base_digest != null) {
                message.base_digest = data.base_digest;
            }
            if (data.pending_finalizer_policy != null) {
                message.pending_finalizer_policy = FinalizerPolicy.fromObject(data.pending_finalizer_policy);
            }
            if (data.last_pending_finalizer_policy_generation != null) {
                message.last_pending_finalizer_policy_generation = data.last_pending_finalizer_policy_generation;
            }
            return message;
        }
        toObject() {
            const data: {
                major_version?: number;
                minor_version?: number;
                active_finalizer_policy_generation?: number;
                action_mroot?: Uint8Array;
                reversible_blocks_mroot?: Uint8Array;
                latest_qc_claim_block_num?: number;
                latest_qc_claim_finality_digest?: Uint8Array;
                latest_qc_claim_timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                base_digest?: Uint8Array;
                pending_finalizer_policy?: ReturnType<typeof FinalizerPolicy.prototype.toObject>;
                last_pending_finalizer_policy_generation?: number;
            } = {};
            if (this.major_version != null) {
                data.major_version = this.major_version;
            }
            if (this.minor_version != null) {
                data.minor_version = this.minor_version;
            }
            if (this.active_finalizer_policy_generation != null) {
                data.active_finalizer_policy_generation = this.active_finalizer_policy_generation;
            }
            if (this.action_mroot != null) {
                data.action_mroot = this.action_mroot;
            }
            if (this.reversible_blocks_mroot != null) {
                data.reversible_blocks_mroot = this.reversible_blocks_mroot;
            }
            if (this.latest_qc_claim_block_num != null) {
                data.latest_qc_claim_block_num = this.latest_qc_claim_block_num;
            }
            if (this.latest_qc_claim_finality_digest != null) {
                data.latest_qc_claim_finality_digest = this.latest_qc_claim_finality_digest;
            }
            if (this.latest_qc_claim_timestamp != null) {
                data.latest_qc_claim_timestamp = this.latest_qc_claim_timestamp.toObject();
            }
            if (this.base_digest != null) {
                data.base_digest = this.base_digest;
            }
            if (this.pending_finalizer_policy != null) {
                data.pending_finalizer_policy = this.pending_finalizer_policy.toObject();
            }
            if (this.last_pending_finalizer_policy_generation != null) {
                data.last_pending_finalizer_policy_generation = this.last_pending_finalizer_policy_generation;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.major_version != 0)
                writer.writeUint32(1, this.major_version);
            if (this.minor_version != 0)
                writer.writeUint32(2, this.minor_version);
            if (this.active_finalizer_policy_generation != 0)
                writer.writeUint32(3, this.active_finalizer_policy_generation);
            if (this.action_mroot.length)
                writer.writeBytes(4, this.action_mroot);
            if (this.reversible_blocks_mroot.length)
                writer.writeBytes(5, this.reversible_blocks_mroot);
            if (this.latest_qc_claim_block_num != 0)
                writer.writeUint32(6, this.latest_qc_claim_block_num);
            if (this.latest_qc_claim_finality_digest.length)
                writer.writeBytes(7, this.latest_qc_claim_finality_digest);
            if (this.has_latest_qc_claim_timestamp)
                writer.writeMessage(8, this.latest_qc_claim_timestamp, () => this.latest_qc_claim_timestamp.serialize(writer));
            if (this.base_digest.length)
                writer.writeBytes(9, this.base_digest);
            if (this.has_pending_finalizer_policy)
                writer.writeMessage(10, this.pending_finalizer_policy, () => this.pending_finalizer_policy.serialize(writer));
            if (this.last_pending_finalizer_policy_generation != 0)
                writer.writeUint32(11, this.last_pending_finalizer_policy_generation);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FinalityData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FinalityData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.major_version = reader.readUint32();
                        break;
                    case 2:
                        message.minor_version = reader.readUint32();
                        break;
                    case 3:
                        message.active_finalizer_policy_generation = reader.readUint32();
                        break;
                    case 4:
                        message.action_mroot = reader.readBytes();
                        break;
                    case 5:
                        message.reversible_blocks_mroot = reader.readBytes();
                        break;
                    case 6:
                        message.latest_qc_claim_block_num = reader.readUint32();
                        break;
                    case 7:
                        message.latest_qc_claim_finality_digest = reader.readBytes();
                        break;
                    case 8:
                        reader.readMessage(message.latest_qc_claim_timestamp, () => message.latest_qc_claim_timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 9:
                        message.base_digest = reader.readBytes();
                        break;
                    case 10:
                        reader.readMessage(message.pending_finalizer_policy, () => message.pending_finalizer_policy = FinalizerPolicy.deserialize(reader));
                        break;
                    case 11:
                        message.last_pending_finalizer_policy_generation = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FinalityData {
            return FinalityData.deserialize(bytes);
        }
    }
    export class FinalizerPolicy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            generation?: number;
            threshold?: string;
            finalizers?: FinalizerAuthority[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("generation" in data && data.generation != undefined) {
                    this.generation = data.generation;
                }
                if ("threshold" in data && data.threshold != undefined) {
                    this.threshold = data.threshold;
                }
                if ("finalizers" in data && data.finalizers != undefined) {
                    this.finalizers = data.finalizers;
                }
            }
        }
        get generation() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set generation(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get threshold() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set threshold(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get finalizers() {
            return pb_1.Message.getRepeatedWrapperField(this, FinalizerAuthority, 3) as FinalizerAuthority[];
        }
        set finalizers(value: FinalizerAuthority[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            generation?: number;
            threshold?: string;
            finalizers?: ReturnType<typeof FinalizerAuthority.prototype.toObject>[];
        }): FinalizerPolicy {
            const message = new FinalizerPolicy({});
            if (data.generation != null) {
                message.generation = data.generation;
            }
            if (data.threshold != null) {
                message.threshold = data.threshold;
            }
            if (data.finalizers != null) {
                message.finalizers = data.finalizers.map(item => FinalizerAuthority.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                generation?: number;
                threshold?: string;
                finalizers?: ReturnType<typeof FinalizerAuthority.prototype.toObject>[];
            } = {};
            if (this.generation != null) {
                data.generation = this.generation;
            }
            if (this.threshold != null) {
                data.threshold = this.threshold;
            }
            if (this.finalizers != null) {
                data.finalizers = this.finalizers.map((item: FinalizerAuthority) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.generation != 0)
                writer.writeUint32(1, this.generation);
            if (this.threshold != "0")
                writer.writeUint64String(2, this.threshold);
            if (this.finalizers.length)
                writer.writeRepeatedMessage(3, this.finalizers, (item: FinalizerAuthority) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FinalizerPolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FinalizerPolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.generation = reader.readUint32();
                        break;
                    case 2:
                        message.threshold = reader.readUint64String();
                        break;
                    case 3:
                        reader.readMessage(message.finalizers, () => pb_1.Message.addToRepeatedWrapperField(message, 3, FinalizerAuthority.deserialize(reader), FinalizerAuthority));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FinalizerPolicy {
            return FinalizerPolicy.deserialize(bytes);
        }
    }
    export class FinalizerAuthority extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            description?: string;
            weight?: string;
            public_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("weight" in data && data.weight != undefined) {
                    this.weight = data.weight;
                }
                if ("public_key" in data && data.public_key != undefined) {
                    this.public_key = data.public_key;
                }
            }
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get weight() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set weight(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get public_key() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set public_key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            description?: string;
            weight?: string;
            public_key?: string;
        }): FinalizerAuthority {
            const message = new FinalizerAuthority({});
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.weight != null) {
                message.weight = data.weight;
            }
            if (data.public_key != null) {
                message.public_key = data.public_key;
            }
            return message;
        }
        toObject() {
            const data: {
                description?: string;
                weight?: string;
                public_key?: string;
            } = {};
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.weight != null) {
                data.weight = this.weight;
            }
            if (this.public_key != null) {
                data.public_key = this.public_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.description.length)
                writer.writeString(1, this.description);
            if (this.weight != "0")
                writer.writeUint64String(2, this.weight);
            if (this.public_key.length)
                writer.writeString(3, this.public_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FinalizerAuthority {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FinalizerAuthority();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.description = reader.readString();
                        break;
                    case 2:
                        message.weight = reader.readUint64String();
                        break;
                    case 3:
                        message.public_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FinalizerAuthority {
            return FinalizerAuthority.deserialize(bytes);
        }
    }
    export class BlockWithRefs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            block?: Block;
            implicit_transaction_refs?: TransactionRefs;
            transaction_refs?: TransactionRefs;
            transaction_trace_refs?: TransactionRefs;
            irreversible?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
                if ("implicit_transaction_refs" in data && data.implicit_transaction_refs != undefined) {
                    this.implicit_transaction_refs = data.implicit_transaction_refs;
                }
                if ("transaction_refs" in data && data.transaction_refs != undefined) {
                    this.transaction_refs = data.transaction_refs;
                }
                if ("transaction_trace_refs" in data && data.transaction_trace_refs != undefined) {
                    this.transaction_trace_refs = data.transaction_trace_refs;
                }
                if ("irreversible" in data && data.irreversible != undefined) {
                    this.irreversible = data.irreversible;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get block() {
            return pb_1.Message.getWrapperField(this, Block, 2) as Block;
        }
        set block(value: Block) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get implicit_transaction_refs() {
            return pb_1.Message.getWrapperField(this, TransactionRefs, 3) as TransactionRefs;
        }
        set implicit_transaction_refs(value: TransactionRefs) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_implicit_transaction_refs() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get transaction_refs() {
            return pb_1.Message.getWrapperField(this, TransactionRefs, 4) as TransactionRefs;
        }
        set transaction_refs(value: TransactionRefs) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_transaction_refs() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get transaction_trace_refs() {
            return pb_1.Message.getWrapperField(this, TransactionRefs, 5) as TransactionRefs;
        }
        set transaction_trace_refs(value: TransactionRefs) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_transaction_trace_refs() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get irreversible() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set irreversible(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            id?: string;
            block?: ReturnType<typeof Block.prototype.toObject>;
            implicit_transaction_refs?: ReturnType<typeof TransactionRefs.prototype.toObject>;
            transaction_refs?: ReturnType<typeof TransactionRefs.prototype.toObject>;
            transaction_trace_refs?: ReturnType<typeof TransactionRefs.prototype.toObject>;
            irreversible?: boolean;
        }): BlockWithRefs {
            const message = new BlockWithRefs({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.block != null) {
                message.block = Block.fromObject(data.block);
            }
            if (data.implicit_transaction_refs != null) {
                message.implicit_transaction_refs = TransactionRefs.fromObject(data.implicit_transaction_refs);
            }
            if (data.transaction_refs != null) {
                message.transaction_refs = TransactionRefs.fromObject(data.transaction_refs);
            }
            if (data.transaction_trace_refs != null) {
                message.transaction_trace_refs = TransactionRefs.fromObject(data.transaction_trace_refs);
            }
            if (data.irreversible != null) {
                message.irreversible = data.irreversible;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                block?: ReturnType<typeof Block.prototype.toObject>;
                implicit_transaction_refs?: ReturnType<typeof TransactionRefs.prototype.toObject>;
                transaction_refs?: ReturnType<typeof TransactionRefs.prototype.toObject>;
                transaction_trace_refs?: ReturnType<typeof TransactionRefs.prototype.toObject>;
                irreversible?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            if (this.implicit_transaction_refs != null) {
                data.implicit_transaction_refs = this.implicit_transaction_refs.toObject();
            }
            if (this.transaction_refs != null) {
                data.transaction_refs = this.transaction_refs.toObject();
            }
            if (this.transaction_trace_refs != null) {
                data.transaction_trace_refs = this.transaction_trace_refs.toObject();
            }
            if (this.irreversible != null) {
                data.irreversible = this.irreversible;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.has_block)
                writer.writeMessage(2, this.block, () => this.block.serialize(writer));
            if (this.has_implicit_transaction_refs)
                writer.writeMessage(3, this.implicit_transaction_refs, () => this.implicit_transaction_refs.serialize(writer));
            if (this.has_transaction_refs)
                writer.writeMessage(4, this.transaction_refs, () => this.transaction_refs.serialize(writer));
            if (this.has_transaction_trace_refs)
                writer.writeMessage(5, this.transaction_trace_refs, () => this.transaction_trace_refs.serialize(writer));
            if (this.irreversible != false)
                writer.writeBool(6, this.irreversible);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockWithRefs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockWithRefs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.block, () => message.block = Block.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.implicit_transaction_refs, () => message.implicit_transaction_refs = TransactionRefs.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.transaction_refs, () => message.transaction_refs = TransactionRefs.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.transaction_trace_refs, () => message.transaction_trace_refs = TransactionRefs.deserialize(reader));
                        break;
                    case 6:
                        message.irreversible = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockWithRefs {
            return BlockWithRefs.deserialize(bytes);
        }
    }
    export class TransactionRefs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            hashes?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("hashes" in data && data.hashes != undefined) {
                    this.hashes = data.hashes;
                }
            }
        }
        get hashes() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set hashes(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            hashes?: Uint8Array[];
        }): TransactionRefs {
            const message = new TransactionRefs({});
            if (data.hashes != null) {
                message.hashes = data.hashes;
            }
            return message;
        }
        toObject() {
            const data: {
                hashes?: Uint8Array[];
            } = {};
            if (this.hashes != null) {
                data.hashes = this.hashes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hashes.length)
                writer.writeRepeatedBytes(1, this.hashes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionRefs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionRefs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionRefs {
            return TransactionRefs.deserialize(bytes);
        }
    }
    export class ActivatedProtocolFeatures extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            protocol_features?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("protocol_features" in data && data.protocol_features != undefined) {
                    this.protocol_features = data.protocol_features;
                }
            }
        }
        get protocol_features() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set protocol_features(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            protocol_features?: Uint8Array[];
        }): ActivatedProtocolFeatures {
            const message = new ActivatedProtocolFeatures({});
            if (data.protocol_features != null) {
                message.protocol_features = data.protocol_features;
            }
            return message;
        }
        toObject() {
            const data: {
                protocol_features?: Uint8Array[];
            } = {};
            if (this.protocol_features != null) {
                data.protocol_features = this.protocol_features;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.protocol_features.length)
                writer.writeRepeatedBytes(1, this.protocol_features);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActivatedProtocolFeatures {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActivatedProtocolFeatures();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActivatedProtocolFeatures {
            return ActivatedProtocolFeatures.deserialize(bytes);
        }
    }
    export class PendingProducerSchedule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            schedule_lib_num?: number;
            schedule_hash?: Uint8Array;
            schedule_v1?: ProducerSchedule;
            schedule_v2?: ProducerAuthoritySchedule;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schedule_lib_num" in data && data.schedule_lib_num != undefined) {
                    this.schedule_lib_num = data.schedule_lib_num;
                }
                if ("schedule_hash" in data && data.schedule_hash != undefined) {
                    this.schedule_hash = data.schedule_hash;
                }
                if ("schedule_v1" in data && data.schedule_v1 != undefined) {
                    this.schedule_v1 = data.schedule_v1;
                }
                if ("schedule_v2" in data && data.schedule_v2 != undefined) {
                    this.schedule_v2 = data.schedule_v2;
                }
            }
        }
        get schedule_lib_num() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set schedule_lib_num(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get schedule_hash() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set schedule_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get schedule_v1() {
            return pb_1.Message.getWrapperField(this, ProducerSchedule, 3) as ProducerSchedule;
        }
        set schedule_v1(value: ProducerSchedule) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_schedule_v1() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get schedule_v2() {
            return pb_1.Message.getWrapperField(this, ProducerAuthoritySchedule, 4) as ProducerAuthoritySchedule;
        }
        set schedule_v2(value: ProducerAuthoritySchedule) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_schedule_v2() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            schedule_lib_num?: number;
            schedule_hash?: Uint8Array;
            schedule_v1?: ReturnType<typeof ProducerSchedule.prototype.toObject>;
            schedule_v2?: ReturnType<typeof ProducerAuthoritySchedule.prototype.toObject>;
        }): PendingProducerSchedule {
            const message = new PendingProducerSchedule({});
            if (data.schedule_lib_num != null) {
                message.schedule_lib_num = data.schedule_lib_num;
            }
            if (data.schedule_hash != null) {
                message.schedule_hash = data.schedule_hash;
            }
            if (data.schedule_v1 != null) {
                message.schedule_v1 = ProducerSchedule.fromObject(data.schedule_v1);
            }
            if (data.schedule_v2 != null) {
                message.schedule_v2 = ProducerAuthoritySchedule.fromObject(data.schedule_v2);
            }
            return message;
        }
        toObject() {
            const data: {
                schedule_lib_num?: number;
                schedule_hash?: Uint8Array;
                schedule_v1?: ReturnType<typeof ProducerSchedule.prototype.toObject>;
                schedule_v2?: ReturnType<typeof ProducerAuthoritySchedule.prototype.toObject>;
            } = {};
            if (this.schedule_lib_num != null) {
                data.schedule_lib_num = this.schedule_lib_num;
            }
            if (this.schedule_hash != null) {
                data.schedule_hash = this.schedule_hash;
            }
            if (this.schedule_v1 != null) {
                data.schedule_v1 = this.schedule_v1.toObject();
            }
            if (this.schedule_v2 != null) {
                data.schedule_v2 = this.schedule_v2.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schedule_lib_num != 0)
                writer.writeUint32(1, this.schedule_lib_num);
            if (this.schedule_hash.length)
                writer.writeBytes(2, this.schedule_hash);
            if (this.has_schedule_v1)
                writer.writeMessage(3, this.schedule_v1, () => this.schedule_v1.serialize(writer));
            if (this.has_schedule_v2)
                writer.writeMessage(4, this.schedule_v2, () => this.schedule_v2.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PendingProducerSchedule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PendingProducerSchedule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.schedule_lib_num = reader.readUint32();
                        break;
                    case 2:
                        message.schedule_hash = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.schedule_v1, () => message.schedule_v1 = ProducerSchedule.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.schedule_v2, () => message.schedule_v2 = ProducerAuthoritySchedule.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PendingProducerSchedule {
            return PendingProducerSchedule.deserialize(bytes);
        }
    }
    export class ProducerSchedule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version?: number;
            producers?: ProducerKey[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("producers" in data && data.producers != undefined) {
                    this.producers = data.producers;
                }
            }
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get producers() {
            return pb_1.Message.getRepeatedWrapperField(this, ProducerKey, 2) as ProducerKey[];
        }
        set producers(value: ProducerKey[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            version?: number;
            producers?: ReturnType<typeof ProducerKey.prototype.toObject>[];
        }): ProducerSchedule {
            const message = new ProducerSchedule({});
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.producers != null) {
                message.producers = data.producers.map(item => ProducerKey.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                version?: number;
                producers?: ReturnType<typeof ProducerKey.prototype.toObject>[];
            } = {};
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.producers != null) {
                data.producers = this.producers.map((item: ProducerKey) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version != 0)
                writer.writeUint32(1, this.version);
            if (this.producers.length)
                writer.writeRepeatedMessage(2, this.producers, (item: ProducerKey) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProducerSchedule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProducerSchedule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version = reader.readUint32();
                        break;
                    case 2:
                        reader.readMessage(message.producers, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ProducerKey.deserialize(reader), ProducerKey));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProducerSchedule {
            return ProducerSchedule.deserialize(bytes);
        }
    }
    export class ProducerKey extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_name?: string;
            block_signing_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_name" in data && data.account_name != undefined) {
                    this.account_name = data.account_name;
                }
                if ("block_signing_key" in data && data.block_signing_key != undefined) {
                    this.block_signing_key = data.block_signing_key;
                }
            }
        }
        get account_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set account_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get block_signing_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set block_signing_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            account_name?: string;
            block_signing_key?: string;
        }): ProducerKey {
            const message = new ProducerKey({});
            if (data.account_name != null) {
                message.account_name = data.account_name;
            }
            if (data.block_signing_key != null) {
                message.block_signing_key = data.block_signing_key;
            }
            return message;
        }
        toObject() {
            const data: {
                account_name?: string;
                block_signing_key?: string;
            } = {};
            if (this.account_name != null) {
                data.account_name = this.account_name;
            }
            if (this.block_signing_key != null) {
                data.block_signing_key = this.block_signing_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_name.length)
                writer.writeString(1, this.account_name);
            if (this.block_signing_key.length)
                writer.writeString(2, this.block_signing_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProducerKey {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProducerKey();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_name = reader.readString();
                        break;
                    case 2:
                        message.block_signing_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProducerKey {
            return ProducerKey.deserialize(bytes);
        }
    }
    export class ProducerAuthoritySchedule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version?: number;
            producers?: ProducerAuthority[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("producers" in data && data.producers != undefined) {
                    this.producers = data.producers;
                }
            }
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get producers() {
            return pb_1.Message.getRepeatedWrapperField(this, ProducerAuthority, 2) as ProducerAuthority[];
        }
        set producers(value: ProducerAuthority[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            version?: number;
            producers?: ReturnType<typeof ProducerAuthority.prototype.toObject>[];
        }): ProducerAuthoritySchedule {
            const message = new ProducerAuthoritySchedule({});
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.producers != null) {
                message.producers = data.producers.map(item => ProducerAuthority.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                version?: number;
                producers?: ReturnType<typeof ProducerAuthority.prototype.toObject>[];
            } = {};
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.producers != null) {
                data.producers = this.producers.map((item: ProducerAuthority) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version != 0)
                writer.writeUint32(1, this.version);
            if (this.producers.length)
                writer.writeRepeatedMessage(2, this.producers, (item: ProducerAuthority) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProducerAuthoritySchedule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProducerAuthoritySchedule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version = reader.readUint32();
                        break;
                    case 2:
                        reader.readMessage(message.producers, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ProducerAuthority.deserialize(reader), ProducerAuthority));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProducerAuthoritySchedule {
            return ProducerAuthoritySchedule.deserialize(bytes);
        }
    }
    export class ProducerAuthority extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_name?: string;
            block_signing_authority?: BlockSigningAuthority;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_name" in data && data.account_name != undefined) {
                    this.account_name = data.account_name;
                }
                if ("block_signing_authority" in data && data.block_signing_authority != undefined) {
                    this.block_signing_authority = data.block_signing_authority;
                }
            }
        }
        get account_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set account_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get block_signing_authority() {
            return pb_1.Message.getWrapperField(this, BlockSigningAuthority, 2) as BlockSigningAuthority;
        }
        set block_signing_authority(value: BlockSigningAuthority) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_block_signing_authority() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            account_name?: string;
            block_signing_authority?: ReturnType<typeof BlockSigningAuthority.prototype.toObject>;
        }): ProducerAuthority {
            const message = new ProducerAuthority({});
            if (data.account_name != null) {
                message.account_name = data.account_name;
            }
            if (data.block_signing_authority != null) {
                message.block_signing_authority = BlockSigningAuthority.fromObject(data.block_signing_authority);
            }
            return message;
        }
        toObject() {
            const data: {
                account_name?: string;
                block_signing_authority?: ReturnType<typeof BlockSigningAuthority.prototype.toObject>;
            } = {};
            if (this.account_name != null) {
                data.account_name = this.account_name;
            }
            if (this.block_signing_authority != null) {
                data.block_signing_authority = this.block_signing_authority.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_name.length)
                writer.writeString(1, this.account_name);
            if (this.has_block_signing_authority)
                writer.writeMessage(2, this.block_signing_authority, () => this.block_signing_authority.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProducerAuthority {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProducerAuthority();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.block_signing_authority, () => message.block_signing_authority = BlockSigningAuthority.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProducerAuthority {
            return ProducerAuthority.deserialize(bytes);
        }
    }
    export class ProposerPolicy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            active_time?: dependency_1.google.protobuf.Timestamp;
            proposer_schedule?: ProducerAuthoritySchedule;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("active_time" in data && data.active_time != undefined) {
                    this.active_time = data.active_time;
                }
                if ("proposer_schedule" in data && data.proposer_schedule != undefined) {
                    this.proposer_schedule = data.proposer_schedule;
                }
            }
        }
        get active_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
        }
        set active_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_active_time() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get proposer_schedule() {
            return pb_1.Message.getWrapperField(this, ProducerAuthoritySchedule, 2) as ProducerAuthoritySchedule;
        }
        set proposer_schedule(value: ProducerAuthoritySchedule) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_proposer_schedule() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            active_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            proposer_schedule?: ReturnType<typeof ProducerAuthoritySchedule.prototype.toObject>;
        }): ProposerPolicy {
            const message = new ProposerPolicy({});
            if (data.active_time != null) {
                message.active_time = dependency_1.google.protobuf.Timestamp.fromObject(data.active_time);
            }
            if (data.proposer_schedule != null) {
                message.proposer_schedule = ProducerAuthoritySchedule.fromObject(data.proposer_schedule);
            }
            return message;
        }
        toObject() {
            const data: {
                active_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                proposer_schedule?: ReturnType<typeof ProducerAuthoritySchedule.prototype.toObject>;
            } = {};
            if (this.active_time != null) {
                data.active_time = this.active_time.toObject();
            }
            if (this.proposer_schedule != null) {
                data.proposer_schedule = this.proposer_schedule.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_active_time)
                writer.writeMessage(1, this.active_time, () => this.active_time.serialize(writer));
            if (this.has_proposer_schedule)
                writer.writeMessage(2, this.proposer_schedule, () => this.proposer_schedule.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProposerPolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProposerPolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.active_time, () => message.active_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.proposer_schedule, () => message.proposer_schedule = ProducerAuthoritySchedule.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProposerPolicy {
            return ProposerPolicy.deserialize(bytes);
        }
    }
    export class BlockSigningAuthority extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            v0?: BlockSigningAuthorityV0;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("v0" in data && data.v0 != undefined) {
                    this.v0 = data.v0;
                }
            }
        }
        get v0() {
            return pb_1.Message.getWrapperField(this, BlockSigningAuthorityV0, 1) as BlockSigningAuthorityV0;
        }
        set v0(value: BlockSigningAuthorityV0) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_v0() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get variant() {
            const cases: {
                [index: number]: "none" | "v0";
            } = {
                0: "none",
                1: "v0"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            v0?: ReturnType<typeof BlockSigningAuthorityV0.prototype.toObject>;
        }): BlockSigningAuthority {
            const message = new BlockSigningAuthority({});
            if (data.v0 != null) {
                message.v0 = BlockSigningAuthorityV0.fromObject(data.v0);
            }
            return message;
        }
        toObject() {
            const data: {
                v0?: ReturnType<typeof BlockSigningAuthorityV0.prototype.toObject>;
            } = {};
            if (this.v0 != null) {
                data.v0 = this.v0.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_v0)
                writer.writeMessage(1, this.v0, () => this.v0.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockSigningAuthority {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockSigningAuthority();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.v0, () => message.v0 = BlockSigningAuthorityV0.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockSigningAuthority {
            return BlockSigningAuthority.deserialize(bytes);
        }
    }
    export class BlockSigningAuthorityV0 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            threshold?: number;
            keys?: KeyWeight[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("threshold" in data && data.threshold != undefined) {
                    this.threshold = data.threshold;
                }
                if ("keys" in data && data.keys != undefined) {
                    this.keys = data.keys;
                }
            }
        }
        get threshold() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set threshold(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get keys() {
            return pb_1.Message.getRepeatedWrapperField(this, KeyWeight, 2) as KeyWeight[];
        }
        set keys(value: KeyWeight[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            threshold?: number;
            keys?: ReturnType<typeof KeyWeight.prototype.toObject>[];
        }): BlockSigningAuthorityV0 {
            const message = new BlockSigningAuthorityV0({});
            if (data.threshold != null) {
                message.threshold = data.threshold;
            }
            if (data.keys != null) {
                message.keys = data.keys.map(item => KeyWeight.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                threshold?: number;
                keys?: ReturnType<typeof KeyWeight.prototype.toObject>[];
            } = {};
            if (this.threshold != null) {
                data.threshold = this.threshold;
            }
            if (this.keys != null) {
                data.keys = this.keys.map((item: KeyWeight) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.threshold != 0)
                writer.writeUint32(1, this.threshold);
            if (this.keys.length)
                writer.writeRepeatedMessage(2, this.keys, (item: KeyWeight) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockSigningAuthorityV0 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockSigningAuthorityV0();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.threshold = reader.readUint32();
                        break;
                    case 2:
                        reader.readMessage(message.keys, () => pb_1.Message.addToRepeatedWrapperField(message, 2, KeyWeight.deserialize(reader), KeyWeight));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockSigningAuthorityV0 {
            return BlockSigningAuthorityV0.deserialize(bytes);
        }
    }
    export class BlockRootMerkle extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            node_count?: number;
            active_nodes?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("node_count" in data && data.node_count != undefined) {
                    this.node_count = data.node_count;
                }
                if ("active_nodes" in data && data.active_nodes != undefined) {
                    this.active_nodes = data.active_nodes;
                }
            }
        }
        get node_count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set node_count(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get active_nodes() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
        }
        set active_nodes(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            node_count?: number;
            active_nodes?: Uint8Array[];
        }): BlockRootMerkle {
            const message = new BlockRootMerkle({});
            if (data.node_count != null) {
                message.node_count = data.node_count;
            }
            if (data.active_nodes != null) {
                message.active_nodes = data.active_nodes;
            }
            return message;
        }
        toObject() {
            const data: {
                node_count?: number;
                active_nodes?: Uint8Array[];
            } = {};
            if (this.node_count != null) {
                data.node_count = this.node_count;
            }
            if (this.active_nodes != null) {
                data.active_nodes = this.active_nodes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.node_count != 0)
                writer.writeUint32(1, this.node_count);
            if (this.active_nodes.length)
                writer.writeRepeatedBytes(2, this.active_nodes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockRootMerkle {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockRootMerkle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.node_count = reader.readUint32();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockRootMerkle {
            return BlockRootMerkle.deserialize(bytes);
        }
    }
    export class ProducerToLastProduced extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            last_block_num_produced?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("last_block_num_produced" in data && data.last_block_num_produced != undefined) {
                    this.last_block_num_produced = data.last_block_num_produced;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get last_block_num_produced() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set last_block_num_produced(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            last_block_num_produced?: number;
        }): ProducerToLastProduced {
            const message = new ProducerToLastProduced({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.last_block_num_produced != null) {
                message.last_block_num_produced = data.last_block_num_produced;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                last_block_num_produced?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.last_block_num_produced != null) {
                data.last_block_num_produced = this.last_block_num_produced;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.last_block_num_produced != 0)
                writer.writeUint32(2, this.last_block_num_produced);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProducerToLastProduced {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProducerToLastProduced();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.last_block_num_produced = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProducerToLastProduced {
            return ProducerToLastProduced.deserialize(bytes);
        }
    }
    export class ProducerToLastImpliedIRB extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            last_block_num_produced?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("last_block_num_produced" in data && data.last_block_num_produced != undefined) {
                    this.last_block_num_produced = data.last_block_num_produced;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get last_block_num_produced() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set last_block_num_produced(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            last_block_num_produced?: number;
        }): ProducerToLastImpliedIRB {
            const message = new ProducerToLastImpliedIRB({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.last_block_num_produced != null) {
                message.last_block_num_produced = data.last_block_num_produced;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                last_block_num_produced?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.last_block_num_produced != null) {
                data.last_block_num_produced = this.last_block_num_produced;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.last_block_num_produced != 0)
                writer.writeUint32(2, this.last_block_num_produced);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProducerToLastImpliedIRB {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProducerToLastImpliedIRB();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.last_block_num_produced = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProducerToLastImpliedIRB {
            return ProducerToLastImpliedIRB.deserialize(bytes);
        }
    }
    export class TransactionReceipt extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            index?: string;
            status?: TransactionStatus;
            cpu_usage_micro_seconds?: number;
            net_usage_words?: number;
            packed_transaction?: PackedTransaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("cpu_usage_micro_seconds" in data && data.cpu_usage_micro_seconds != undefined) {
                    this.cpu_usage_micro_seconds = data.cpu_usage_micro_seconds;
                }
                if ("net_usage_words" in data && data.net_usage_words != undefined) {
                    this.net_usage_words = data.net_usage_words;
                }
                if ("packed_transaction" in data && data.packed_transaction != undefined) {
                    this.packed_transaction = data.packed_transaction;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 6, "0") as string;
        }
        set index(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, TransactionStatus.TRANSACTIONSTATUS_NONE) as TransactionStatus;
        }
        set status(value: TransactionStatus) {
            pb_1.Message.setField(this, 1, value);
        }
        get cpu_usage_micro_seconds() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set cpu_usage_micro_seconds(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get net_usage_words() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set net_usage_words(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get packed_transaction() {
            return pb_1.Message.getWrapperField(this, PackedTransaction, 5) as PackedTransaction;
        }
        set packed_transaction(value: PackedTransaction) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_packed_transaction() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            id?: string;
            index?: string;
            status?: TransactionStatus;
            cpu_usage_micro_seconds?: number;
            net_usage_words?: number;
            packed_transaction?: ReturnType<typeof PackedTransaction.prototype.toObject>;
        }): TransactionReceipt {
            const message = new TransactionReceipt({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.cpu_usage_micro_seconds != null) {
                message.cpu_usage_micro_seconds = data.cpu_usage_micro_seconds;
            }
            if (data.net_usage_words != null) {
                message.net_usage_words = data.net_usage_words;
            }
            if (data.packed_transaction != null) {
                message.packed_transaction = PackedTransaction.fromObject(data.packed_transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                index?: string;
                status?: TransactionStatus;
                cpu_usage_micro_seconds?: number;
                net_usage_words?: number;
                packed_transaction?: ReturnType<typeof PackedTransaction.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.cpu_usage_micro_seconds != null) {
                data.cpu_usage_micro_seconds = this.cpu_usage_micro_seconds;
            }
            if (this.net_usage_words != null) {
                data.net_usage_words = this.net_usage_words;
            }
            if (this.packed_transaction != null) {
                data.packed_transaction = this.packed_transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(4, this.id);
            if (this.index != "0")
                writer.writeUint64String(6, this.index);
            if (this.status != TransactionStatus.TRANSACTIONSTATUS_NONE)
                writer.writeEnum(1, this.status);
            if (this.cpu_usage_micro_seconds != 0)
                writer.writeUint32(2, this.cpu_usage_micro_seconds);
            if (this.net_usage_words != 0)
                writer.writeUint32(3, this.net_usage_words);
            if (this.has_packed_transaction)
                writer.writeMessage(5, this.packed_transaction, () => this.packed_transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionReceipt {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionReceipt();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 4:
                        message.id = reader.readString();
                        break;
                    case 6:
                        message.index = reader.readUint64String();
                        break;
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        message.cpu_usage_micro_seconds = reader.readUint32();
                        break;
                    case 3:
                        message.net_usage_words = reader.readUint32();
                        break;
                    case 5:
                        reader.readMessage(message.packed_transaction, () => message.packed_transaction = PackedTransaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionReceipt {
            return TransactionReceipt.deserialize(bytes);
        }
    }
    export class PackedTransaction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signatures?: string[];
            compression?: number;
            packed_context_free_data?: Uint8Array;
            packed_transaction?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signatures" in data && data.signatures != undefined) {
                    this.signatures = data.signatures;
                }
                if ("compression" in data && data.compression != undefined) {
                    this.compression = data.compression;
                }
                if ("packed_context_free_data" in data && data.packed_context_free_data != undefined) {
                    this.packed_context_free_data = data.packed_context_free_data;
                }
                if ("packed_transaction" in data && data.packed_transaction != undefined) {
                    this.packed_transaction = data.packed_transaction;
                }
            }
        }
        get signatures() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set signatures(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get compression() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set compression(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get packed_context_free_data() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set packed_context_free_data(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get packed_transaction() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set packed_transaction(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            signatures?: string[];
            compression?: number;
            packed_context_free_data?: Uint8Array;
            packed_transaction?: Uint8Array;
        }): PackedTransaction {
            const message = new PackedTransaction({});
            if (data.signatures != null) {
                message.signatures = data.signatures;
            }
            if (data.compression != null) {
                message.compression = data.compression;
            }
            if (data.packed_context_free_data != null) {
                message.packed_context_free_data = data.packed_context_free_data;
            }
            if (data.packed_transaction != null) {
                message.packed_transaction = data.packed_transaction;
            }
            return message;
        }
        toObject() {
            const data: {
                signatures?: string[];
                compression?: number;
                packed_context_free_data?: Uint8Array;
                packed_transaction?: Uint8Array;
            } = {};
            if (this.signatures != null) {
                data.signatures = this.signatures;
            }
            if (this.compression != null) {
                data.compression = this.compression;
            }
            if (this.packed_context_free_data != null) {
                data.packed_context_free_data = this.packed_context_free_data;
            }
            if (this.packed_transaction != null) {
                data.packed_transaction = this.packed_transaction;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signatures.length)
                writer.writeRepeatedString(1, this.signatures);
            if (this.compression != 0)
                writer.writeUint32(2, this.compression);
            if (this.packed_context_free_data.length)
                writer.writeBytes(3, this.packed_context_free_data);
            if (this.packed_transaction.length)
                writer.writeBytes(4, this.packed_transaction);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PackedTransaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PackedTransaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.compression = reader.readUint32();
                        break;
                    case 3:
                        message.packed_context_free_data = reader.readBytes();
                        break;
                    case 4:
                        message.packed_transaction = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PackedTransaction {
            return PackedTransaction.deserialize(bytes);
        }
    }
    export class BlockHeader extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timestamp?: dependency_1.google.protobuf.Timestamp;
            producer?: string;
            confirmed?: number;
            previous?: string;
            transaction_mroot?: Uint8Array;
            action_mroot?: Uint8Array;
            schedule_version?: number;
            header_extensions?: Extension[];
            decoded_header_extensions?: BlockHeaderExtension[];
            new_producers_v1?: ProducerSchedule;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11, 12], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("producer" in data && data.producer != undefined) {
                    this.producer = data.producer;
                }
                if ("confirmed" in data && data.confirmed != undefined) {
                    this.confirmed = data.confirmed;
                }
                if ("previous" in data && data.previous != undefined) {
                    this.previous = data.previous;
                }
                if ("transaction_mroot" in data && data.transaction_mroot != undefined) {
                    this.transaction_mroot = data.transaction_mroot;
                }
                if ("action_mroot" in data && data.action_mroot != undefined) {
                    this.action_mroot = data.action_mroot;
                }
                if ("schedule_version" in data && data.schedule_version != undefined) {
                    this.schedule_version = data.schedule_version;
                }
                if ("header_extensions" in data && data.header_extensions != undefined) {
                    this.header_extensions = data.header_extensions;
                }
                if ("decoded_header_extensions" in data && data.decoded_header_extensions != undefined) {
                    this.decoded_header_extensions = data.decoded_header_extensions;
                }
                if ("new_producers_v1" in data && data.new_producers_v1 != undefined) {
                    this.new_producers_v1 = data.new_producers_v1;
                }
            }
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
        }
        set timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get producer() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set producer(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get confirmed() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set confirmed(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get previous() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set previous(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get transaction_mroot() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set transaction_mroot(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        get action_mroot() {
            return pb_1.Message.getFieldWithDefault(this, 8, new Uint8Array(0)) as Uint8Array;
        }
        set action_mroot(value: Uint8Array) {
            pb_1.Message.setField(this, 8, value);
        }
        get schedule_version() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set schedule_version(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get header_extensions() {
            return pb_1.Message.getRepeatedWrapperField(this, Extension, 11) as Extension[];
        }
        set header_extensions(value: Extension[]) {
            pb_1.Message.setRepeatedWrapperField(this, 11, value);
        }
        get decoded_header_extensions() {
            return pb_1.Message.getRepeatedWrapperField(this, BlockHeaderExtension, 12) as BlockHeaderExtension[];
        }
        set decoded_header_extensions(value: BlockHeaderExtension[]) {
            pb_1.Message.setRepeatedWrapperField(this, 12, value);
        }
        get new_producers_v1() {
            return pb_1.Message.getWrapperField(this, ProducerSchedule, 10) as ProducerSchedule;
        }
        set new_producers_v1(value: ProducerSchedule) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_new_producers_v1() {
            return pb_1.Message.getField(this, 10) != null;
        }
        static fromObject(data: {
            timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            producer?: string;
            confirmed?: number;
            previous?: string;
            transaction_mroot?: Uint8Array;
            action_mroot?: Uint8Array;
            schedule_version?: number;
            header_extensions?: ReturnType<typeof Extension.prototype.toObject>[];
            decoded_header_extensions?: ReturnType<typeof BlockHeaderExtension.prototype.toObject>[];
            new_producers_v1?: ReturnType<typeof ProducerSchedule.prototype.toObject>;
        }): BlockHeader {
            const message = new BlockHeader({});
            if (data.timestamp != null) {
                message.timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            if (data.producer != null) {
                message.producer = data.producer;
            }
            if (data.confirmed != null) {
                message.confirmed = data.confirmed;
            }
            if (data.previous != null) {
                message.previous = data.previous;
            }
            if (data.transaction_mroot != null) {
                message.transaction_mroot = data.transaction_mroot;
            }
            if (data.action_mroot != null) {
                message.action_mroot = data.action_mroot;
            }
            if (data.schedule_version != null) {
                message.schedule_version = data.schedule_version;
            }
            if (data.header_extensions != null) {
                message.header_extensions = data.header_extensions.map(item => Extension.fromObject(item));
            }
            if (data.decoded_header_extensions != null) {
                message.decoded_header_extensions = data.decoded_header_extensions.map(item => BlockHeaderExtension.fromObject(item));
            }
            if (data.new_producers_v1 != null) {
                message.new_producers_v1 = ProducerSchedule.fromObject(data.new_producers_v1);
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                producer?: string;
                confirmed?: number;
                previous?: string;
                transaction_mroot?: Uint8Array;
                action_mroot?: Uint8Array;
                schedule_version?: number;
                header_extensions?: ReturnType<typeof Extension.prototype.toObject>[];
                decoded_header_extensions?: ReturnType<typeof BlockHeaderExtension.prototype.toObject>[];
                new_producers_v1?: ReturnType<typeof ProducerSchedule.prototype.toObject>;
            } = {};
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            if (this.producer != null) {
                data.producer = this.producer;
            }
            if (this.confirmed != null) {
                data.confirmed = this.confirmed;
            }
            if (this.previous != null) {
                data.previous = this.previous;
            }
            if (this.transaction_mroot != null) {
                data.transaction_mroot = this.transaction_mroot;
            }
            if (this.action_mroot != null) {
                data.action_mroot = this.action_mroot;
            }
            if (this.schedule_version != null) {
                data.schedule_version = this.schedule_version;
            }
            if (this.header_extensions != null) {
                data.header_extensions = this.header_extensions.map((item: Extension) => item.toObject());
            }
            if (this.decoded_header_extensions != null) {
                data.decoded_header_extensions = this.decoded_header_extensions.map((item: BlockHeaderExtension) => item.toObject());
            }
            if (this.new_producers_v1 != null) {
                data.new_producers_v1 = this.new_producers_v1.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_timestamp)
                writer.writeMessage(3, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.producer.length)
                writer.writeString(4, this.producer);
            if (this.confirmed != 0)
                writer.writeUint32(5, this.confirmed);
            if (this.previous.length)
                writer.writeString(6, this.previous);
            if (this.transaction_mroot.length)
                writer.writeBytes(7, this.transaction_mroot);
            if (this.action_mroot.length)
                writer.writeBytes(8, this.action_mroot);
            if (this.schedule_version != 0)
                writer.writeUint32(9, this.schedule_version);
            if (this.header_extensions.length)
                writer.writeRepeatedMessage(11, this.header_extensions, (item: Extension) => item.serialize(writer));
            if (this.decoded_header_extensions.length)
                writer.writeRepeatedMessage(12, this.decoded_header_extensions, (item: BlockHeaderExtension) => item.serialize(writer));
            if (this.has_new_producers_v1)
                writer.writeMessage(10, this.new_producers_v1, () => this.new_producers_v1.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockHeader {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockHeader();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        message.producer = reader.readString();
                        break;
                    case 5:
                        message.confirmed = reader.readUint32();
                        break;
                    case 6:
                        message.previous = reader.readString();
                        break;
                    case 7:
                        message.transaction_mroot = reader.readBytes();
                        break;
                    case 8:
                        message.action_mroot = reader.readBytes();
                        break;
                    case 9:
                        message.schedule_version = reader.readUint32();
                        break;
                    case 11:
                        reader.readMessage(message.header_extensions, () => pb_1.Message.addToRepeatedWrapperField(message, 11, Extension.deserialize(reader), Extension));
                        break;
                    case 12:
                        reader.readMessage(message.decoded_header_extensions, () => pb_1.Message.addToRepeatedWrapperField(message, 12, BlockHeaderExtension.deserialize(reader), BlockHeaderExtension));
                        break;
                    case 10:
                        reader.readMessage(message.new_producers_v1, () => message.new_producers_v1 = ProducerSchedule.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockHeader {
            return BlockHeader.deserialize(bytes);
        }
    }
    export class BlockHeaderExtension extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            protocol_feature_activation_extension?: ProtocolFeatureActivationExtension;
            producer_schedule_change_extension?: never;
        } | {
            protocol_feature_activation_extension?: never;
            producer_schedule_change_extension?: ProducerScheduleChangeExtension;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("protocol_feature_activation_extension" in data && data.protocol_feature_activation_extension != undefined) {
                    this.protocol_feature_activation_extension = data.protocol_feature_activation_extension;
                }
                if ("producer_schedule_change_extension" in data && data.producer_schedule_change_extension != undefined) {
                    this.producer_schedule_change_extension = data.producer_schedule_change_extension;
                }
            }
        }
        get protocol_feature_activation_extension() {
            return pb_1.Message.getWrapperField(this, ProtocolFeatureActivationExtension, 1) as ProtocolFeatureActivationExtension;
        }
        set protocol_feature_activation_extension(value: ProtocolFeatureActivationExtension) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_protocol_feature_activation_extension() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get producer_schedule_change_extension() {
            return pb_1.Message.getWrapperField(this, ProducerScheduleChangeExtension, 2) as ProducerScheduleChangeExtension;
        }
        set producer_schedule_change_extension(value: ProducerScheduleChangeExtension) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_producer_schedule_change_extension() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get extension() {
            const cases: {
                [index: number]: "none" | "protocol_feature_activation_extension" | "producer_schedule_change_extension";
            } = {
                0: "none",
                1: "protocol_feature_activation_extension",
                2: "producer_schedule_change_extension"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            protocol_feature_activation_extension?: ReturnType<typeof ProtocolFeatureActivationExtension.prototype.toObject>;
            producer_schedule_change_extension?: ReturnType<typeof ProducerScheduleChangeExtension.prototype.toObject>;
        }): BlockHeaderExtension {
            const message = new BlockHeaderExtension({});
            if (data.protocol_feature_activation_extension != null) {
                message.protocol_feature_activation_extension = ProtocolFeatureActivationExtension.fromObject(data.protocol_feature_activation_extension);
            }
            if (data.producer_schedule_change_extension != null) {
                message.producer_schedule_change_extension = ProducerScheduleChangeExtension.fromObject(data.producer_schedule_change_extension);
            }
            return message;
        }
        toObject() {
            const data: {
                protocol_feature_activation_extension?: ReturnType<typeof ProtocolFeatureActivationExtension.prototype.toObject>;
                producer_schedule_change_extension?: ReturnType<typeof ProducerScheduleChangeExtension.prototype.toObject>;
            } = {};
            if (this.protocol_feature_activation_extension != null) {
                data.protocol_feature_activation_extension = this.protocol_feature_activation_extension.toObject();
            }
            if (this.producer_schedule_change_extension != null) {
                data.producer_schedule_change_extension = this.producer_schedule_change_extension.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_protocol_feature_activation_extension)
                writer.writeMessage(1, this.protocol_feature_activation_extension, () => this.protocol_feature_activation_extension.serialize(writer));
            if (this.has_producer_schedule_change_extension)
                writer.writeMessage(2, this.producer_schedule_change_extension, () => this.producer_schedule_change_extension.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockHeaderExtension {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockHeaderExtension();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.protocol_feature_activation_extension, () => message.protocol_feature_activation_extension = ProtocolFeatureActivationExtension.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.producer_schedule_change_extension, () => message.producer_schedule_change_extension = ProducerScheduleChangeExtension.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockHeaderExtension {
            return BlockHeaderExtension.deserialize(bytes);
        }
    }
    export class ProtocolFeatureActivationExtension extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            protocol_features?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("protocol_features" in data && data.protocol_features != undefined) {
                    this.protocol_features = data.protocol_features;
                }
            }
        }
        get protocol_features() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set protocol_features(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            protocol_features?: Uint8Array[];
        }): ProtocolFeatureActivationExtension {
            const message = new ProtocolFeatureActivationExtension({});
            if (data.protocol_features != null) {
                message.protocol_features = data.protocol_features;
            }
            return message;
        }
        toObject() {
            const data: {
                protocol_features?: Uint8Array[];
            } = {};
            if (this.protocol_features != null) {
                data.protocol_features = this.protocol_features;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.protocol_features.length)
                writer.writeRepeatedBytes(1, this.protocol_features);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtocolFeatureActivationExtension {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtocolFeatureActivationExtension();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtocolFeatureActivationExtension {
            return ProtocolFeatureActivationExtension.deserialize(bytes);
        }
    }
    export class ProducerScheduleChangeExtension extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            producer_schedule?: ProducerAuthoritySchedule;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("producer_schedule" in data && data.producer_schedule != undefined) {
                    this.producer_schedule = data.producer_schedule;
                }
            }
        }
        get producer_schedule() {
            return pb_1.Message.getWrapperField(this, ProducerAuthoritySchedule, 1) as ProducerAuthoritySchedule;
        }
        set producer_schedule(value: ProducerAuthoritySchedule) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_producer_schedule() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            producer_schedule?: ReturnType<typeof ProducerAuthoritySchedule.prototype.toObject>;
        }): ProducerScheduleChangeExtension {
            const message = new ProducerScheduleChangeExtension({});
            if (data.producer_schedule != null) {
                message.producer_schedule = ProducerAuthoritySchedule.fromObject(data.producer_schedule);
            }
            return message;
        }
        toObject() {
            const data: {
                producer_schedule?: ReturnType<typeof ProducerAuthoritySchedule.prototype.toObject>;
            } = {};
            if (this.producer_schedule != null) {
                data.producer_schedule = this.producer_schedule.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_producer_schedule)
                writer.writeMessage(1, this.producer_schedule, () => this.producer_schedule.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProducerScheduleChangeExtension {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProducerScheduleChangeExtension();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.producer_schedule, () => message.producer_schedule = ProducerAuthoritySchedule.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProducerScheduleChangeExtension {
            return ProducerScheduleChangeExtension.deserialize(bytes);
        }
    }
    export class TransactionEvent extends pb_1.Message {
        #one_of_decls: number[][] = [[5, 6, 7, 8, 9]];
        constructor(data?: any[] | ({
            id?: string;
            block_id?: string;
            block_num?: number;
            irreversible?: boolean;
        } & (({
            internal_addition?: TransactionEvent.AddedInternally;
            addition?: never;
            execution?: never;
            dtrx_scheduling?: never;
            dtrx_cancellation?: never;
        } | {
            internal_addition?: never;
            addition?: TransactionEvent.Added;
            execution?: never;
            dtrx_scheduling?: never;
            dtrx_cancellation?: never;
        } | {
            internal_addition?: never;
            addition?: never;
            execution?: TransactionEvent.Executed;
            dtrx_scheduling?: never;
            dtrx_cancellation?: never;
        } | {
            internal_addition?: never;
            addition?: never;
            execution?: never;
            dtrx_scheduling?: TransactionEvent.DtrxScheduled;
            dtrx_cancellation?: never;
        } | {
            internal_addition?: never;
            addition?: never;
            execution?: never;
            dtrx_scheduling?: never;
            dtrx_cancellation?: TransactionEvent.DtrxCanceled;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("block_num" in data && data.block_num != undefined) {
                    this.block_num = data.block_num;
                }
                if ("irreversible" in data && data.irreversible != undefined) {
                    this.irreversible = data.irreversible;
                }
                if ("internal_addition" in data && data.internal_addition != undefined) {
                    this.internal_addition = data.internal_addition;
                }
                if ("addition" in data && data.addition != undefined) {
                    this.addition = data.addition;
                }
                if ("execution" in data && data.execution != undefined) {
                    this.execution = data.execution;
                }
                if ("dtrx_scheduling" in data && data.dtrx_scheduling != undefined) {
                    this.dtrx_scheduling = data.dtrx_scheduling;
                }
                if ("dtrx_cancellation" in data && data.dtrx_cancellation != undefined) {
                    this.dtrx_cancellation = data.dtrx_cancellation;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get block_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set block_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get block_num() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set block_num(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get irreversible() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set irreversible(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get internal_addition() {
            return pb_1.Message.getWrapperField(this, TransactionEvent.AddedInternally, 5) as TransactionEvent.AddedInternally;
        }
        set internal_addition(value: TransactionEvent.AddedInternally) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_internal_addition() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get addition() {
            return pb_1.Message.getWrapperField(this, TransactionEvent.Added, 6) as TransactionEvent.Added;
        }
        set addition(value: TransactionEvent.Added) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_addition() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get execution() {
            return pb_1.Message.getWrapperField(this, TransactionEvent.Executed, 7) as TransactionEvent.Executed;
        }
        set execution(value: TransactionEvent.Executed) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_execution() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get dtrx_scheduling() {
            return pb_1.Message.getWrapperField(this, TransactionEvent.DtrxScheduled, 8) as TransactionEvent.DtrxScheduled;
        }
        set dtrx_scheduling(value: TransactionEvent.DtrxScheduled) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_dtrx_scheduling() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get dtrx_cancellation() {
            return pb_1.Message.getWrapperField(this, TransactionEvent.DtrxCanceled, 9) as TransactionEvent.DtrxCanceled;
        }
        set dtrx_cancellation(value: TransactionEvent.DtrxCanceled) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_dtrx_cancellation() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get event() {
            const cases: {
                [index: number]: "none" | "internal_addition" | "addition" | "execution" | "dtrx_scheduling" | "dtrx_cancellation";
            } = {
                0: "none",
                5: "internal_addition",
                6: "addition",
                7: "execution",
                8: "dtrx_scheduling",
                9: "dtrx_cancellation"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5, 6, 7, 8, 9])];
        }
        static fromObject(data: {
            id?: string;
            block_id?: string;
            block_num?: number;
            irreversible?: boolean;
            internal_addition?: ReturnType<typeof TransactionEvent.AddedInternally.prototype.toObject>;
            addition?: ReturnType<typeof TransactionEvent.Added.prototype.toObject>;
            execution?: ReturnType<typeof TransactionEvent.Executed.prototype.toObject>;
            dtrx_scheduling?: ReturnType<typeof TransactionEvent.DtrxScheduled.prototype.toObject>;
            dtrx_cancellation?: ReturnType<typeof TransactionEvent.DtrxCanceled.prototype.toObject>;
        }): TransactionEvent {
            const message = new TransactionEvent({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            if (data.block_num != null) {
                message.block_num = data.block_num;
            }
            if (data.irreversible != null) {
                message.irreversible = data.irreversible;
            }
            if (data.internal_addition != null) {
                message.internal_addition = TransactionEvent.AddedInternally.fromObject(data.internal_addition);
            }
            if (data.addition != null) {
                message.addition = TransactionEvent.Added.fromObject(data.addition);
            }
            if (data.execution != null) {
                message.execution = TransactionEvent.Executed.fromObject(data.execution);
            }
            if (data.dtrx_scheduling != null) {
                message.dtrx_scheduling = TransactionEvent.DtrxScheduled.fromObject(data.dtrx_scheduling);
            }
            if (data.dtrx_cancellation != null) {
                message.dtrx_cancellation = TransactionEvent.DtrxCanceled.fromObject(data.dtrx_cancellation);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                block_id?: string;
                block_num?: number;
                irreversible?: boolean;
                internal_addition?: ReturnType<typeof TransactionEvent.AddedInternally.prototype.toObject>;
                addition?: ReturnType<typeof TransactionEvent.Added.prototype.toObject>;
                execution?: ReturnType<typeof TransactionEvent.Executed.prototype.toObject>;
                dtrx_scheduling?: ReturnType<typeof TransactionEvent.DtrxScheduled.prototype.toObject>;
                dtrx_cancellation?: ReturnType<typeof TransactionEvent.DtrxCanceled.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            if (this.block_num != null) {
                data.block_num = this.block_num;
            }
            if (this.irreversible != null) {
                data.irreversible = this.irreversible;
            }
            if (this.internal_addition != null) {
                data.internal_addition = this.internal_addition.toObject();
            }
            if (this.addition != null) {
                data.addition = this.addition.toObject();
            }
            if (this.execution != null) {
                data.execution = this.execution.toObject();
            }
            if (this.dtrx_scheduling != null) {
                data.dtrx_scheduling = this.dtrx_scheduling.toObject();
            }
            if (this.dtrx_cancellation != null) {
                data.dtrx_cancellation = this.dtrx_cancellation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.block_id.length)
                writer.writeString(2, this.block_id);
            if (this.block_num != 0)
                writer.writeUint32(3, this.block_num);
            if (this.irreversible != false)
                writer.writeBool(4, this.irreversible);
            if (this.has_internal_addition)
                writer.writeMessage(5, this.internal_addition, () => this.internal_addition.serialize(writer));
            if (this.has_addition)
                writer.writeMessage(6, this.addition, () => this.addition.serialize(writer));
            if (this.has_execution)
                writer.writeMessage(7, this.execution, () => this.execution.serialize(writer));
            if (this.has_dtrx_scheduling)
                writer.writeMessage(8, this.dtrx_scheduling, () => this.dtrx_scheduling.serialize(writer));
            if (this.has_dtrx_cancellation)
                writer.writeMessage(9, this.dtrx_cancellation, () => this.dtrx_cancellation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.block_id = reader.readString();
                        break;
                    case 3:
                        message.block_num = reader.readUint32();
                        break;
                    case 4:
                        message.irreversible = reader.readBool();
                        break;
                    case 5:
                        reader.readMessage(message.internal_addition, () => message.internal_addition = TransactionEvent.AddedInternally.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.addition, () => message.addition = TransactionEvent.Added.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.execution, () => message.execution = TransactionEvent.Executed.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.dtrx_scheduling, () => message.dtrx_scheduling = TransactionEvent.DtrxScheduled.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.dtrx_cancellation, () => message.dtrx_cancellation = TransactionEvent.DtrxCanceled.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionEvent {
            return TransactionEvent.deserialize(bytes);
        }
    }
    export namespace TransactionEvent {
        export class AddedInternally extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                transaction?: SignedTransaction;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("transaction" in data && data.transaction != undefined) {
                        this.transaction = data.transaction;
                    }
                }
            }
            get transaction() {
                return pb_1.Message.getWrapperField(this, SignedTransaction, 1) as SignedTransaction;
            }
            set transaction(value: SignedTransaction) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_transaction() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                transaction?: ReturnType<typeof SignedTransaction.prototype.toObject>;
            }): AddedInternally {
                const message = new AddedInternally({});
                if (data.transaction != null) {
                    message.transaction = SignedTransaction.fromObject(data.transaction);
                }
                return message;
            }
            toObject() {
                const data: {
                    transaction?: ReturnType<typeof SignedTransaction.prototype.toObject>;
                } = {};
                if (this.transaction != null) {
                    data.transaction = this.transaction.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_transaction)
                    writer.writeMessage(1, this.transaction, () => this.transaction.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddedInternally {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddedInternally();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.transaction, () => message.transaction = SignedTransaction.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): AddedInternally {
                return AddedInternally.deserialize(bytes);
            }
        }
        export class Added extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                receipt?: TransactionReceipt;
                transaction?: SignedTransaction;
                public_keys?: PublicKeys;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("receipt" in data && data.receipt != undefined) {
                        this.receipt = data.receipt;
                    }
                    if ("transaction" in data && data.transaction != undefined) {
                        this.transaction = data.transaction;
                    }
                    if ("public_keys" in data && data.public_keys != undefined) {
                        this.public_keys = data.public_keys;
                    }
                }
            }
            get receipt() {
                return pb_1.Message.getWrapperField(this, TransactionReceipt, 1) as TransactionReceipt;
            }
            set receipt(value: TransactionReceipt) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_receipt() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get transaction() {
                return pb_1.Message.getWrapperField(this, SignedTransaction, 2) as SignedTransaction;
            }
            set transaction(value: SignedTransaction) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_transaction() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get public_keys() {
                return pb_1.Message.getWrapperField(this, PublicKeys, 3) as PublicKeys;
            }
            set public_keys(value: PublicKeys) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_public_keys() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                receipt?: ReturnType<typeof TransactionReceipt.prototype.toObject>;
                transaction?: ReturnType<typeof SignedTransaction.prototype.toObject>;
                public_keys?: ReturnType<typeof PublicKeys.prototype.toObject>;
            }): Added {
                const message = new Added({});
                if (data.receipt != null) {
                    message.receipt = TransactionReceipt.fromObject(data.receipt);
                }
                if (data.transaction != null) {
                    message.transaction = SignedTransaction.fromObject(data.transaction);
                }
                if (data.public_keys != null) {
                    message.public_keys = PublicKeys.fromObject(data.public_keys);
                }
                return message;
            }
            toObject() {
                const data: {
                    receipt?: ReturnType<typeof TransactionReceipt.prototype.toObject>;
                    transaction?: ReturnType<typeof SignedTransaction.prototype.toObject>;
                    public_keys?: ReturnType<typeof PublicKeys.prototype.toObject>;
                } = {};
                if (this.receipt != null) {
                    data.receipt = this.receipt.toObject();
                }
                if (this.transaction != null) {
                    data.transaction = this.transaction.toObject();
                }
                if (this.public_keys != null) {
                    data.public_keys = this.public_keys.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_receipt)
                    writer.writeMessage(1, this.receipt, () => this.receipt.serialize(writer));
                if (this.has_transaction)
                    writer.writeMessage(2, this.transaction, () => this.transaction.serialize(writer));
                if (this.has_public_keys)
                    writer.writeMessage(3, this.public_keys, () => this.public_keys.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Added {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Added();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.receipt, () => message.receipt = TransactionReceipt.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.transaction, () => message.transaction = SignedTransaction.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.public_keys, () => message.public_keys = PublicKeys.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Added {
                return Added.deserialize(bytes);
            }
        }
        export class Executed extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                trace?: TransactionTrace;
                blockHeader?: BlockHeader;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("trace" in data && data.trace != undefined) {
                        this.trace = data.trace;
                    }
                    if ("blockHeader" in data && data.blockHeader != undefined) {
                        this.blockHeader = data.blockHeader;
                    }
                }
            }
            get trace() {
                return pb_1.Message.getWrapperField(this, TransactionTrace, 1) as TransactionTrace;
            }
            set trace(value: TransactionTrace) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_trace() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get blockHeader() {
                return pb_1.Message.getWrapperField(this, BlockHeader, 2) as BlockHeader;
            }
            set blockHeader(value: BlockHeader) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_blockHeader() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                trace?: ReturnType<typeof TransactionTrace.prototype.toObject>;
                blockHeader?: ReturnType<typeof BlockHeader.prototype.toObject>;
            }): Executed {
                const message = new Executed({});
                if (data.trace != null) {
                    message.trace = TransactionTrace.fromObject(data.trace);
                }
                if (data.blockHeader != null) {
                    message.blockHeader = BlockHeader.fromObject(data.blockHeader);
                }
                return message;
            }
            toObject() {
                const data: {
                    trace?: ReturnType<typeof TransactionTrace.prototype.toObject>;
                    blockHeader?: ReturnType<typeof BlockHeader.prototype.toObject>;
                } = {};
                if (this.trace != null) {
                    data.trace = this.trace.toObject();
                }
                if (this.blockHeader != null) {
                    data.blockHeader = this.blockHeader.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_trace)
                    writer.writeMessage(1, this.trace, () => this.trace.serialize(writer));
                if (this.has_blockHeader)
                    writer.writeMessage(2, this.blockHeader, () => this.blockHeader.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Executed {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Executed();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.trace, () => message.trace = TransactionTrace.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.blockHeader, () => message.blockHeader = BlockHeader.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Executed {
                return Executed.deserialize(bytes);
            }
        }
        export class DtrxScheduled extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                created_by?: ExtDTrxOp;
                transaction?: SignedTransaction;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("created_by" in data && data.created_by != undefined) {
                        this.created_by = data.created_by;
                    }
                    if ("transaction" in data && data.transaction != undefined) {
                        this.transaction = data.transaction;
                    }
                }
            }
            get created_by() {
                return pb_1.Message.getWrapperField(this, ExtDTrxOp, 1) as ExtDTrxOp;
            }
            set created_by(value: ExtDTrxOp) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_created_by() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get transaction() {
                return pb_1.Message.getWrapperField(this, SignedTransaction, 2) as SignedTransaction;
            }
            set transaction(value: SignedTransaction) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_transaction() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                created_by?: ReturnType<typeof ExtDTrxOp.prototype.toObject>;
                transaction?: ReturnType<typeof SignedTransaction.prototype.toObject>;
            }): DtrxScheduled {
                const message = new DtrxScheduled({});
                if (data.created_by != null) {
                    message.created_by = ExtDTrxOp.fromObject(data.created_by);
                }
                if (data.transaction != null) {
                    message.transaction = SignedTransaction.fromObject(data.transaction);
                }
                return message;
            }
            toObject() {
                const data: {
                    created_by?: ReturnType<typeof ExtDTrxOp.prototype.toObject>;
                    transaction?: ReturnType<typeof SignedTransaction.prototype.toObject>;
                } = {};
                if (this.created_by != null) {
                    data.created_by = this.created_by.toObject();
                }
                if (this.transaction != null) {
                    data.transaction = this.transaction.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_created_by)
                    writer.writeMessage(1, this.created_by, () => this.created_by.serialize(writer));
                if (this.has_transaction)
                    writer.writeMessage(2, this.transaction, () => this.transaction.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DtrxScheduled {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DtrxScheduled();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.created_by, () => message.created_by = ExtDTrxOp.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.transaction, () => message.transaction = SignedTransaction.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): DtrxScheduled {
                return DtrxScheduled.deserialize(bytes);
            }
        }
        export class DtrxCanceled extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                canceled_by?: ExtDTrxOp;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("canceled_by" in data && data.canceled_by != undefined) {
                        this.canceled_by = data.canceled_by;
                    }
                }
            }
            get canceled_by() {
                return pb_1.Message.getWrapperField(this, ExtDTrxOp, 1) as ExtDTrxOp;
            }
            set canceled_by(value: ExtDTrxOp) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_canceled_by() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                canceled_by?: ReturnType<typeof ExtDTrxOp.prototype.toObject>;
            }): DtrxCanceled {
                const message = new DtrxCanceled({});
                if (data.canceled_by != null) {
                    message.canceled_by = ExtDTrxOp.fromObject(data.canceled_by);
                }
                return message;
            }
            toObject() {
                const data: {
                    canceled_by?: ReturnType<typeof ExtDTrxOp.prototype.toObject>;
                } = {};
                if (this.canceled_by != null) {
                    data.canceled_by = this.canceled_by.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_canceled_by)
                    writer.writeMessage(1, this.canceled_by, () => this.canceled_by.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DtrxCanceled {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DtrxCanceled();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.canceled_by, () => message.canceled_by = ExtDTrxOp.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): DtrxCanceled {
                return DtrxCanceled.deserialize(bytes);
            }
        }
    }
    export class PublicKeys extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            public_keys?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("public_keys" in data && data.public_keys != undefined) {
                    this.public_keys = data.public_keys;
                }
            }
        }
        get public_keys() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set public_keys(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            public_keys?: string[];
        }): PublicKeys {
            const message = new PublicKeys({});
            if (data.public_keys != null) {
                message.public_keys = data.public_keys;
            }
            return message;
        }
        toObject() {
            const data: {
                public_keys?: string[];
            } = {};
            if (this.public_keys != null) {
                data.public_keys = this.public_keys;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.public_keys.length)
                writer.writeRepeatedString(1, this.public_keys);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PublicKeys {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublicKeys();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PublicKeys {
            return PublicKeys.deserialize(bytes);
        }
    }
    export class TransactionLifecycle extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            transaction_status?: TransactionStatus;
            transaction_receipt?: TransactionReceipt;
            transaction?: SignedTransaction;
            public_keys?: string[];
            execution_trace?: TransactionTrace;
            execution_block_header?: BlockHeader;
            created_by?: ExtDTrxOp;
            canceled_by?: ExtDTrxOp;
            creation_irreversible?: boolean;
            execution_irreversible?: boolean;
            cancelation_irreversible?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [19], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("transaction_status" in data && data.transaction_status != undefined) {
                    this.transaction_status = data.transaction_status;
                }
                if ("transaction_receipt" in data && data.transaction_receipt != undefined) {
                    this.transaction_receipt = data.transaction_receipt;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
                if ("public_keys" in data && data.public_keys != undefined) {
                    this.public_keys = data.public_keys;
                }
                if ("execution_trace" in data && data.execution_trace != undefined) {
                    this.execution_trace = data.execution_trace;
                }
                if ("execution_block_header" in data && data.execution_block_header != undefined) {
                    this.execution_block_header = data.execution_block_header;
                }
                if ("created_by" in data && data.created_by != undefined) {
                    this.created_by = data.created_by;
                }
                if ("canceled_by" in data && data.canceled_by != undefined) {
                    this.canceled_by = data.canceled_by;
                }
                if ("creation_irreversible" in data && data.creation_irreversible != undefined) {
                    this.creation_irreversible = data.creation_irreversible;
                }
                if ("execution_irreversible" in data && data.execution_irreversible != undefined) {
                    this.execution_irreversible = data.execution_irreversible;
                }
                if ("cancelation_irreversible" in data && data.cancelation_irreversible != undefined) {
                    this.cancelation_irreversible = data.cancelation_irreversible;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get transaction_status() {
            return pb_1.Message.getFieldWithDefault(this, 2, TransactionStatus.TRANSACTIONSTATUS_NONE) as TransactionStatus;
        }
        set transaction_status(value: TransactionStatus) {
            pb_1.Message.setField(this, 2, value);
        }
        get transaction_receipt() {
            return pb_1.Message.getWrapperField(this, TransactionReceipt, 36) as TransactionReceipt;
        }
        set transaction_receipt(value: TransactionReceipt) {
            pb_1.Message.setWrapperField(this, 36, value);
        }
        get has_transaction_receipt() {
            return pb_1.Message.getField(this, 36) != null;
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, SignedTransaction, 10) as SignedTransaction;
        }
        set transaction(value: SignedTransaction) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get public_keys() {
            return pb_1.Message.getFieldWithDefault(this, 19, []) as string[];
        }
        set public_keys(value: string[]) {
            pb_1.Message.setField(this, 19, value);
        }
        get execution_trace() {
            return pb_1.Message.getWrapperField(this, TransactionTrace, 11) as TransactionTrace;
        }
        set execution_trace(value: TransactionTrace) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_execution_trace() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get execution_block_header() {
            return pb_1.Message.getWrapperField(this, BlockHeader, 12) as BlockHeader;
        }
        set execution_block_header(value: BlockHeader) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_execution_block_header() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get created_by() {
            return pb_1.Message.getWrapperField(this, ExtDTrxOp, 20) as ExtDTrxOp;
        }
        set created_by(value: ExtDTrxOp) {
            pb_1.Message.setWrapperField(this, 20, value);
        }
        get has_created_by() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get canceled_by() {
            return pb_1.Message.getWrapperField(this, ExtDTrxOp, 21) as ExtDTrxOp;
        }
        set canceled_by(value: ExtDTrxOp) {
            pb_1.Message.setWrapperField(this, 21, value);
        }
        get has_canceled_by() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get creation_irreversible() {
            return pb_1.Message.getFieldWithDefault(this, 33, false) as boolean;
        }
        set creation_irreversible(value: boolean) {
            pb_1.Message.setField(this, 33, value);
        }
        get execution_irreversible() {
            return pb_1.Message.getFieldWithDefault(this, 34, false) as boolean;
        }
        set execution_irreversible(value: boolean) {
            pb_1.Message.setField(this, 34, value);
        }
        get cancelation_irreversible() {
            return pb_1.Message.getFieldWithDefault(this, 35, false) as boolean;
        }
        set cancelation_irreversible(value: boolean) {
            pb_1.Message.setField(this, 35, value);
        }
        static fromObject(data: {
            id?: string;
            transaction_status?: TransactionStatus;
            transaction_receipt?: ReturnType<typeof TransactionReceipt.prototype.toObject>;
            transaction?: ReturnType<typeof SignedTransaction.prototype.toObject>;
            public_keys?: string[];
            execution_trace?: ReturnType<typeof TransactionTrace.prototype.toObject>;
            execution_block_header?: ReturnType<typeof BlockHeader.prototype.toObject>;
            created_by?: ReturnType<typeof ExtDTrxOp.prototype.toObject>;
            canceled_by?: ReturnType<typeof ExtDTrxOp.prototype.toObject>;
            creation_irreversible?: boolean;
            execution_irreversible?: boolean;
            cancelation_irreversible?: boolean;
        }): TransactionLifecycle {
            const message = new TransactionLifecycle({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.transaction_status != null) {
                message.transaction_status = data.transaction_status;
            }
            if (data.transaction_receipt != null) {
                message.transaction_receipt = TransactionReceipt.fromObject(data.transaction_receipt);
            }
            if (data.transaction != null) {
                message.transaction = SignedTransaction.fromObject(data.transaction);
            }
            if (data.public_keys != null) {
                message.public_keys = data.public_keys;
            }
            if (data.execution_trace != null) {
                message.execution_trace = TransactionTrace.fromObject(data.execution_trace);
            }
            if (data.execution_block_header != null) {
                message.execution_block_header = BlockHeader.fromObject(data.execution_block_header);
            }
            if (data.created_by != null) {
                message.created_by = ExtDTrxOp.fromObject(data.created_by);
            }
            if (data.canceled_by != null) {
                message.canceled_by = ExtDTrxOp.fromObject(data.canceled_by);
            }
            if (data.creation_irreversible != null) {
                message.creation_irreversible = data.creation_irreversible;
            }
            if (data.execution_irreversible != null) {
                message.execution_irreversible = data.execution_irreversible;
            }
            if (data.cancelation_irreversible != null) {
                message.cancelation_irreversible = data.cancelation_irreversible;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                transaction_status?: TransactionStatus;
                transaction_receipt?: ReturnType<typeof TransactionReceipt.prototype.toObject>;
                transaction?: ReturnType<typeof SignedTransaction.prototype.toObject>;
                public_keys?: string[];
                execution_trace?: ReturnType<typeof TransactionTrace.prototype.toObject>;
                execution_block_header?: ReturnType<typeof BlockHeader.prototype.toObject>;
                created_by?: ReturnType<typeof ExtDTrxOp.prototype.toObject>;
                canceled_by?: ReturnType<typeof ExtDTrxOp.prototype.toObject>;
                creation_irreversible?: boolean;
                execution_irreversible?: boolean;
                cancelation_irreversible?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.transaction_status != null) {
                data.transaction_status = this.transaction_status;
            }
            if (this.transaction_receipt != null) {
                data.transaction_receipt = this.transaction_receipt.toObject();
            }
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            if (this.public_keys != null) {
                data.public_keys = this.public_keys;
            }
            if (this.execution_trace != null) {
                data.execution_trace = this.execution_trace.toObject();
            }
            if (this.execution_block_header != null) {
                data.execution_block_header = this.execution_block_header.toObject();
            }
            if (this.created_by != null) {
                data.created_by = this.created_by.toObject();
            }
            if (this.canceled_by != null) {
                data.canceled_by = this.canceled_by.toObject();
            }
            if (this.creation_irreversible != null) {
                data.creation_irreversible = this.creation_irreversible;
            }
            if (this.execution_irreversible != null) {
                data.execution_irreversible = this.execution_irreversible;
            }
            if (this.cancelation_irreversible != null) {
                data.cancelation_irreversible = this.cancelation_irreversible;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.transaction_status != TransactionStatus.TRANSACTIONSTATUS_NONE)
                writer.writeEnum(2, this.transaction_status);
            if (this.has_transaction_receipt)
                writer.writeMessage(36, this.transaction_receipt, () => this.transaction_receipt.serialize(writer));
            if (this.has_transaction)
                writer.writeMessage(10, this.transaction, () => this.transaction.serialize(writer));
            if (this.public_keys.length)
                writer.writeRepeatedString(19, this.public_keys);
            if (this.has_execution_trace)
                writer.writeMessage(11, this.execution_trace, () => this.execution_trace.serialize(writer));
            if (this.has_execution_block_header)
                writer.writeMessage(12, this.execution_block_header, () => this.execution_block_header.serialize(writer));
            if (this.has_created_by)
                writer.writeMessage(20, this.created_by, () => this.created_by.serialize(writer));
            if (this.has_canceled_by)
                writer.writeMessage(21, this.canceled_by, () => this.canceled_by.serialize(writer));
            if (this.creation_irreversible != false)
                writer.writeBool(33, this.creation_irreversible);
            if (this.execution_irreversible != false)
                writer.writeBool(34, this.execution_irreversible);
            if (this.cancelation_irreversible != false)
                writer.writeBool(35, this.cancelation_irreversible);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionLifecycle {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionLifecycle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.transaction_status = reader.readEnum();
                        break;
                    case 36:
                        reader.readMessage(message.transaction_receipt, () => message.transaction_receipt = TransactionReceipt.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.transaction, () => message.transaction = SignedTransaction.deserialize(reader));
                        break;
                    case 19:
                        pb_1.Message.addToRepeatedField(message, 19, reader.readString());
                        break;
                    case 11:
                        reader.readMessage(message.execution_trace, () => message.execution_trace = TransactionTrace.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.execution_block_header, () => message.execution_block_header = BlockHeader.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.created_by, () => message.created_by = ExtDTrxOp.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.canceled_by, () => message.canceled_by = ExtDTrxOp.deserialize(reader));
                        break;
                    case 33:
                        message.creation_irreversible = reader.readBool();
                        break;
                    case 34:
                        message.execution_irreversible = reader.readBool();
                        break;
                    case 35:
                        message.cancelation_irreversible = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionLifecycle {
            return TransactionLifecycle.deserialize(bytes);
        }
    }
    export class SignedTransaction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transaction?: Transaction;
            signatures?: string[];
            context_free_data?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
                if ("signatures" in data && data.signatures != undefined) {
                    this.signatures = data.signatures;
                }
                if ("context_free_data" in data && data.context_free_data != undefined) {
                    this.context_free_data = data.context_free_data;
                }
            }
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, Transaction, 1) as Transaction;
        }
        set transaction(value: Transaction) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get signatures() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set signatures(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get context_free_data() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as Uint8Array[];
        }
        set context_free_data(value: Uint8Array[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            transaction?: ReturnType<typeof Transaction.prototype.toObject>;
            signatures?: string[];
            context_free_data?: Uint8Array[];
        }): SignedTransaction {
            const message = new SignedTransaction({});
            if (data.transaction != null) {
                message.transaction = Transaction.fromObject(data.transaction);
            }
            if (data.signatures != null) {
                message.signatures = data.signatures;
            }
            if (data.context_free_data != null) {
                message.context_free_data = data.context_free_data;
            }
            return message;
        }
        toObject() {
            const data: {
                transaction?: ReturnType<typeof Transaction.prototype.toObject>;
                signatures?: string[];
                context_free_data?: Uint8Array[];
            } = {};
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            if (this.signatures != null) {
                data.signatures = this.signatures;
            }
            if (this.context_free_data != null) {
                data.context_free_data = this.context_free_data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_transaction)
                writer.writeMessage(1, this.transaction, () => this.transaction.serialize(writer));
            if (this.signatures.length)
                writer.writeRepeatedString(2, this.signatures);
            if (this.context_free_data.length)
                writer.writeRepeatedBytes(3, this.context_free_data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignedTransaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignedTransaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transaction, () => message.transaction = Transaction.deserialize(reader));
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignedTransaction {
            return SignedTransaction.deserialize(bytes);
        }
    }
    export class Transaction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            header?: TransactionHeader;
            context_free_actions?: Action[];
            actions?: Action[];
            extensions?: Extension[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("context_free_actions" in data && data.context_free_actions != undefined) {
                    this.context_free_actions = data.context_free_actions;
                }
                if ("actions" in data && data.actions != undefined) {
                    this.actions = data.actions;
                }
                if ("extensions" in data && data.extensions != undefined) {
                    this.extensions = data.extensions;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, TransactionHeader, 1) as TransactionHeader;
        }
        set header(value: TransactionHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get context_free_actions() {
            return pb_1.Message.getRepeatedWrapperField(this, Action, 2) as Action[];
        }
        set context_free_actions(value: Action[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get actions() {
            return pb_1.Message.getRepeatedWrapperField(this, Action, 3) as Action[];
        }
        set actions(value: Action[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get extensions() {
            return pb_1.Message.getRepeatedWrapperField(this, Extension, 4) as Extension[];
        }
        set extensions(value: Extension[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof TransactionHeader.prototype.toObject>;
            context_free_actions?: ReturnType<typeof Action.prototype.toObject>[];
            actions?: ReturnType<typeof Action.prototype.toObject>[];
            extensions?: ReturnType<typeof Extension.prototype.toObject>[];
        }): Transaction {
            const message = new Transaction({});
            if (data.header != null) {
                message.header = TransactionHeader.fromObject(data.header);
            }
            if (data.context_free_actions != null) {
                message.context_free_actions = data.context_free_actions.map(item => Action.fromObject(item));
            }
            if (data.actions != null) {
                message.actions = data.actions.map(item => Action.fromObject(item));
            }
            if (data.extensions != null) {
                message.extensions = data.extensions.map(item => Extension.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof TransactionHeader.prototype.toObject>;
                context_free_actions?: ReturnType<typeof Action.prototype.toObject>[];
                actions?: ReturnType<typeof Action.prototype.toObject>[];
                extensions?: ReturnType<typeof Extension.prototype.toObject>[];
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.context_free_actions != null) {
                data.context_free_actions = this.context_free_actions.map((item: Action) => item.toObject());
            }
            if (this.actions != null) {
                data.actions = this.actions.map((item: Action) => item.toObject());
            }
            if (this.extensions != null) {
                data.extensions = this.extensions.map((item: Extension) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.context_free_actions.length)
                writer.writeRepeatedMessage(2, this.context_free_actions, (item: Action) => item.serialize(writer));
            if (this.actions.length)
                writer.writeRepeatedMessage(3, this.actions, (item: Action) => item.serialize(writer));
            if (this.extensions.length)
                writer.writeRepeatedMessage(4, this.extensions, (item: Extension) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Transaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Transaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.header, () => message.header = TransactionHeader.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.context_free_actions, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Action.deserialize(reader), Action));
                        break;
                    case 3:
                        reader.readMessage(message.actions, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Action.deserialize(reader), Action));
                        break;
                    case 4:
                        reader.readMessage(message.extensions, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Extension.deserialize(reader), Extension));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Transaction {
            return Transaction.deserialize(bytes);
        }
    }
    export class TransactionHeader extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            expiration?: dependency_1.google.protobuf.Timestamp;
            ref_block_num?: number;
            ref_block_prefix?: number;
            max_net_usage_words?: number;
            max_cpu_usage_ms?: number;
            delay_sec?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("expiration" in data && data.expiration != undefined) {
                    this.expiration = data.expiration;
                }
                if ("ref_block_num" in data && data.ref_block_num != undefined) {
                    this.ref_block_num = data.ref_block_num;
                }
                if ("ref_block_prefix" in data && data.ref_block_prefix != undefined) {
                    this.ref_block_prefix = data.ref_block_prefix;
                }
                if ("max_net_usage_words" in data && data.max_net_usage_words != undefined) {
                    this.max_net_usage_words = data.max_net_usage_words;
                }
                if ("max_cpu_usage_ms" in data && data.max_cpu_usage_ms != undefined) {
                    this.max_cpu_usage_ms = data.max_cpu_usage_ms;
                }
                if ("delay_sec" in data && data.delay_sec != undefined) {
                    this.delay_sec = data.delay_sec;
                }
            }
        }
        get expiration() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
        }
        set expiration(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_expiration() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get ref_block_num() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set ref_block_num(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get ref_block_prefix() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set ref_block_prefix(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get max_net_usage_words() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set max_net_usage_words(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get max_cpu_usage_ms() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set max_cpu_usage_ms(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get delay_sec() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set delay_sec(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            expiration?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            ref_block_num?: number;
            ref_block_prefix?: number;
            max_net_usage_words?: number;
            max_cpu_usage_ms?: number;
            delay_sec?: number;
        }): TransactionHeader {
            const message = new TransactionHeader({});
            if (data.expiration != null) {
                message.expiration = dependency_1.google.protobuf.Timestamp.fromObject(data.expiration);
            }
            if (data.ref_block_num != null) {
                message.ref_block_num = data.ref_block_num;
            }
            if (data.ref_block_prefix != null) {
                message.ref_block_prefix = data.ref_block_prefix;
            }
            if (data.max_net_usage_words != null) {
                message.max_net_usage_words = data.max_net_usage_words;
            }
            if (data.max_cpu_usage_ms != null) {
                message.max_cpu_usage_ms = data.max_cpu_usage_ms;
            }
            if (data.delay_sec != null) {
                message.delay_sec = data.delay_sec;
            }
            return message;
        }
        toObject() {
            const data: {
                expiration?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                ref_block_num?: number;
                ref_block_prefix?: number;
                max_net_usage_words?: number;
                max_cpu_usage_ms?: number;
                delay_sec?: number;
            } = {};
            if (this.expiration != null) {
                data.expiration = this.expiration.toObject();
            }
            if (this.ref_block_num != null) {
                data.ref_block_num = this.ref_block_num;
            }
            if (this.ref_block_prefix != null) {
                data.ref_block_prefix = this.ref_block_prefix;
            }
            if (this.max_net_usage_words != null) {
                data.max_net_usage_words = this.max_net_usage_words;
            }
            if (this.max_cpu_usage_ms != null) {
                data.max_cpu_usage_ms = this.max_cpu_usage_ms;
            }
            if (this.delay_sec != null) {
                data.delay_sec = this.delay_sec;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_expiration)
                writer.writeMessage(1, this.expiration, () => this.expiration.serialize(writer));
            if (this.ref_block_num != 0)
                writer.writeUint32(2, this.ref_block_num);
            if (this.ref_block_prefix != 0)
                writer.writeUint32(3, this.ref_block_prefix);
            if (this.max_net_usage_words != 0)
                writer.writeUint32(4, this.max_net_usage_words);
            if (this.max_cpu_usage_ms != 0)
                writer.writeUint32(5, this.max_cpu_usage_ms);
            if (this.delay_sec != 0)
                writer.writeUint32(6, this.delay_sec);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionHeader {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionHeader();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.expiration, () => message.expiration = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        message.ref_block_num = reader.readUint32();
                        break;
                    case 3:
                        message.ref_block_prefix = reader.readUint32();
                        break;
                    case 4:
                        message.max_net_usage_words = reader.readUint32();
                        break;
                    case 5:
                        message.max_cpu_usage_ms = reader.readUint32();
                        break;
                    case 6:
                        message.delay_sec = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionHeader {
            return TransactionHeader.deserialize(bytes);
        }
    }
    export class TransactionTrace extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            block_num?: string;
            index?: string;
            block_time?: dependency_1.google.protobuf.Timestamp;
            producer_block_id?: string;
            receipt?: TransactionReceiptHeader;
            elapsed?: number;
            net_usage?: string;
            scheduled?: boolean;
            action_traces?: ActionTrace[];
            failed_dtrx_trace?: TransactionTrace;
            exception?: Exception;
            error_code?: string;
            db_ops?: DBOp[];
            dtrx_ops?: DTrxOp[];
            feature_ops?: FeatureOp[];
            perm_ops?: PermOp[];
            ram_ops?: RAMOp[];
            ram_correction_ops?: RAMCorrectionOp[];
            rlimit_ops?: RlimitOp[];
            table_ops?: TableOp[];
            creation_tree?: CreationFlatNode[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9, 17, 18, 19, 20, 21, 22, 23, 24, 25], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("block_num" in data && data.block_num != undefined) {
                    this.block_num = data.block_num;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("block_time" in data && data.block_time != undefined) {
                    this.block_time = data.block_time;
                }
                if ("producer_block_id" in data && data.producer_block_id != undefined) {
                    this.producer_block_id = data.producer_block_id;
                }
                if ("receipt" in data && data.receipt != undefined) {
                    this.receipt = data.receipt;
                }
                if ("elapsed" in data && data.elapsed != undefined) {
                    this.elapsed = data.elapsed;
                }
                if ("net_usage" in data && data.net_usage != undefined) {
                    this.net_usage = data.net_usage;
                }
                if ("scheduled" in data && data.scheduled != undefined) {
                    this.scheduled = data.scheduled;
                }
                if ("action_traces" in data && data.action_traces != undefined) {
                    this.action_traces = data.action_traces;
                }
                if ("failed_dtrx_trace" in data && data.failed_dtrx_trace != undefined) {
                    this.failed_dtrx_trace = data.failed_dtrx_trace;
                }
                if ("exception" in data && data.exception != undefined) {
                    this.exception = data.exception;
                }
                if ("error_code" in data && data.error_code != undefined) {
                    this.error_code = data.error_code;
                }
                if ("db_ops" in data && data.db_ops != undefined) {
                    this.db_ops = data.db_ops;
                }
                if ("dtrx_ops" in data && data.dtrx_ops != undefined) {
                    this.dtrx_ops = data.dtrx_ops;
                }
                if ("feature_ops" in data && data.feature_ops != undefined) {
                    this.feature_ops = data.feature_ops;
                }
                if ("perm_ops" in data && data.perm_ops != undefined) {
                    this.perm_ops = data.perm_ops;
                }
                if ("ram_ops" in data && data.ram_ops != undefined) {
                    this.ram_ops = data.ram_ops;
                }
                if ("ram_correction_ops" in data && data.ram_correction_ops != undefined) {
                    this.ram_correction_ops = data.ram_correction_ops;
                }
                if ("rlimit_ops" in data && data.rlimit_ops != undefined) {
                    this.rlimit_ops = data.rlimit_ops;
                }
                if ("table_ops" in data && data.table_ops != undefined) {
                    this.table_ops = data.table_ops;
                }
                if ("creation_tree" in data && data.creation_tree != undefined) {
                    this.creation_tree = data.creation_tree;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get block_num() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set block_num(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 26, "0") as string;
        }
        set index(value: string) {
            pb_1.Message.setField(this, 26, value);
        }
        get block_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
        }
        set block_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_block_time() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get producer_block_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set producer_block_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get receipt() {
            return pb_1.Message.getWrapperField(this, TransactionReceiptHeader, 5) as TransactionReceiptHeader;
        }
        set receipt(value: TransactionReceiptHeader) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_receipt() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get elapsed() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set elapsed(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get net_usage() {
            return pb_1.Message.getFieldWithDefault(this, 7, "0") as string;
        }
        set net_usage(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get scheduled() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set scheduled(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get action_traces() {
            return pb_1.Message.getRepeatedWrapperField(this, ActionTrace, 9) as ActionTrace[];
        }
        set action_traces(value: ActionTrace[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get failed_dtrx_trace() {
            return pb_1.Message.getWrapperField(this, TransactionTrace, 10) as TransactionTrace;
        }
        set failed_dtrx_trace(value: TransactionTrace) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_failed_dtrx_trace() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get exception() {
            return pb_1.Message.getWrapperField(this, Exception, 15) as Exception;
        }
        set exception(value: Exception) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get has_exception() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get error_code() {
            return pb_1.Message.getFieldWithDefault(this, 16, "0") as string;
        }
        set error_code(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get db_ops() {
            return pb_1.Message.getRepeatedWrapperField(this, DBOp, 17) as DBOp[];
        }
        set db_ops(value: DBOp[]) {
            pb_1.Message.setRepeatedWrapperField(this, 17, value);
        }
        get dtrx_ops() {
            return pb_1.Message.getRepeatedWrapperField(this, DTrxOp, 18) as DTrxOp[];
        }
        set dtrx_ops(value: DTrxOp[]) {
            pb_1.Message.setRepeatedWrapperField(this, 18, value);
        }
        get feature_ops() {
            return pb_1.Message.getRepeatedWrapperField(this, FeatureOp, 19) as FeatureOp[];
        }
        set feature_ops(value: FeatureOp[]) {
            pb_1.Message.setRepeatedWrapperField(this, 19, value);
        }
        get perm_ops() {
            return pb_1.Message.getRepeatedWrapperField(this, PermOp, 20) as PermOp[];
        }
        set perm_ops(value: PermOp[]) {
            pb_1.Message.setRepeatedWrapperField(this, 20, value);
        }
        get ram_ops() {
            return pb_1.Message.getRepeatedWrapperField(this, RAMOp, 21) as RAMOp[];
        }
        set ram_ops(value: RAMOp[]) {
            pb_1.Message.setRepeatedWrapperField(this, 21, value);
        }
        get ram_correction_ops() {
            return pb_1.Message.getRepeatedWrapperField(this, RAMCorrectionOp, 22) as RAMCorrectionOp[];
        }
        set ram_correction_ops(value: RAMCorrectionOp[]) {
            pb_1.Message.setRepeatedWrapperField(this, 22, value);
        }
        get rlimit_ops() {
            return pb_1.Message.getRepeatedWrapperField(this, RlimitOp, 23) as RlimitOp[];
        }
        set rlimit_ops(value: RlimitOp[]) {
            pb_1.Message.setRepeatedWrapperField(this, 23, value);
        }
        get table_ops() {
            return pb_1.Message.getRepeatedWrapperField(this, TableOp, 24) as TableOp[];
        }
        set table_ops(value: TableOp[]) {
            pb_1.Message.setRepeatedWrapperField(this, 24, value);
        }
        get creation_tree() {
            return pb_1.Message.getRepeatedWrapperField(this, CreationFlatNode, 25) as CreationFlatNode[];
        }
        set creation_tree(value: CreationFlatNode[]) {
            pb_1.Message.setRepeatedWrapperField(this, 25, value);
        }
        static fromObject(data: {
            id?: string;
            block_num?: string;
            index?: string;
            block_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            producer_block_id?: string;
            receipt?: ReturnType<typeof TransactionReceiptHeader.prototype.toObject>;
            elapsed?: number;
            net_usage?: string;
            scheduled?: boolean;
            action_traces?: ReturnType<typeof ActionTrace.prototype.toObject>[];
            failed_dtrx_trace?: ReturnType<typeof TransactionTrace.prototype.toObject>;
            exception?: ReturnType<typeof Exception.prototype.toObject>;
            error_code?: string;
            db_ops?: ReturnType<typeof DBOp.prototype.toObject>[];
            dtrx_ops?: ReturnType<typeof DTrxOp.prototype.toObject>[];
            feature_ops?: ReturnType<typeof FeatureOp.prototype.toObject>[];
            perm_ops?: ReturnType<typeof PermOp.prototype.toObject>[];
            ram_ops?: ReturnType<typeof RAMOp.prototype.toObject>[];
            ram_correction_ops?: ReturnType<typeof RAMCorrectionOp.prototype.toObject>[];
            rlimit_ops?: ReturnType<typeof RlimitOp.prototype.toObject>[];
            table_ops?: ReturnType<typeof TableOp.prototype.toObject>[];
            creation_tree?: ReturnType<typeof CreationFlatNode.prototype.toObject>[];
        }): TransactionTrace {
            const message = new TransactionTrace({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.block_num != null) {
                message.block_num = data.block_num;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.block_time != null) {
                message.block_time = dependency_1.google.protobuf.Timestamp.fromObject(data.block_time);
            }
            if (data.producer_block_id != null) {
                message.producer_block_id = data.producer_block_id;
            }
            if (data.receipt != null) {
                message.receipt = TransactionReceiptHeader.fromObject(data.receipt);
            }
            if (data.elapsed != null) {
                message.elapsed = data.elapsed;
            }
            if (data.net_usage != null) {
                message.net_usage = data.net_usage;
            }
            if (data.scheduled != null) {
                message.scheduled = data.scheduled;
            }
            if (data.action_traces != null) {
                message.action_traces = data.action_traces.map(item => ActionTrace.fromObject(item));
            }
            if (data.failed_dtrx_trace != null) {
                message.failed_dtrx_trace = TransactionTrace.fromObject(data.failed_dtrx_trace);
            }
            if (data.exception != null) {
                message.exception = Exception.fromObject(data.exception);
            }
            if (data.error_code != null) {
                message.error_code = data.error_code;
            }
            if (data.db_ops != null) {
                message.db_ops = data.db_ops.map(item => DBOp.fromObject(item));
            }
            if (data.dtrx_ops != null) {
                message.dtrx_ops = data.dtrx_ops.map(item => DTrxOp.fromObject(item));
            }
            if (data.feature_ops != null) {
                message.feature_ops = data.feature_ops.map(item => FeatureOp.fromObject(item));
            }
            if (data.perm_ops != null) {
                message.perm_ops = data.perm_ops.map(item => PermOp.fromObject(item));
            }
            if (data.ram_ops != null) {
                message.ram_ops = data.ram_ops.map(item => RAMOp.fromObject(item));
            }
            if (data.ram_correction_ops != null) {
                message.ram_correction_ops = data.ram_correction_ops.map(item => RAMCorrectionOp.fromObject(item));
            }
            if (data.rlimit_ops != null) {
                message.rlimit_ops = data.rlimit_ops.map(item => RlimitOp.fromObject(item));
            }
            if (data.table_ops != null) {
                message.table_ops = data.table_ops.map(item => TableOp.fromObject(item));
            }
            if (data.creation_tree != null) {
                message.creation_tree = data.creation_tree.map(item => CreationFlatNode.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                block_num?: string;
                index?: string;
                block_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                producer_block_id?: string;
                receipt?: ReturnType<typeof TransactionReceiptHeader.prototype.toObject>;
                elapsed?: number;
                net_usage?: string;
                scheduled?: boolean;
                action_traces?: ReturnType<typeof ActionTrace.prototype.toObject>[];
                failed_dtrx_trace?: ReturnType<typeof TransactionTrace.prototype.toObject>;
                exception?: ReturnType<typeof Exception.prototype.toObject>;
                error_code?: string;
                db_ops?: ReturnType<typeof DBOp.prototype.toObject>[];
                dtrx_ops?: ReturnType<typeof DTrxOp.prototype.toObject>[];
                feature_ops?: ReturnType<typeof FeatureOp.prototype.toObject>[];
                perm_ops?: ReturnType<typeof PermOp.prototype.toObject>[];
                ram_ops?: ReturnType<typeof RAMOp.prototype.toObject>[];
                ram_correction_ops?: ReturnType<typeof RAMCorrectionOp.prototype.toObject>[];
                rlimit_ops?: ReturnType<typeof RlimitOp.prototype.toObject>[];
                table_ops?: ReturnType<typeof TableOp.prototype.toObject>[];
                creation_tree?: ReturnType<typeof CreationFlatNode.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.block_num != null) {
                data.block_num = this.block_num;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.block_time != null) {
                data.block_time = this.block_time.toObject();
            }
            if (this.producer_block_id != null) {
                data.producer_block_id = this.producer_block_id;
            }
            if (this.receipt != null) {
                data.receipt = this.receipt.toObject();
            }
            if (this.elapsed != null) {
                data.elapsed = this.elapsed;
            }
            if (this.net_usage != null) {
                data.net_usage = this.net_usage;
            }
            if (this.scheduled != null) {
                data.scheduled = this.scheduled;
            }
            if (this.action_traces != null) {
                data.action_traces = this.action_traces.map((item: ActionTrace) => item.toObject());
            }
            if (this.failed_dtrx_trace != null) {
                data.failed_dtrx_trace = this.failed_dtrx_trace.toObject();
            }
            if (this.exception != null) {
                data.exception = this.exception.toObject();
            }
            if (this.error_code != null) {
                data.error_code = this.error_code;
            }
            if (this.db_ops != null) {
                data.db_ops = this.db_ops.map((item: DBOp) => item.toObject());
            }
            if (this.dtrx_ops != null) {
                data.dtrx_ops = this.dtrx_ops.map((item: DTrxOp) => item.toObject());
            }
            if (this.feature_ops != null) {
                data.feature_ops = this.feature_ops.map((item: FeatureOp) => item.toObject());
            }
            if (this.perm_ops != null) {
                data.perm_ops = this.perm_ops.map((item: PermOp) => item.toObject());
            }
            if (this.ram_ops != null) {
                data.ram_ops = this.ram_ops.map((item: RAMOp) => item.toObject());
            }
            if (this.ram_correction_ops != null) {
                data.ram_correction_ops = this.ram_correction_ops.map((item: RAMCorrectionOp) => item.toObject());
            }
            if (this.rlimit_ops != null) {
                data.rlimit_ops = this.rlimit_ops.map((item: RlimitOp) => item.toObject());
            }
            if (this.table_ops != null) {
                data.table_ops = this.table_ops.map((item: TableOp) => item.toObject());
            }
            if (this.creation_tree != null) {
                data.creation_tree = this.creation_tree.map((item: CreationFlatNode) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.block_num != "0")
                writer.writeUint64String(2, this.block_num);
            if (this.index != "0")
                writer.writeUint64String(26, this.index);
            if (this.has_block_time)
                writer.writeMessage(3, this.block_time, () => this.block_time.serialize(writer));
            if (this.producer_block_id.length)
                writer.writeString(4, this.producer_block_id);
            if (this.has_receipt)
                writer.writeMessage(5, this.receipt, () => this.receipt.serialize(writer));
            if (this.elapsed != 0)
                writer.writeInt64(6, this.elapsed);
            if (this.net_usage != "0")
                writer.writeUint64String(7, this.net_usage);
            if (this.scheduled != false)
                writer.writeBool(8, this.scheduled);
            if (this.action_traces.length)
                writer.writeRepeatedMessage(9, this.action_traces, (item: ActionTrace) => item.serialize(writer));
            if (this.has_failed_dtrx_trace)
                writer.writeMessage(10, this.failed_dtrx_trace, () => this.failed_dtrx_trace.serialize(writer));
            if (this.has_exception)
                writer.writeMessage(15, this.exception, () => this.exception.serialize(writer));
            if (this.error_code != "0")
                writer.writeUint64String(16, this.error_code);
            if (this.db_ops.length)
                writer.writeRepeatedMessage(17, this.db_ops, (item: DBOp) => item.serialize(writer));
            if (this.dtrx_ops.length)
                writer.writeRepeatedMessage(18, this.dtrx_ops, (item: DTrxOp) => item.serialize(writer));
            if (this.feature_ops.length)
                writer.writeRepeatedMessage(19, this.feature_ops, (item: FeatureOp) => item.serialize(writer));
            if (this.perm_ops.length)
                writer.writeRepeatedMessage(20, this.perm_ops, (item: PermOp) => item.serialize(writer));
            if (this.ram_ops.length)
                writer.writeRepeatedMessage(21, this.ram_ops, (item: RAMOp) => item.serialize(writer));
            if (this.ram_correction_ops.length)
                writer.writeRepeatedMessage(22, this.ram_correction_ops, (item: RAMCorrectionOp) => item.serialize(writer));
            if (this.rlimit_ops.length)
                writer.writeRepeatedMessage(23, this.rlimit_ops, (item: RlimitOp) => item.serialize(writer));
            if (this.table_ops.length)
                writer.writeRepeatedMessage(24, this.table_ops, (item: TableOp) => item.serialize(writer));
            if (this.creation_tree.length)
                writer.writeRepeatedMessage(25, this.creation_tree, (item: CreationFlatNode) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionTrace {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionTrace();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.block_num = reader.readUint64String();
                        break;
                    case 26:
                        message.index = reader.readUint64String();
                        break;
                    case 3:
                        reader.readMessage(message.block_time, () => message.block_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        message.producer_block_id = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.receipt, () => message.receipt = TransactionReceiptHeader.deserialize(reader));
                        break;
                    case 6:
                        message.elapsed = reader.readInt64();
                        break;
                    case 7:
                        message.net_usage = reader.readUint64String();
                        break;
                    case 8:
                        message.scheduled = reader.readBool();
                        break;
                    case 9:
                        reader.readMessage(message.action_traces, () => pb_1.Message.addToRepeatedWrapperField(message, 9, ActionTrace.deserialize(reader), ActionTrace));
                        break;
                    case 10:
                        reader.readMessage(message.failed_dtrx_trace, () => message.failed_dtrx_trace = TransactionTrace.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.exception, () => message.exception = Exception.deserialize(reader));
                        break;
                    case 16:
                        message.error_code = reader.readUint64String();
                        break;
                    case 17:
                        reader.readMessage(message.db_ops, () => pb_1.Message.addToRepeatedWrapperField(message, 17, DBOp.deserialize(reader), DBOp));
                        break;
                    case 18:
                        reader.readMessage(message.dtrx_ops, () => pb_1.Message.addToRepeatedWrapperField(message, 18, DTrxOp.deserialize(reader), DTrxOp));
                        break;
                    case 19:
                        reader.readMessage(message.feature_ops, () => pb_1.Message.addToRepeatedWrapperField(message, 19, FeatureOp.deserialize(reader), FeatureOp));
                        break;
                    case 20:
                        reader.readMessage(message.perm_ops, () => pb_1.Message.addToRepeatedWrapperField(message, 20, PermOp.deserialize(reader), PermOp));
                        break;
                    case 21:
                        reader.readMessage(message.ram_ops, () => pb_1.Message.addToRepeatedWrapperField(message, 21, RAMOp.deserialize(reader), RAMOp));
                        break;
                    case 22:
                        reader.readMessage(message.ram_correction_ops, () => pb_1.Message.addToRepeatedWrapperField(message, 22, RAMCorrectionOp.deserialize(reader), RAMCorrectionOp));
                        break;
                    case 23:
                        reader.readMessage(message.rlimit_ops, () => pb_1.Message.addToRepeatedWrapperField(message, 23, RlimitOp.deserialize(reader), RlimitOp));
                        break;
                    case 24:
                        reader.readMessage(message.table_ops, () => pb_1.Message.addToRepeatedWrapperField(message, 24, TableOp.deserialize(reader), TableOp));
                        break;
                    case 25:
                        reader.readMessage(message.creation_tree, () => pb_1.Message.addToRepeatedWrapperField(message, 25, CreationFlatNode.deserialize(reader), CreationFlatNode));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionTrace {
            return TransactionTrace.deserialize(bytes);
        }
    }
    export class TransactionReceiptHeader extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: TransactionStatus;
            cpu_usage_micro_seconds?: number;
            net_usage_words?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("cpu_usage_micro_seconds" in data && data.cpu_usage_micro_seconds != undefined) {
                    this.cpu_usage_micro_seconds = data.cpu_usage_micro_seconds;
                }
                if ("net_usage_words" in data && data.net_usage_words != undefined) {
                    this.net_usage_words = data.net_usage_words;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, TransactionStatus.TRANSACTIONSTATUS_NONE) as TransactionStatus;
        }
        set status(value: TransactionStatus) {
            pb_1.Message.setField(this, 1, value);
        }
        get cpu_usage_micro_seconds() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set cpu_usage_micro_seconds(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get net_usage_words() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set net_usage_words(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            status?: TransactionStatus;
            cpu_usage_micro_seconds?: number;
            net_usage_words?: number;
        }): TransactionReceiptHeader {
            const message = new TransactionReceiptHeader({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.cpu_usage_micro_seconds != null) {
                message.cpu_usage_micro_seconds = data.cpu_usage_micro_seconds;
            }
            if (data.net_usage_words != null) {
                message.net_usage_words = data.net_usage_words;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: TransactionStatus;
                cpu_usage_micro_seconds?: number;
                net_usage_words?: number;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.cpu_usage_micro_seconds != null) {
                data.cpu_usage_micro_seconds = this.cpu_usage_micro_seconds;
            }
            if (this.net_usage_words != null) {
                data.net_usage_words = this.net_usage_words;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != TransactionStatus.TRANSACTIONSTATUS_NONE)
                writer.writeEnum(1, this.status);
            if (this.cpu_usage_micro_seconds != 0)
                writer.writeUint32(2, this.cpu_usage_micro_seconds);
            if (this.net_usage_words != 0)
                writer.writeUint32(3, this.net_usage_words);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionReceiptHeader {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionReceiptHeader();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        message.cpu_usage_micro_seconds = reader.readUint32();
                        break;
                    case 3:
                        message.net_usage_words = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionReceiptHeader {
            return TransactionReceiptHeader.deserialize(bytes);
        }
    }
    export class Action extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account?: string;
            name?: string;
            authorization?: PermissionLevel[];
            json_data?: string;
            raw_data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("authorization" in data && data.authorization != undefined) {
                    this.authorization = data.authorization;
                }
                if ("json_data" in data && data.json_data != undefined) {
                    this.json_data = data.json_data;
                }
                if ("raw_data" in data && data.raw_data != undefined) {
                    this.raw_data = data.raw_data;
                }
            }
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get authorization() {
            return pb_1.Message.getRepeatedWrapperField(this, PermissionLevel, 3) as PermissionLevel[];
        }
        set authorization(value: PermissionLevel[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get json_data() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set json_data(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get raw_data() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set raw_data(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            account?: string;
            name?: string;
            authorization?: ReturnType<typeof PermissionLevel.prototype.toObject>[];
            json_data?: string;
            raw_data?: Uint8Array;
        }): Action {
            const message = new Action({});
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.authorization != null) {
                message.authorization = data.authorization.map(item => PermissionLevel.fromObject(item));
            }
            if (data.json_data != null) {
                message.json_data = data.json_data;
            }
            if (data.raw_data != null) {
                message.raw_data = data.raw_data;
            }
            return message;
        }
        toObject() {
            const data: {
                account?: string;
                name?: string;
                authorization?: ReturnType<typeof PermissionLevel.prototype.toObject>[];
                json_data?: string;
                raw_data?: Uint8Array;
            } = {};
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.authorization != null) {
                data.authorization = this.authorization.map((item: PermissionLevel) => item.toObject());
            }
            if (this.json_data != null) {
                data.json_data = this.json_data;
            }
            if (this.raw_data != null) {
                data.raw_data = this.raw_data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account.length)
                writer.writeString(1, this.account);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.authorization.length)
                writer.writeRepeatedMessage(3, this.authorization, (item: PermissionLevel) => item.serialize(writer));
            if (this.json_data.length)
                writer.writeString(4, this.json_data);
            if (this.raw_data.length)
                writer.writeBytes(5, this.raw_data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Action {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Action();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.authorization, () => pb_1.Message.addToRepeatedWrapperField(message, 3, PermissionLevel.deserialize(reader), PermissionLevel));
                        break;
                    case 4:
                        message.json_data = reader.readString();
                        break;
                    case 5:
                        message.raw_data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Action {
            return Action.deserialize(bytes);
        }
    }
    export class ActionTrace extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            receiver?: string;
            receipt?: ActionReceipt;
            action?: Action;
            context_free?: boolean;
            elapsed?: number;
            console?: string;
            transaction_id?: string;
            block_num?: string;
            producer_block_id?: string;
            block_time?: dependency_1.google.protobuf.Timestamp;
            account_ram_deltas?: AccountRAMDelta[];
            raw_return_value?: Uint8Array;
            json_return_value?: string;
            exception?: Exception;
            error_code?: string;
            action_ordinal?: number;
            creator_action_ordinal?: number;
            closest_unnotified_ancestor_action_ordinal?: number;
            execution_index?: number;
            filtering_matched?: boolean;
            filtering_matched_system_action_filter?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("receiver" in data && data.receiver != undefined) {
                    this.receiver = data.receiver;
                }
                if ("receipt" in data && data.receipt != undefined) {
                    this.receipt = data.receipt;
                }
                if ("action" in data && data.action != undefined) {
                    this.action = data.action;
                }
                if ("context_free" in data && data.context_free != undefined) {
                    this.context_free = data.context_free;
                }
                if ("elapsed" in data && data.elapsed != undefined) {
                    this.elapsed = data.elapsed;
                }
                if ("console" in data && data.console != undefined) {
                    this.console = data.console;
                }
                if ("transaction_id" in data && data.transaction_id != undefined) {
                    this.transaction_id = data.transaction_id;
                }
                if ("block_num" in data && data.block_num != undefined) {
                    this.block_num = data.block_num;
                }
                if ("producer_block_id" in data && data.producer_block_id != undefined) {
                    this.producer_block_id = data.producer_block_id;
                }
                if ("block_time" in data && data.block_time != undefined) {
                    this.block_time = data.block_time;
                }
                if ("account_ram_deltas" in data && data.account_ram_deltas != undefined) {
                    this.account_ram_deltas = data.account_ram_deltas;
                }
                if ("raw_return_value" in data && data.raw_return_value != undefined) {
                    this.raw_return_value = data.raw_return_value;
                }
                if ("json_return_value" in data && data.json_return_value != undefined) {
                    this.json_return_value = data.json_return_value;
                }
                if ("exception" in data && data.exception != undefined) {
                    this.exception = data.exception;
                }
                if ("error_code" in data && data.error_code != undefined) {
                    this.error_code = data.error_code;
                }
                if ("action_ordinal" in data && data.action_ordinal != undefined) {
                    this.action_ordinal = data.action_ordinal;
                }
                if ("creator_action_ordinal" in data && data.creator_action_ordinal != undefined) {
                    this.creator_action_ordinal = data.creator_action_ordinal;
                }
                if ("closest_unnotified_ancestor_action_ordinal" in data && data.closest_unnotified_ancestor_action_ordinal != undefined) {
                    this.closest_unnotified_ancestor_action_ordinal = data.closest_unnotified_ancestor_action_ordinal;
                }
                if ("execution_index" in data && data.execution_index != undefined) {
                    this.execution_index = data.execution_index;
                }
                if ("filtering_matched" in data && data.filtering_matched != undefined) {
                    this.filtering_matched = data.filtering_matched;
                }
                if ("filtering_matched_system_action_filter" in data && data.filtering_matched_system_action_filter != undefined) {
                    this.filtering_matched_system_action_filter = data.filtering_matched_system_action_filter;
                }
            }
        }
        get receiver() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set receiver(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get receipt() {
            return pb_1.Message.getWrapperField(this, ActionReceipt, 1) as ActionReceipt;
        }
        set receipt(value: ActionReceipt) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_receipt() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get action() {
            return pb_1.Message.getWrapperField(this, Action, 2) as Action;
        }
        set action(value: Action) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_action() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get context_free() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set context_free(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get elapsed() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set elapsed(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get console() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set console(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get transaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set transaction_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get block_num() {
            return pb_1.Message.getFieldWithDefault(this, 7, "0") as string;
        }
        set block_num(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get producer_block_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set producer_block_id(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get block_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 9) as dependency_1.google.protobuf.Timestamp;
        }
        set block_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_block_time() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get account_ram_deltas() {
            return pb_1.Message.getRepeatedWrapperField(this, AccountRAMDelta, 10) as AccountRAMDelta[];
        }
        set account_ram_deltas(value: AccountRAMDelta[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        get raw_return_value() {
            return pb_1.Message.getFieldWithDefault(this, 41, new Uint8Array(0)) as Uint8Array;
        }
        set raw_return_value(value: Uint8Array) {
            pb_1.Message.setField(this, 41, value);
        }
        get json_return_value() {
            return pb_1.Message.getFieldWithDefault(this, 42, "") as string;
        }
        set json_return_value(value: string) {
            pb_1.Message.setField(this, 42, value);
        }
        get exception() {
            return pb_1.Message.getWrapperField(this, Exception, 15) as Exception;
        }
        set exception(value: Exception) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get has_exception() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get error_code() {
            return pb_1.Message.getFieldWithDefault(this, 20, "0") as string;
        }
        set error_code(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get action_ordinal() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set action_ordinal(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get creator_action_ordinal() {
            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
        }
        set creator_action_ordinal(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get closest_unnotified_ancestor_action_ordinal() {
            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
        }
        set closest_unnotified_ancestor_action_ordinal(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get execution_index() {
            return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
        }
        set execution_index(value: number) {
            pb_1.Message.setField(this, 19, value);
        }
        get filtering_matched() {
            return pb_1.Message.getFieldWithDefault(this, 30, false) as boolean;
        }
        set filtering_matched(value: boolean) {
            pb_1.Message.setField(this, 30, value);
        }
        get filtering_matched_system_action_filter() {
            return pb_1.Message.getFieldWithDefault(this, 31, false) as boolean;
        }
        set filtering_matched_system_action_filter(value: boolean) {
            pb_1.Message.setField(this, 31, value);
        }
        static fromObject(data: {
            receiver?: string;
            receipt?: ReturnType<typeof ActionReceipt.prototype.toObject>;
            action?: ReturnType<typeof Action.prototype.toObject>;
            context_free?: boolean;
            elapsed?: number;
            console?: string;
            transaction_id?: string;
            block_num?: string;
            producer_block_id?: string;
            block_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            account_ram_deltas?: ReturnType<typeof AccountRAMDelta.prototype.toObject>[];
            raw_return_value?: Uint8Array;
            json_return_value?: string;
            exception?: ReturnType<typeof Exception.prototype.toObject>;
            error_code?: string;
            action_ordinal?: number;
            creator_action_ordinal?: number;
            closest_unnotified_ancestor_action_ordinal?: number;
            execution_index?: number;
            filtering_matched?: boolean;
            filtering_matched_system_action_filter?: boolean;
        }): ActionTrace {
            const message = new ActionTrace({});
            if (data.receiver != null) {
                message.receiver = data.receiver;
            }
            if (data.receipt != null) {
                message.receipt = ActionReceipt.fromObject(data.receipt);
            }
            if (data.action != null) {
                message.action = Action.fromObject(data.action);
            }
            if (data.context_free != null) {
                message.context_free = data.context_free;
            }
            if (data.elapsed != null) {
                message.elapsed = data.elapsed;
            }
            if (data.console != null) {
                message.console = data.console;
            }
            if (data.transaction_id != null) {
                message.transaction_id = data.transaction_id;
            }
            if (data.block_num != null) {
                message.block_num = data.block_num;
            }
            if (data.producer_block_id != null) {
                message.producer_block_id = data.producer_block_id;
            }
            if (data.block_time != null) {
                message.block_time = dependency_1.google.protobuf.Timestamp.fromObject(data.block_time);
            }
            if (data.account_ram_deltas != null) {
                message.account_ram_deltas = data.account_ram_deltas.map(item => AccountRAMDelta.fromObject(item));
            }
            if (data.raw_return_value != null) {
                message.raw_return_value = data.raw_return_value;
            }
            if (data.json_return_value != null) {
                message.json_return_value = data.json_return_value;
            }
            if (data.exception != null) {
                message.exception = Exception.fromObject(data.exception);
            }
            if (data.error_code != null) {
                message.error_code = data.error_code;
            }
            if (data.action_ordinal != null) {
                message.action_ordinal = data.action_ordinal;
            }
            if (data.creator_action_ordinal != null) {
                message.creator_action_ordinal = data.creator_action_ordinal;
            }
            if (data.closest_unnotified_ancestor_action_ordinal != null) {
                message.closest_unnotified_ancestor_action_ordinal = data.closest_unnotified_ancestor_action_ordinal;
            }
            if (data.execution_index != null) {
                message.execution_index = data.execution_index;
            }
            if (data.filtering_matched != null) {
                message.filtering_matched = data.filtering_matched;
            }
            if (data.filtering_matched_system_action_filter != null) {
                message.filtering_matched_system_action_filter = data.filtering_matched_system_action_filter;
            }
            return message;
        }
        toObject() {
            const data: {
                receiver?: string;
                receipt?: ReturnType<typeof ActionReceipt.prototype.toObject>;
                action?: ReturnType<typeof Action.prototype.toObject>;
                context_free?: boolean;
                elapsed?: number;
                console?: string;
                transaction_id?: string;
                block_num?: string;
                producer_block_id?: string;
                block_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                account_ram_deltas?: ReturnType<typeof AccountRAMDelta.prototype.toObject>[];
                raw_return_value?: Uint8Array;
                json_return_value?: string;
                exception?: ReturnType<typeof Exception.prototype.toObject>;
                error_code?: string;
                action_ordinal?: number;
                creator_action_ordinal?: number;
                closest_unnotified_ancestor_action_ordinal?: number;
                execution_index?: number;
                filtering_matched?: boolean;
                filtering_matched_system_action_filter?: boolean;
            } = {};
            if (this.receiver != null) {
                data.receiver = this.receiver;
            }
            if (this.receipt != null) {
                data.receipt = this.receipt.toObject();
            }
            if (this.action != null) {
                data.action = this.action.toObject();
            }
            if (this.context_free != null) {
                data.context_free = this.context_free;
            }
            if (this.elapsed != null) {
                data.elapsed = this.elapsed;
            }
            if (this.console != null) {
                data.console = this.console;
            }
            if (this.transaction_id != null) {
                data.transaction_id = this.transaction_id;
            }
            if (this.block_num != null) {
                data.block_num = this.block_num;
            }
            if (this.producer_block_id != null) {
                data.producer_block_id = this.producer_block_id;
            }
            if (this.block_time != null) {
                data.block_time = this.block_time.toObject();
            }
            if (this.account_ram_deltas != null) {
                data.account_ram_deltas = this.account_ram_deltas.map((item: AccountRAMDelta) => item.toObject());
            }
            if (this.raw_return_value != null) {
                data.raw_return_value = this.raw_return_value;
            }
            if (this.json_return_value != null) {
                data.json_return_value = this.json_return_value;
            }
            if (this.exception != null) {
                data.exception = this.exception.toObject();
            }
            if (this.error_code != null) {
                data.error_code = this.error_code;
            }
            if (this.action_ordinal != null) {
                data.action_ordinal = this.action_ordinal;
            }
            if (this.creator_action_ordinal != null) {
                data.creator_action_ordinal = this.creator_action_ordinal;
            }
            if (this.closest_unnotified_ancestor_action_ordinal != null) {
                data.closest_unnotified_ancestor_action_ordinal = this.closest_unnotified_ancestor_action_ordinal;
            }
            if (this.execution_index != null) {
                data.execution_index = this.execution_index;
            }
            if (this.filtering_matched != null) {
                data.filtering_matched = this.filtering_matched;
            }
            if (this.filtering_matched_system_action_filter != null) {
                data.filtering_matched_system_action_filter = this.filtering_matched_system_action_filter;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.receiver.length)
                writer.writeString(11, this.receiver);
            if (this.has_receipt)
                writer.writeMessage(1, this.receipt, () => this.receipt.serialize(writer));
            if (this.has_action)
                writer.writeMessage(2, this.action, () => this.action.serialize(writer));
            if (this.context_free != false)
                writer.writeBool(3, this.context_free);
            if (this.elapsed != 0)
                writer.writeInt64(4, this.elapsed);
            if (this.console.length)
                writer.writeString(5, this.console);
            if (this.transaction_id.length)
                writer.writeString(6, this.transaction_id);
            if (this.block_num != "0")
                writer.writeUint64String(7, this.block_num);
            if (this.producer_block_id.length)
                writer.writeString(8, this.producer_block_id);
            if (this.has_block_time)
                writer.writeMessage(9, this.block_time, () => this.block_time.serialize(writer));
            if (this.account_ram_deltas.length)
                writer.writeRepeatedMessage(10, this.account_ram_deltas, (item: AccountRAMDelta) => item.serialize(writer));
            if (this.raw_return_value.length)
                writer.writeBytes(41, this.raw_return_value);
            if (this.json_return_value.length)
                writer.writeString(42, this.json_return_value);
            if (this.has_exception)
                writer.writeMessage(15, this.exception, () => this.exception.serialize(writer));
            if (this.error_code != "0")
                writer.writeUint64String(20, this.error_code);
            if (this.action_ordinal != 0)
                writer.writeUint32(16, this.action_ordinal);
            if (this.creator_action_ordinal != 0)
                writer.writeUint32(17, this.creator_action_ordinal);
            if (this.closest_unnotified_ancestor_action_ordinal != 0)
                writer.writeUint32(18, this.closest_unnotified_ancestor_action_ordinal);
            if (this.execution_index != 0)
                writer.writeUint32(19, this.execution_index);
            if (this.filtering_matched != false)
                writer.writeBool(30, this.filtering_matched);
            if (this.filtering_matched_system_action_filter != false)
                writer.writeBool(31, this.filtering_matched_system_action_filter);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActionTrace {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActionTrace();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 11:
                        message.receiver = reader.readString();
                        break;
                    case 1:
                        reader.readMessage(message.receipt, () => message.receipt = ActionReceipt.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.action, () => message.action = Action.deserialize(reader));
                        break;
                    case 3:
                        message.context_free = reader.readBool();
                        break;
                    case 4:
                        message.elapsed = reader.readInt64();
                        break;
                    case 5:
                        message.console = reader.readString();
                        break;
                    case 6:
                        message.transaction_id = reader.readString();
                        break;
                    case 7:
                        message.block_num = reader.readUint64String();
                        break;
                    case 8:
                        message.producer_block_id = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.block_time, () => message.block_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.account_ram_deltas, () => pb_1.Message.addToRepeatedWrapperField(message, 10, AccountRAMDelta.deserialize(reader), AccountRAMDelta));
                        break;
                    case 41:
                        message.raw_return_value = reader.readBytes();
                        break;
                    case 42:
                        message.json_return_value = reader.readString();
                        break;
                    case 15:
                        reader.readMessage(message.exception, () => message.exception = Exception.deserialize(reader));
                        break;
                    case 20:
                        message.error_code = reader.readUint64String();
                        break;
                    case 16:
                        message.action_ordinal = reader.readUint32();
                        break;
                    case 17:
                        message.creator_action_ordinal = reader.readUint32();
                        break;
                    case 18:
                        message.closest_unnotified_ancestor_action_ordinal = reader.readUint32();
                        break;
                    case 19:
                        message.execution_index = reader.readUint32();
                        break;
                    case 30:
                        message.filtering_matched = reader.readBool();
                        break;
                    case 31:
                        message.filtering_matched_system_action_filter = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActionTrace {
            return ActionTrace.deserialize(bytes);
        }
    }
    export class ActionReceipt extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            receiver?: string;
            digest?: string;
            global_sequence?: string;
            auth_sequence?: AuthSequence[];
            recv_sequence?: string;
            code_sequence?: string;
            abi_sequence?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("receiver" in data && data.receiver != undefined) {
                    this.receiver = data.receiver;
                }
                if ("digest" in data && data.digest != undefined) {
                    this.digest = data.digest;
                }
                if ("global_sequence" in data && data.global_sequence != undefined) {
                    this.global_sequence = data.global_sequence;
                }
                if ("auth_sequence" in data && data.auth_sequence != undefined) {
                    this.auth_sequence = data.auth_sequence;
                }
                if ("recv_sequence" in data && data.recv_sequence != undefined) {
                    this.recv_sequence = data.recv_sequence;
                }
                if ("code_sequence" in data && data.code_sequence != undefined) {
                    this.code_sequence = data.code_sequence;
                }
                if ("abi_sequence" in data && data.abi_sequence != undefined) {
                    this.abi_sequence = data.abi_sequence;
                }
            }
        }
        get receiver() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set receiver(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get digest() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set digest(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get global_sequence() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set global_sequence(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get auth_sequence() {
            return pb_1.Message.getRepeatedWrapperField(this, AuthSequence, 4) as AuthSequence[];
        }
        set auth_sequence(value: AuthSequence[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get recv_sequence() {
            return pb_1.Message.getFieldWithDefault(this, 5, "0") as string;
        }
        set recv_sequence(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get code_sequence() {
            return pb_1.Message.getFieldWithDefault(this, 6, "0") as string;
        }
        set code_sequence(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get abi_sequence() {
            return pb_1.Message.getFieldWithDefault(this, 7, "0") as string;
        }
        set abi_sequence(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            receiver?: string;
            digest?: string;
            global_sequence?: string;
            auth_sequence?: ReturnType<typeof AuthSequence.prototype.toObject>[];
            recv_sequence?: string;
            code_sequence?: string;
            abi_sequence?: string;
        }): ActionReceipt {
            const message = new ActionReceipt({});
            if (data.receiver != null) {
                message.receiver = data.receiver;
            }
            if (data.digest != null) {
                message.digest = data.digest;
            }
            if (data.global_sequence != null) {
                message.global_sequence = data.global_sequence;
            }
            if (data.auth_sequence != null) {
                message.auth_sequence = data.auth_sequence.map(item => AuthSequence.fromObject(item));
            }
            if (data.recv_sequence != null) {
                message.recv_sequence = data.recv_sequence;
            }
            if (data.code_sequence != null) {
                message.code_sequence = data.code_sequence;
            }
            if (data.abi_sequence != null) {
                message.abi_sequence = data.abi_sequence;
            }
            return message;
        }
        toObject() {
            const data: {
                receiver?: string;
                digest?: string;
                global_sequence?: string;
                auth_sequence?: ReturnType<typeof AuthSequence.prototype.toObject>[];
                recv_sequence?: string;
                code_sequence?: string;
                abi_sequence?: string;
            } = {};
            if (this.receiver != null) {
                data.receiver = this.receiver;
            }
            if (this.digest != null) {
                data.digest = this.digest;
            }
            if (this.global_sequence != null) {
                data.global_sequence = this.global_sequence;
            }
            if (this.auth_sequence != null) {
                data.auth_sequence = this.auth_sequence.map((item: AuthSequence) => item.toObject());
            }
            if (this.recv_sequence != null) {
                data.recv_sequence = this.recv_sequence;
            }
            if (this.code_sequence != null) {
                data.code_sequence = this.code_sequence;
            }
            if (this.abi_sequence != null) {
                data.abi_sequence = this.abi_sequence;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.receiver.length)
                writer.writeString(1, this.receiver);
            if (this.digest.length)
                writer.writeString(2, this.digest);
            if (this.global_sequence != "0")
                writer.writeUint64String(3, this.global_sequence);
            if (this.auth_sequence.length)
                writer.writeRepeatedMessage(4, this.auth_sequence, (item: AuthSequence) => item.serialize(writer));
            if (this.recv_sequence != "0")
                writer.writeUint64String(5, this.recv_sequence);
            if (this.code_sequence != "0")
                writer.writeUint64String(6, this.code_sequence);
            if (this.abi_sequence != "0")
                writer.writeUint64String(7, this.abi_sequence);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActionReceipt {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActionReceipt();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.receiver = reader.readString();
                        break;
                    case 2:
                        message.digest = reader.readString();
                        break;
                    case 3:
                        message.global_sequence = reader.readUint64String();
                        break;
                    case 4:
                        reader.readMessage(message.auth_sequence, () => pb_1.Message.addToRepeatedWrapperField(message, 4, AuthSequence.deserialize(reader), AuthSequence));
                        break;
                    case 5:
                        message.recv_sequence = reader.readUint64String();
                        break;
                    case 6:
                        message.code_sequence = reader.readUint64String();
                        break;
                    case 7:
                        message.abi_sequence = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActionReceipt {
            return ActionReceipt.deserialize(bytes);
        }
    }
    export class AuthSequence extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_name?: string;
            sequence?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_name" in data && data.account_name != undefined) {
                    this.account_name = data.account_name;
                }
                if ("sequence" in data && data.sequence != undefined) {
                    this.sequence = data.sequence;
                }
            }
        }
        get account_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set account_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get sequence() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set sequence(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            account_name?: string;
            sequence?: string;
        }): AuthSequence {
            const message = new AuthSequence({});
            if (data.account_name != null) {
                message.account_name = data.account_name;
            }
            if (data.sequence != null) {
                message.sequence = data.sequence;
            }
            return message;
        }
        toObject() {
            const data: {
                account_name?: string;
                sequence?: string;
            } = {};
            if (this.account_name != null) {
                data.account_name = this.account_name;
            }
            if (this.sequence != null) {
                data.sequence = this.sequence;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_name.length)
                writer.writeString(1, this.account_name);
            if (this.sequence != "0")
                writer.writeUint64String(2, this.sequence);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthSequence {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthSequence();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_name = reader.readString();
                        break;
                    case 2:
                        message.sequence = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthSequence {
            return AuthSequence.deserialize(bytes);
        }
    }
    export class AccountRAMDelta extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account?: string;
            delta?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("delta" in data && data.delta != undefined) {
                    this.delta = data.delta;
                }
            }
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get delta() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set delta(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            account?: string;
            delta?: number;
        }): AccountRAMDelta {
            const message = new AccountRAMDelta({});
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.delta != null) {
                message.delta = data.delta;
            }
            return message;
        }
        toObject() {
            const data: {
                account?: string;
                delta?: number;
            } = {};
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.delta != null) {
                data.delta = this.delta;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account.length)
                writer.writeString(1, this.account);
            if (this.delta != 0)
                writer.writeInt64(2, this.delta);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountRAMDelta {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountRAMDelta();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account = reader.readString();
                        break;
                    case 2:
                        message.delta = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountRAMDelta {
            return AccountRAMDelta.deserialize(bytes);
        }
    }
    export class AccountDelta extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account?: string;
            delta?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("delta" in data && data.delta != undefined) {
                    this.delta = data.delta;
                }
            }
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get delta() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set delta(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            account?: string;
            delta?: number;
        }): AccountDelta {
            const message = new AccountDelta({});
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.delta != null) {
                message.delta = data.delta;
            }
            return message;
        }
        toObject() {
            const data: {
                account?: string;
                delta?: number;
            } = {};
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.delta != null) {
                data.delta = this.delta;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account.length)
                writer.writeString(1, this.account);
            if (this.delta != 0)
                writer.writeInt64(2, this.delta);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountDelta {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountDelta();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account = reader.readString();
                        break;
                    case 2:
                        message.delta = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountDelta {
            return AccountDelta.deserialize(bytes);
        }
    }
    export class Extension extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: number;
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set type(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            type?: number;
            data?: Uint8Array;
        }): Extension {
            const message = new Extension({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: number;
                data?: Uint8Array;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != 0)
                writer.writeUint32(1, this.type);
            if (this.data.length)
                writer.writeBytes(2, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Extension {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Extension();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readUint32();
                        break;
                    case 2:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Extension {
            return Extension.deserialize(bytes);
        }
    }
    export class TrxOp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: TrxOp.Operation;
            name?: string;
            transaction_id?: string;
            transaction?: SignedTransaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("transaction_id" in data && data.transaction_id != undefined) {
                    this.transaction_id = data.transaction_id;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get operation() {
            return pb_1.Message.getFieldWithDefault(this, 1, TrxOp.Operation.OPERATION_UNKNOWN) as TrxOp.Operation;
        }
        set operation(value: TrxOp.Operation) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get transaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set transaction_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, SignedTransaction, 4) as SignedTransaction;
        }
        set transaction(value: SignedTransaction) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            operation?: TrxOp.Operation;
            name?: string;
            transaction_id?: string;
            transaction?: ReturnType<typeof SignedTransaction.prototype.toObject>;
        }): TrxOp {
            const message = new TrxOp({});
            if (data.operation != null) {
                message.operation = data.operation;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.transaction_id != null) {
                message.transaction_id = data.transaction_id;
            }
            if (data.transaction != null) {
                message.transaction = SignedTransaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: TrxOp.Operation;
                name?: string;
                transaction_id?: string;
                transaction?: ReturnType<typeof SignedTransaction.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.transaction_id != null) {
                data.transaction_id = this.transaction_id;
            }
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.operation != TrxOp.Operation.OPERATION_UNKNOWN)
                writer.writeEnum(1, this.operation);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.transaction_id.length)
                writer.writeString(3, this.transaction_id);
            if (this.has_transaction)
                writer.writeMessage(4, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrxOp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrxOp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.operation = reader.readEnum();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.transaction_id = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.transaction, () => message.transaction = SignedTransaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrxOp {
            return TrxOp.deserialize(bytes);
        }
    }
    export namespace TrxOp {
        export enum Operation {
            OPERATION_UNKNOWN = 0,
            OPERATION_CREATE = 1
        }
    }
    export class DBOp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: DBOp.Operation;
            action_index?: number;
            code?: string;
            scope?: string;
            table_name?: string;
            primary_key?: string;
            old_payer?: string;
            new_payer?: string;
            old_data?: Uint8Array;
            new_data?: Uint8Array;
            old_data_json?: string;
            new_data_json?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
                if ("action_index" in data && data.action_index != undefined) {
                    this.action_index = data.action_index;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("scope" in data && data.scope != undefined) {
                    this.scope = data.scope;
                }
                if ("table_name" in data && data.table_name != undefined) {
                    this.table_name = data.table_name;
                }
                if ("primary_key" in data && data.primary_key != undefined) {
                    this.primary_key = data.primary_key;
                }
                if ("old_payer" in data && data.old_payer != undefined) {
                    this.old_payer = data.old_payer;
                }
                if ("new_payer" in data && data.new_payer != undefined) {
                    this.new_payer = data.new_payer;
                }
                if ("old_data" in data && data.old_data != undefined) {
                    this.old_data = data.old_data;
                }
                if ("new_data" in data && data.new_data != undefined) {
                    this.new_data = data.new_data;
                }
                if ("old_data_json" in data && data.old_data_json != undefined) {
                    this.old_data_json = data.old_data_json;
                }
                if ("new_data_json" in data && data.new_data_json != undefined) {
                    this.new_data_json = data.new_data_json;
                }
            }
        }
        get operation() {
            return pb_1.Message.getFieldWithDefault(this, 1, DBOp.Operation.OPERATION_UNKNOWN) as DBOp.Operation;
        }
        set operation(value: DBOp.Operation) {
            pb_1.Message.setField(this, 1, value);
        }
        get action_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set action_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get scope() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set scope(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get table_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set table_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get primary_key() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set primary_key(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get old_payer() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set old_payer(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get new_payer() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set new_payer(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get old_data() {
            return pb_1.Message.getFieldWithDefault(this, 9, new Uint8Array(0)) as Uint8Array;
        }
        set old_data(value: Uint8Array) {
            pb_1.Message.setField(this, 9, value);
        }
        get new_data() {
            return pb_1.Message.getFieldWithDefault(this, 10, new Uint8Array(0)) as Uint8Array;
        }
        set new_data(value: Uint8Array) {
            pb_1.Message.setField(this, 10, value);
        }
        get old_data_json() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set old_data_json(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get new_data_json() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set new_data_json(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            operation?: DBOp.Operation;
            action_index?: number;
            code?: string;
            scope?: string;
            table_name?: string;
            primary_key?: string;
            old_payer?: string;
            new_payer?: string;
            old_data?: Uint8Array;
            new_data?: Uint8Array;
            old_data_json?: string;
            new_data_json?: string;
        }): DBOp {
            const message = new DBOp({});
            if (data.operation != null) {
                message.operation = data.operation;
            }
            if (data.action_index != null) {
                message.action_index = data.action_index;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.scope != null) {
                message.scope = data.scope;
            }
            if (data.table_name != null) {
                message.table_name = data.table_name;
            }
            if (data.primary_key != null) {
                message.primary_key = data.primary_key;
            }
            if (data.old_payer != null) {
                message.old_payer = data.old_payer;
            }
            if (data.new_payer != null) {
                message.new_payer = data.new_payer;
            }
            if (data.old_data != null) {
                message.old_data = data.old_data;
            }
            if (data.new_data != null) {
                message.new_data = data.new_data;
            }
            if (data.old_data_json != null) {
                message.old_data_json = data.old_data_json;
            }
            if (data.new_data_json != null) {
                message.new_data_json = data.new_data_json;
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: DBOp.Operation;
                action_index?: number;
                code?: string;
                scope?: string;
                table_name?: string;
                primary_key?: string;
                old_payer?: string;
                new_payer?: string;
                old_data?: Uint8Array;
                new_data?: Uint8Array;
                old_data_json?: string;
                new_data_json?: string;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation;
            }
            if (this.action_index != null) {
                data.action_index = this.action_index;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.scope != null) {
                data.scope = this.scope;
            }
            if (this.table_name != null) {
                data.table_name = this.table_name;
            }
            if (this.primary_key != null) {
                data.primary_key = this.primary_key;
            }
            if (this.old_payer != null) {
                data.old_payer = this.old_payer;
            }
            if (this.new_payer != null) {
                data.new_payer = this.new_payer;
            }
            if (this.old_data != null) {
                data.old_data = this.old_data;
            }
            if (this.new_data != null) {
                data.new_data = this.new_data;
            }
            if (this.old_data_json != null) {
                data.old_data_json = this.old_data_json;
            }
            if (this.new_data_json != null) {
                data.new_data_json = this.new_data_json;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.operation != DBOp.Operation.OPERATION_UNKNOWN)
                writer.writeEnum(1, this.operation);
            if (this.action_index != 0)
                writer.writeUint32(2, this.action_index);
            if (this.code.length)
                writer.writeString(3, this.code);
            if (this.scope.length)
                writer.writeString(4, this.scope);
            if (this.table_name.length)
                writer.writeString(5, this.table_name);
            if (this.primary_key.length)
                writer.writeString(6, this.primary_key);
            if (this.old_payer.length)
                writer.writeString(7, this.old_payer);
            if (this.new_payer.length)
                writer.writeString(8, this.new_payer);
            if (this.old_data.length)
                writer.writeBytes(9, this.old_data);
            if (this.new_data.length)
                writer.writeBytes(10, this.new_data);
            if (this.old_data_json.length)
                writer.writeString(11, this.old_data_json);
            if (this.new_data_json.length)
                writer.writeString(12, this.new_data_json);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DBOp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DBOp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.operation = reader.readEnum();
                        break;
                    case 2:
                        message.action_index = reader.readUint32();
                        break;
                    case 3:
                        message.code = reader.readString();
                        break;
                    case 4:
                        message.scope = reader.readString();
                        break;
                    case 5:
                        message.table_name = reader.readString();
                        break;
                    case 6:
                        message.primary_key = reader.readString();
                        break;
                    case 7:
                        message.old_payer = reader.readString();
                        break;
                    case 8:
                        message.new_payer = reader.readString();
                        break;
                    case 9:
                        message.old_data = reader.readBytes();
                        break;
                    case 10:
                        message.new_data = reader.readBytes();
                        break;
                    case 11:
                        message.old_data_json = reader.readString();
                        break;
                    case 12:
                        message.new_data_json = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DBOp {
            return DBOp.deserialize(bytes);
        }
    }
    export namespace DBOp {
        export enum Operation {
            OPERATION_UNKNOWN = 0,
            OPERATION_INSERT = 1,
            OPERATION_UPDATE = 2,
            OPERATION_REMOVE = 3
        }
    }
    export class RAMOp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: RAMOp.Operation;
            action_index?: number;
            payer?: string;
            delta?: number;
            usage?: string;
            namespace?: RAMOp.Namespace;
            action?: RAMOp.Action;
            unique_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
                if ("action_index" in data && data.action_index != undefined) {
                    this.action_index = data.action_index;
                }
                if ("payer" in data && data.payer != undefined) {
                    this.payer = data.payer;
                }
                if ("delta" in data && data.delta != undefined) {
                    this.delta = data.delta;
                }
                if ("usage" in data && data.usage != undefined) {
                    this.usage = data.usage;
                }
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("action" in data && data.action != undefined) {
                    this.action = data.action;
                }
                if ("unique_key" in data && data.unique_key != undefined) {
                    this.unique_key = data.unique_key;
                }
            }
        }
        get operation() {
            return pb_1.Message.getFieldWithDefault(this, 1, RAMOp.Operation.OPERATION_UNKNOWN) as RAMOp.Operation;
        }
        set operation(value: RAMOp.Operation) {
            pb_1.Message.setField(this, 1, value);
        }
        get action_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set action_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get payer() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set payer(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get delta() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set delta(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get usage() {
            return pb_1.Message.getFieldWithDefault(this, 5, "0") as string;
        }
        set usage(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 6, RAMOp.Namespace.NAMESPACE_UNKNOWN) as RAMOp.Namespace;
        }
        set namespace(value: RAMOp.Namespace) {
            pb_1.Message.setField(this, 6, value);
        }
        get action() {
            return pb_1.Message.getFieldWithDefault(this, 7, RAMOp.Action.ACTION_UNKNOWN) as RAMOp.Action;
        }
        set action(value: RAMOp.Action) {
            pb_1.Message.setField(this, 7, value);
        }
        get unique_key() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set unique_key(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            operation?: RAMOp.Operation;
            action_index?: number;
            payer?: string;
            delta?: number;
            usage?: string;
            namespace?: RAMOp.Namespace;
            action?: RAMOp.Action;
            unique_key?: string;
        }): RAMOp {
            const message = new RAMOp({});
            if (data.operation != null) {
                message.operation = data.operation;
            }
            if (data.action_index != null) {
                message.action_index = data.action_index;
            }
            if (data.payer != null) {
                message.payer = data.payer;
            }
            if (data.delta != null) {
                message.delta = data.delta;
            }
            if (data.usage != null) {
                message.usage = data.usage;
            }
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.action != null) {
                message.action = data.action;
            }
            if (data.unique_key != null) {
                message.unique_key = data.unique_key;
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: RAMOp.Operation;
                action_index?: number;
                payer?: string;
                delta?: number;
                usage?: string;
                namespace?: RAMOp.Namespace;
                action?: RAMOp.Action;
                unique_key?: string;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation;
            }
            if (this.action_index != null) {
                data.action_index = this.action_index;
            }
            if (this.payer != null) {
                data.payer = this.payer;
            }
            if (this.delta != null) {
                data.delta = this.delta;
            }
            if (this.usage != null) {
                data.usage = this.usage;
            }
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.action != null) {
                data.action = this.action;
            }
            if (this.unique_key != null) {
                data.unique_key = this.unique_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.operation != RAMOp.Operation.OPERATION_UNKNOWN)
                writer.writeEnum(1, this.operation);
            if (this.action_index != 0)
                writer.writeUint32(2, this.action_index);
            if (this.payer.length)
                writer.writeString(3, this.payer);
            if (this.delta != 0)
                writer.writeInt64(4, this.delta);
            if (this.usage != "0")
                writer.writeUint64String(5, this.usage);
            if (this.namespace != RAMOp.Namespace.NAMESPACE_UNKNOWN)
                writer.writeEnum(6, this.namespace);
            if (this.action != RAMOp.Action.ACTION_UNKNOWN)
                writer.writeEnum(7, this.action);
            if (this.unique_key.length)
                writer.writeString(8, this.unique_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RAMOp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RAMOp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.operation = reader.readEnum();
                        break;
                    case 2:
                        message.action_index = reader.readUint32();
                        break;
                    case 3:
                        message.payer = reader.readString();
                        break;
                    case 4:
                        message.delta = reader.readInt64();
                        break;
                    case 5:
                        message.usage = reader.readUint64String();
                        break;
                    case 6:
                        message.namespace = reader.readEnum();
                        break;
                    case 7:
                        message.action = reader.readEnum();
                        break;
                    case 8:
                        message.unique_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RAMOp {
            return RAMOp.deserialize(bytes);
        }
    }
    export namespace RAMOp {
        export enum Operation {
            OPERATION_UNKNOWN = 0,
            OPERATION_CREATE_TABLE = 1,
            OPERATION_DEFERRED_TRX_ADD = 2,
            OPERATION_DEFERRED_TRX_CANCEL = 3,
            OPERATION_DEFERRED_TRX_PUSHED = 4,
            OPERATION_DEFERRED_TRX_RAM_CORRECTION = 5,
            OPERATION_DEFERRED_TRX_REMOVED = 6,
            OPERATION_DELETEAUTH = 7,
            OPERATION_LINKAUTH = 8,
            OPERATION_NEWACCOUNT = 9,
            OPERATION_PRIMARY_INDEX_ADD = 10,
            OPERATION_PRIMARY_INDEX_REMOVE = 11,
            OPERATION_PRIMARY_INDEX_UPDATE = 12,
            OPERATION_PRIMARY_INDEX_UPDATE_ADD_NEW_PAYER = 13,
            OPERATION_PRIMARY_INDEX_UPDATE_REMOVE_OLD_PAYER = 14,
            OPERATION_REMOVE_TABLE = 15,
            OPERATION_SECONDARY_INDEX_ADD = 16,
            OPERATION_SECONDARY_INDEX_REMOVE = 17,
            OPERATION_SECONDARY_INDEX_UPDATE_ADD_NEW_PAYER = 18,
            OPERATION_SECONDARY_INDEX_UPDATE_REMOVE_OLD_PAYER = 19,
            OPERATION_SETABI = 20,
            OPERATION_SETCODE = 21,
            OPERATION_UNLINKAUTH = 22,
            OPERATION_UPDATEAUTH_CREATE = 23,
            OPERATION_UPDATEAUTH_UPDATE = 24,
            OPERATION_DEPRECATED = 25
        }
        export enum Namespace {
            NAMESPACE_UNKNOWN = 0,
            NAMESPACE_ABI = 1,
            NAMESPACE_ACCOUNT = 2,
            NAMESPACE_AUTH = 3,
            NAMESPACE_AUTH_LINK = 4,
            NAMESPACE_CODE = 5,
            NAMESPACE_DEFERRED_TRX = 6,
            NAMESPACE_SECONDARY_INDEX = 7,
            NAMESPACE_TABLE = 8,
            NAMESPACE_TABLE_ROW = 9
        }
        export enum Action {
            ACTION_UNKNOWN = 0,
            ACTION_ADD = 1,
            ACTION_CANCEL = 2,
            ACTION_CORRECTION = 3,
            ACTION_PUSH = 4,
            ACTION_REMOVE = 5,
            ACTION_UPDATE = 6
        }
    }
    export class RAMCorrectionOp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            correction_id?: string;
            unique_key?: string;
            payer?: string;
            delta?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("correction_id" in data && data.correction_id != undefined) {
                    this.correction_id = data.correction_id;
                }
                if ("unique_key" in data && data.unique_key != undefined) {
                    this.unique_key = data.unique_key;
                }
                if ("payer" in data && data.payer != undefined) {
                    this.payer = data.payer;
                }
                if ("delta" in data && data.delta != undefined) {
                    this.delta = data.delta;
                }
            }
        }
        get correction_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set correction_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get unique_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set unique_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get payer() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set payer(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get delta() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set delta(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            correction_id?: string;
            unique_key?: string;
            payer?: string;
            delta?: number;
        }): RAMCorrectionOp {
            const message = new RAMCorrectionOp({});
            if (data.correction_id != null) {
                message.correction_id = data.correction_id;
            }
            if (data.unique_key != null) {
                message.unique_key = data.unique_key;
            }
            if (data.payer != null) {
                message.payer = data.payer;
            }
            if (data.delta != null) {
                message.delta = data.delta;
            }
            return message;
        }
        toObject() {
            const data: {
                correction_id?: string;
                unique_key?: string;
                payer?: string;
                delta?: number;
            } = {};
            if (this.correction_id != null) {
                data.correction_id = this.correction_id;
            }
            if (this.unique_key != null) {
                data.unique_key = this.unique_key;
            }
            if (this.payer != null) {
                data.payer = this.payer;
            }
            if (this.delta != null) {
                data.delta = this.delta;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.correction_id.length)
                writer.writeString(1, this.correction_id);
            if (this.unique_key.length)
                writer.writeString(2, this.unique_key);
            if (this.payer.length)
                writer.writeString(3, this.payer);
            if (this.delta != 0)
                writer.writeInt64(4, this.delta);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RAMCorrectionOp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RAMCorrectionOp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.correction_id = reader.readString();
                        break;
                    case 2:
                        message.unique_key = reader.readString();
                        break;
                    case 3:
                        message.payer = reader.readString();
                        break;
                    case 4:
                        message.delta = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RAMCorrectionOp {
            return RAMCorrectionOp.deserialize(bytes);
        }
    }
    export class TableOp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: TableOp.Operation;
            action_index?: number;
            payer?: string;
            code?: string;
            scope?: string;
            table_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
                if ("action_index" in data && data.action_index != undefined) {
                    this.action_index = data.action_index;
                }
                if ("payer" in data && data.payer != undefined) {
                    this.payer = data.payer;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("scope" in data && data.scope != undefined) {
                    this.scope = data.scope;
                }
                if ("table_name" in data && data.table_name != undefined) {
                    this.table_name = data.table_name;
                }
            }
        }
        get operation() {
            return pb_1.Message.getFieldWithDefault(this, 1, TableOp.Operation.OPERATION_UNKNOWN) as TableOp.Operation;
        }
        set operation(value: TableOp.Operation) {
            pb_1.Message.setField(this, 1, value);
        }
        get action_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set action_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get payer() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set payer(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get scope() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set scope(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get table_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set table_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            operation?: TableOp.Operation;
            action_index?: number;
            payer?: string;
            code?: string;
            scope?: string;
            table_name?: string;
        }): TableOp {
            const message = new TableOp({});
            if (data.operation != null) {
                message.operation = data.operation;
            }
            if (data.action_index != null) {
                message.action_index = data.action_index;
            }
            if (data.payer != null) {
                message.payer = data.payer;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.scope != null) {
                message.scope = data.scope;
            }
            if (data.table_name != null) {
                message.table_name = data.table_name;
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: TableOp.Operation;
                action_index?: number;
                payer?: string;
                code?: string;
                scope?: string;
                table_name?: string;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation;
            }
            if (this.action_index != null) {
                data.action_index = this.action_index;
            }
            if (this.payer != null) {
                data.payer = this.payer;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.scope != null) {
                data.scope = this.scope;
            }
            if (this.table_name != null) {
                data.table_name = this.table_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.operation != TableOp.Operation.OPERATION_UNKNOWN)
                writer.writeEnum(1, this.operation);
            if (this.action_index != 0)
                writer.writeUint32(2, this.action_index);
            if (this.payer.length)
                writer.writeString(3, this.payer);
            if (this.code.length)
                writer.writeString(4, this.code);
            if (this.scope.length)
                writer.writeString(5, this.scope);
            if (this.table_name.length)
                writer.writeString(6, this.table_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TableOp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TableOp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.operation = reader.readEnum();
                        break;
                    case 2:
                        message.action_index = reader.readUint32();
                        break;
                    case 3:
                        message.payer = reader.readString();
                        break;
                    case 4:
                        message.code = reader.readString();
                        break;
                    case 5:
                        message.scope = reader.readString();
                        break;
                    case 6:
                        message.table_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TableOp {
            return TableOp.deserialize(bytes);
        }
    }
    export namespace TableOp {
        export enum Operation {
            OPERATION_UNKNOWN = 0,
            OPERATION_INSERT = 1,
            OPERATION_REMOVE = 2
        }
    }
    export class DTrxOp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: DTrxOp.Operation;
            action_index?: number;
            sender?: string;
            sender_id?: string;
            payer?: string;
            published_at?: string;
            delay_until?: string;
            expiration_at?: string;
            transaction_id?: string;
            transaction?: SignedTransaction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
                if ("action_index" in data && data.action_index != undefined) {
                    this.action_index = data.action_index;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("sender_id" in data && data.sender_id != undefined) {
                    this.sender_id = data.sender_id;
                }
                if ("payer" in data && data.payer != undefined) {
                    this.payer = data.payer;
                }
                if ("published_at" in data && data.published_at != undefined) {
                    this.published_at = data.published_at;
                }
                if ("delay_until" in data && data.delay_until != undefined) {
                    this.delay_until = data.delay_until;
                }
                if ("expiration_at" in data && data.expiration_at != undefined) {
                    this.expiration_at = data.expiration_at;
                }
                if ("transaction_id" in data && data.transaction_id != undefined) {
                    this.transaction_id = data.transaction_id;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get operation() {
            return pb_1.Message.getFieldWithDefault(this, 1, DTrxOp.Operation.OPERATION_UNKNOWN) as DTrxOp.Operation;
        }
        set operation(value: DTrxOp.Operation) {
            pb_1.Message.setField(this, 1, value);
        }
        get action_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set action_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get sender_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set sender_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get payer() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set payer(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get published_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set published_at(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get delay_until() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set delay_until(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get expiration_at() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set expiration_at(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get transaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set transaction_id(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, SignedTransaction, 10) as SignedTransaction;
        }
        set transaction(value: SignedTransaction) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 10) != null;
        }
        static fromObject(data: {
            operation?: DTrxOp.Operation;
            action_index?: number;
            sender?: string;
            sender_id?: string;
            payer?: string;
            published_at?: string;
            delay_until?: string;
            expiration_at?: string;
            transaction_id?: string;
            transaction?: ReturnType<typeof SignedTransaction.prototype.toObject>;
        }): DTrxOp {
            const message = new DTrxOp({});
            if (data.operation != null) {
                message.operation = data.operation;
            }
            if (data.action_index != null) {
                message.action_index = data.action_index;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.sender_id != null) {
                message.sender_id = data.sender_id;
            }
            if (data.payer != null) {
                message.payer = data.payer;
            }
            if (data.published_at != null) {
                message.published_at = data.published_at;
            }
            if (data.delay_until != null) {
                message.delay_until = data.delay_until;
            }
            if (data.expiration_at != null) {
                message.expiration_at = data.expiration_at;
            }
            if (data.transaction_id != null) {
                message.transaction_id = data.transaction_id;
            }
            if (data.transaction != null) {
                message.transaction = SignedTransaction.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: DTrxOp.Operation;
                action_index?: number;
                sender?: string;
                sender_id?: string;
                payer?: string;
                published_at?: string;
                delay_until?: string;
                expiration_at?: string;
                transaction_id?: string;
                transaction?: ReturnType<typeof SignedTransaction.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation;
            }
            if (this.action_index != null) {
                data.action_index = this.action_index;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.sender_id != null) {
                data.sender_id = this.sender_id;
            }
            if (this.payer != null) {
                data.payer = this.payer;
            }
            if (this.published_at != null) {
                data.published_at = this.published_at;
            }
            if (this.delay_until != null) {
                data.delay_until = this.delay_until;
            }
            if (this.expiration_at != null) {
                data.expiration_at = this.expiration_at;
            }
            if (this.transaction_id != null) {
                data.transaction_id = this.transaction_id;
            }
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.operation != DTrxOp.Operation.OPERATION_UNKNOWN)
                writer.writeEnum(1, this.operation);
            if (this.action_index != 0)
                writer.writeUint32(2, this.action_index);
            if (this.sender.length)
                writer.writeString(3, this.sender);
            if (this.sender_id.length)
                writer.writeString(4, this.sender_id);
            if (this.payer.length)
                writer.writeString(5, this.payer);
            if (this.published_at.length)
                writer.writeString(6, this.published_at);
            if (this.delay_until.length)
                writer.writeString(7, this.delay_until);
            if (this.expiration_at.length)
                writer.writeString(8, this.expiration_at);
            if (this.transaction_id.length)
                writer.writeString(9, this.transaction_id);
            if (this.has_transaction)
                writer.writeMessage(10, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DTrxOp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DTrxOp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.operation = reader.readEnum();
                        break;
                    case 2:
                        message.action_index = reader.readUint32();
                        break;
                    case 3:
                        message.sender = reader.readString();
                        break;
                    case 4:
                        message.sender_id = reader.readString();
                        break;
                    case 5:
                        message.payer = reader.readString();
                        break;
                    case 6:
                        message.published_at = reader.readString();
                        break;
                    case 7:
                        message.delay_until = reader.readString();
                        break;
                    case 8:
                        message.expiration_at = reader.readString();
                        break;
                    case 9:
                        message.transaction_id = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.transaction, () => message.transaction = SignedTransaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DTrxOp {
            return DTrxOp.deserialize(bytes);
        }
    }
    export namespace DTrxOp {
        export enum Operation {
            OPERATION_UNKNOWN = 0,
            OPERATION_CREATE = 1,
            OPERATION_PUSH_CREATE = 2,
            OPERATION_FAILED = 3,
            OPERATION_CANCEL = 4,
            OPERATION_MODIFY_CANCEL = 5,
            OPERATION_MODIFY_CREATE = 6
        }
    }
    export class ExtDTrxOp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source_transaction_id?: string;
            block_num?: string;
            block_id?: string;
            block_time?: dependency_1.google.protobuf.Timestamp;
            dtrx_op?: DTrxOp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source_transaction_id" in data && data.source_transaction_id != undefined) {
                    this.source_transaction_id = data.source_transaction_id;
                }
                if ("block_num" in data && data.block_num != undefined) {
                    this.block_num = data.block_num;
                }
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("block_time" in data && data.block_time != undefined) {
                    this.block_time = data.block_time;
                }
                if ("dtrx_op" in data && data.dtrx_op != undefined) {
                    this.dtrx_op = data.dtrx_op;
                }
            }
        }
        get source_transaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set source_transaction_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get block_num() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set block_num(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get block_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set block_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get block_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set block_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_block_time() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get dtrx_op() {
            return pb_1.Message.getWrapperField(this, DTrxOp, 5) as DTrxOp;
        }
        set dtrx_op(value: DTrxOp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_dtrx_op() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            source_transaction_id?: string;
            block_num?: string;
            block_id?: string;
            block_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            dtrx_op?: ReturnType<typeof DTrxOp.prototype.toObject>;
        }): ExtDTrxOp {
            const message = new ExtDTrxOp({});
            if (data.source_transaction_id != null) {
                message.source_transaction_id = data.source_transaction_id;
            }
            if (data.block_num != null) {
                message.block_num = data.block_num;
            }
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            if (data.block_time != null) {
                message.block_time = dependency_1.google.protobuf.Timestamp.fromObject(data.block_time);
            }
            if (data.dtrx_op != null) {
                message.dtrx_op = DTrxOp.fromObject(data.dtrx_op);
            }
            return message;
        }
        toObject() {
            const data: {
                source_transaction_id?: string;
                block_num?: string;
                block_id?: string;
                block_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                dtrx_op?: ReturnType<typeof DTrxOp.prototype.toObject>;
            } = {};
            if (this.source_transaction_id != null) {
                data.source_transaction_id = this.source_transaction_id;
            }
            if (this.block_num != null) {
                data.block_num = this.block_num;
            }
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            if (this.block_time != null) {
                data.block_time = this.block_time.toObject();
            }
            if (this.dtrx_op != null) {
                data.dtrx_op = this.dtrx_op.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.source_transaction_id.length)
                writer.writeString(1, this.source_transaction_id);
            if (this.block_num != "0")
                writer.writeUint64String(2, this.block_num);
            if (this.block_id.length)
                writer.writeString(3, this.block_id);
            if (this.has_block_time)
                writer.writeMessage(4, this.block_time, () => this.block_time.serialize(writer));
            if (this.has_dtrx_op)
                writer.writeMessage(5, this.dtrx_op, () => this.dtrx_op.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExtDTrxOp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExtDTrxOp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.source_transaction_id = reader.readString();
                        break;
                    case 2:
                        message.block_num = reader.readUint64String();
                        break;
                    case 3:
                        message.block_id = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.block_time, () => message.block_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.dtrx_op, () => message.dtrx_op = DTrxOp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExtDTrxOp {
            return ExtDTrxOp.deserialize(bytes);
        }
    }
    export class FeatureOp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            kind?: string;
            action_index?: number;
            feature_digest?: string;
            feature?: Feature;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("kind" in data && data.kind != undefined) {
                    this.kind = data.kind;
                }
                if ("action_index" in data && data.action_index != undefined) {
                    this.action_index = data.action_index;
                }
                if ("feature_digest" in data && data.feature_digest != undefined) {
                    this.feature_digest = data.feature_digest;
                }
                if ("feature" in data && data.feature != undefined) {
                    this.feature = data.feature;
                }
            }
        }
        get kind() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set kind(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get action_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set action_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get feature_digest() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set feature_digest(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get feature() {
            return pb_1.Message.getWrapperField(this, Feature, 4) as Feature;
        }
        set feature(value: Feature) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_feature() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            kind?: string;
            action_index?: number;
            feature_digest?: string;
            feature?: ReturnType<typeof Feature.prototype.toObject>;
        }): FeatureOp {
            const message = new FeatureOp({});
            if (data.kind != null) {
                message.kind = data.kind;
            }
            if (data.action_index != null) {
                message.action_index = data.action_index;
            }
            if (data.feature_digest != null) {
                message.feature_digest = data.feature_digest;
            }
            if (data.feature != null) {
                message.feature = Feature.fromObject(data.feature);
            }
            return message;
        }
        toObject() {
            const data: {
                kind?: string;
                action_index?: number;
                feature_digest?: string;
                feature?: ReturnType<typeof Feature.prototype.toObject>;
            } = {};
            if (this.kind != null) {
                data.kind = this.kind;
            }
            if (this.action_index != null) {
                data.action_index = this.action_index;
            }
            if (this.feature_digest != null) {
                data.feature_digest = this.feature_digest;
            }
            if (this.feature != null) {
                data.feature = this.feature.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.kind.length)
                writer.writeString(1, this.kind);
            if (this.action_index != 0)
                writer.writeUint32(2, this.action_index);
            if (this.feature_digest.length)
                writer.writeString(3, this.feature_digest);
            if (this.has_feature)
                writer.writeMessage(4, this.feature, () => this.feature.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FeatureOp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FeatureOp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.kind = reader.readString();
                        break;
                    case 2:
                        message.action_index = reader.readUint32();
                        break;
                    case 3:
                        message.feature_digest = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.feature, () => message.feature = Feature.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FeatureOp {
            return FeatureOp.deserialize(bytes);
        }
    }
    export namespace FeatureOp {
        export enum Kind {
            KIND_UNKNOWN = 0,
            KIND_PRE_ACTIVATE = 1,
            KIND_ACTIVATE = 2
        }
    }
    export class CreationFlatNode extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator_action_index?: number;
            execution_action_index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator_action_index" in data && data.creator_action_index != undefined) {
                    this.creator_action_index = data.creator_action_index;
                }
                if ("execution_action_index" in data && data.execution_action_index != undefined) {
                    this.execution_action_index = data.execution_action_index;
                }
            }
        }
        get creator_action_index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set creator_action_index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get execution_action_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set execution_action_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            creator_action_index?: number;
            execution_action_index?: number;
        }): CreationFlatNode {
            const message = new CreationFlatNode({});
            if (data.creator_action_index != null) {
                message.creator_action_index = data.creator_action_index;
            }
            if (data.execution_action_index != null) {
                message.execution_action_index = data.execution_action_index;
            }
            return message;
        }
        toObject() {
            const data: {
                creator_action_index?: number;
                execution_action_index?: number;
            } = {};
            if (this.creator_action_index != null) {
                data.creator_action_index = this.creator_action_index;
            }
            if (this.execution_action_index != null) {
                data.execution_action_index = this.execution_action_index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator_action_index != 0)
                writer.writeInt32(1, this.creator_action_index);
            if (this.execution_action_index != 0)
                writer.writeUint32(2, this.execution_action_index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreationFlatNode {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreationFlatNode();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator_action_index = reader.readInt32();
                        break;
                    case 2:
                        message.execution_action_index = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreationFlatNode {
            return CreationFlatNode.deserialize(bytes);
        }
    }
    export class PermOp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: PermOp.Operation;
            action_index?: number;
            old_perm?: PermissionObject;
            new_perm?: PermissionObject;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
                if ("action_index" in data && data.action_index != undefined) {
                    this.action_index = data.action_index;
                }
                if ("old_perm" in data && data.old_perm != undefined) {
                    this.old_perm = data.old_perm;
                }
                if ("new_perm" in data && data.new_perm != undefined) {
                    this.new_perm = data.new_perm;
                }
            }
        }
        get operation() {
            return pb_1.Message.getFieldWithDefault(this, 1, PermOp.Operation.OPERATION_UNKNOWN) as PermOp.Operation;
        }
        set operation(value: PermOp.Operation) {
            pb_1.Message.setField(this, 1, value);
        }
        get action_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set action_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get old_perm() {
            return pb_1.Message.getWrapperField(this, PermissionObject, 8) as PermissionObject;
        }
        set old_perm(value: PermissionObject) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_old_perm() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get new_perm() {
            return pb_1.Message.getWrapperField(this, PermissionObject, 9) as PermissionObject;
        }
        set new_perm(value: PermissionObject) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_new_perm() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            operation?: PermOp.Operation;
            action_index?: number;
            old_perm?: ReturnType<typeof PermissionObject.prototype.toObject>;
            new_perm?: ReturnType<typeof PermissionObject.prototype.toObject>;
        }): PermOp {
            const message = new PermOp({});
            if (data.operation != null) {
                message.operation = data.operation;
            }
            if (data.action_index != null) {
                message.action_index = data.action_index;
            }
            if (data.old_perm != null) {
                message.old_perm = PermissionObject.fromObject(data.old_perm);
            }
            if (data.new_perm != null) {
                message.new_perm = PermissionObject.fromObject(data.new_perm);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: PermOp.Operation;
                action_index?: number;
                old_perm?: ReturnType<typeof PermissionObject.prototype.toObject>;
                new_perm?: ReturnType<typeof PermissionObject.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation;
            }
            if (this.action_index != null) {
                data.action_index = this.action_index;
            }
            if (this.old_perm != null) {
                data.old_perm = this.old_perm.toObject();
            }
            if (this.new_perm != null) {
                data.new_perm = this.new_perm.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.operation != PermOp.Operation.OPERATION_UNKNOWN)
                writer.writeEnum(1, this.operation);
            if (this.action_index != 0)
                writer.writeUint32(2, this.action_index);
            if (this.has_old_perm)
                writer.writeMessage(8, this.old_perm, () => this.old_perm.serialize(writer));
            if (this.has_new_perm)
                writer.writeMessage(9, this.new_perm, () => this.new_perm.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PermOp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PermOp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.operation = reader.readEnum();
                        break;
                    case 2:
                        message.action_index = reader.readUint32();
                        break;
                    case 8:
                        reader.readMessage(message.old_perm, () => message.old_perm = PermissionObject.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.new_perm, () => message.new_perm = PermissionObject.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PermOp {
            return PermOp.deserialize(bytes);
        }
    }
    export namespace PermOp {
        export enum Operation {
            OPERATION_UNKNOWN = 0,
            OPERATION_INSERT = 1,
            OPERATION_UPDATE = 2,
            OPERATION_REMOVE = 3
        }
    }
    export class PermissionObject extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            parent_id?: string;
            owner?: string;
            name?: string;
            last_updated?: dependency_1.google.protobuf.Timestamp;
            authority?: Authority;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("parent_id" in data && data.parent_id != undefined) {
                    this.parent_id = data.parent_id;
                }
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("last_updated" in data && data.last_updated != undefined) {
                    this.last_updated = data.last_updated;
                }
                if ("authority" in data && data.authority != undefined) {
                    this.authority = data.authority;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 10, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get parent_id() {
            return pb_1.Message.getFieldWithDefault(this, 11, "0") as string;
        }
        set parent_id(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get last_updated() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
        }
        set last_updated(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_last_updated() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get authority() {
            return pb_1.Message.getWrapperField(this, Authority, 4) as Authority;
        }
        set authority(value: Authority) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_authority() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            id?: string;
            parent_id?: string;
            owner?: string;
            name?: string;
            last_updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            authority?: ReturnType<typeof Authority.prototype.toObject>;
        }): PermissionObject {
            const message = new PermissionObject({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.parent_id != null) {
                message.parent_id = data.parent_id;
            }
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.last_updated != null) {
                message.last_updated = dependency_1.google.protobuf.Timestamp.fromObject(data.last_updated);
            }
            if (data.authority != null) {
                message.authority = Authority.fromObject(data.authority);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                parent_id?: string;
                owner?: string;
                name?: string;
                last_updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                authority?: ReturnType<typeof Authority.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.parent_id != null) {
                data.parent_id = this.parent_id;
            }
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.last_updated != null) {
                data.last_updated = this.last_updated.toObject();
            }
            if (this.authority != null) {
                data.authority = this.authority.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(10, this.id);
            if (this.parent_id != "0")
                writer.writeUint64String(11, this.parent_id);
            if (this.owner.length)
                writer.writeString(1, this.owner);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_last_updated)
                writer.writeMessage(3, this.last_updated, () => this.last_updated.serialize(writer));
            if (this.has_authority)
                writer.writeMessage(4, this.authority, () => this.authority.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PermissionObject {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PermissionObject();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 10:
                        message.id = reader.readUint64String();
                        break;
                    case 11:
                        message.parent_id = reader.readUint64String();
                        break;
                    case 1:
                        message.owner = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.last_updated, () => message.last_updated = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.authority, () => message.authority = Authority.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PermissionObject {
            return PermissionObject.deserialize(bytes);
        }
    }
    export class Permission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            parent?: string;
            required_auth?: Authority;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("parent" in data && data.parent != undefined) {
                    this.parent = data.parent;
                }
                if ("required_auth" in data && data.required_auth != undefined) {
                    this.required_auth = data.required_auth;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get parent() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set parent(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get required_auth() {
            return pb_1.Message.getWrapperField(this, Authority, 3) as Authority;
        }
        set required_auth(value: Authority) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_required_auth() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            name?: string;
            parent?: string;
            required_auth?: ReturnType<typeof Authority.prototype.toObject>;
        }): Permission {
            const message = new Permission({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.parent != null) {
                message.parent = data.parent;
            }
            if (data.required_auth != null) {
                message.required_auth = Authority.fromObject(data.required_auth);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                parent?: string;
                required_auth?: ReturnType<typeof Authority.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.parent != null) {
                data.parent = this.parent;
            }
            if (this.required_auth != null) {
                data.required_auth = this.required_auth.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.parent.length)
                writer.writeString(2, this.parent);
            if (this.has_required_auth)
                writer.writeMessage(3, this.required_auth, () => this.required_auth.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Permission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Permission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.parent = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.required_auth, () => message.required_auth = Authority.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Permission {
            return Permission.deserialize(bytes);
        }
    }
    export class Authority extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            threshold?: number;
            keys?: KeyWeight[];
            accounts?: PermissionLevelWeight[];
            waits?: WaitWeight[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("threshold" in data && data.threshold != undefined) {
                    this.threshold = data.threshold;
                }
                if ("keys" in data && data.keys != undefined) {
                    this.keys = data.keys;
                }
                if ("accounts" in data && data.accounts != undefined) {
                    this.accounts = data.accounts;
                }
                if ("waits" in data && data.waits != undefined) {
                    this.waits = data.waits;
                }
            }
        }
        get threshold() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set threshold(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get keys() {
            return pb_1.Message.getRepeatedWrapperField(this, KeyWeight, 2) as KeyWeight[];
        }
        set keys(value: KeyWeight[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get accounts() {
            return pb_1.Message.getRepeatedWrapperField(this, PermissionLevelWeight, 3) as PermissionLevelWeight[];
        }
        set accounts(value: PermissionLevelWeight[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get waits() {
            return pb_1.Message.getRepeatedWrapperField(this, WaitWeight, 4) as WaitWeight[];
        }
        set waits(value: WaitWeight[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            threshold?: number;
            keys?: ReturnType<typeof KeyWeight.prototype.toObject>[];
            accounts?: ReturnType<typeof PermissionLevelWeight.prototype.toObject>[];
            waits?: ReturnType<typeof WaitWeight.prototype.toObject>[];
        }): Authority {
            const message = new Authority({});
            if (data.threshold != null) {
                message.threshold = data.threshold;
            }
            if (data.keys != null) {
                message.keys = data.keys.map(item => KeyWeight.fromObject(item));
            }
            if (data.accounts != null) {
                message.accounts = data.accounts.map(item => PermissionLevelWeight.fromObject(item));
            }
            if (data.waits != null) {
                message.waits = data.waits.map(item => WaitWeight.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                threshold?: number;
                keys?: ReturnType<typeof KeyWeight.prototype.toObject>[];
                accounts?: ReturnType<typeof PermissionLevelWeight.prototype.toObject>[];
                waits?: ReturnType<typeof WaitWeight.prototype.toObject>[];
            } = {};
            if (this.threshold != null) {
                data.threshold = this.threshold;
            }
            if (this.keys != null) {
                data.keys = this.keys.map((item: KeyWeight) => item.toObject());
            }
            if (this.accounts != null) {
                data.accounts = this.accounts.map((item: PermissionLevelWeight) => item.toObject());
            }
            if (this.waits != null) {
                data.waits = this.waits.map((item: WaitWeight) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.threshold != 0)
                writer.writeUint32(1, this.threshold);
            if (this.keys.length)
                writer.writeRepeatedMessage(2, this.keys, (item: KeyWeight) => item.serialize(writer));
            if (this.accounts.length)
                writer.writeRepeatedMessage(3, this.accounts, (item: PermissionLevelWeight) => item.serialize(writer));
            if (this.waits.length)
                writer.writeRepeatedMessage(4, this.waits, (item: WaitWeight) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Authority {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Authority();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.threshold = reader.readUint32();
                        break;
                    case 2:
                        reader.readMessage(message.keys, () => pb_1.Message.addToRepeatedWrapperField(message, 2, KeyWeight.deserialize(reader), KeyWeight));
                        break;
                    case 3:
                        reader.readMessage(message.accounts, () => pb_1.Message.addToRepeatedWrapperField(message, 3, PermissionLevelWeight.deserialize(reader), PermissionLevelWeight));
                        break;
                    case 4:
                        reader.readMessage(message.waits, () => pb_1.Message.addToRepeatedWrapperField(message, 4, WaitWeight.deserialize(reader), WaitWeight));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Authority {
            return Authority.deserialize(bytes);
        }
    }
    export class KeyWeight extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            public_key?: string;
            weight?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("public_key" in data && data.public_key != undefined) {
                    this.public_key = data.public_key;
                }
                if ("weight" in data && data.weight != undefined) {
                    this.weight = data.weight;
                }
            }
        }
        get public_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set public_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get weight() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set weight(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            public_key?: string;
            weight?: number;
        }): KeyWeight {
            const message = new KeyWeight({});
            if (data.public_key != null) {
                message.public_key = data.public_key;
            }
            if (data.weight != null) {
                message.weight = data.weight;
            }
            return message;
        }
        toObject() {
            const data: {
                public_key?: string;
                weight?: number;
            } = {};
            if (this.public_key != null) {
                data.public_key = this.public_key;
            }
            if (this.weight != null) {
                data.weight = this.weight;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.public_key.length)
                writer.writeString(1, this.public_key);
            if (this.weight != 0)
                writer.writeUint32(2, this.weight);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeyWeight {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeyWeight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.public_key = reader.readString();
                        break;
                    case 2:
                        message.weight = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeyWeight {
            return KeyWeight.deserialize(bytes);
        }
    }
    export class PermissionLevel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            actor?: string;
            permission?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("actor" in data && data.actor != undefined) {
                    this.actor = data.actor;
                }
                if ("permission" in data && data.permission != undefined) {
                    this.permission = data.permission;
                }
            }
        }
        get actor() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set actor(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get permission() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set permission(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            actor?: string;
            permission?: string;
        }): PermissionLevel {
            const message = new PermissionLevel({});
            if (data.actor != null) {
                message.actor = data.actor;
            }
            if (data.permission != null) {
                message.permission = data.permission;
            }
            return message;
        }
        toObject() {
            const data: {
                actor?: string;
                permission?: string;
            } = {};
            if (this.actor != null) {
                data.actor = this.actor;
            }
            if (this.permission != null) {
                data.permission = this.permission;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.actor.length)
                writer.writeString(1, this.actor);
            if (this.permission.length)
                writer.writeString(2, this.permission);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PermissionLevel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PermissionLevel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.actor = reader.readString();
                        break;
                    case 2:
                        message.permission = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PermissionLevel {
            return PermissionLevel.deserialize(bytes);
        }
    }
    export class PermissionLevelWeight extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            permission?: PermissionLevel;
            weight?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("permission" in data && data.permission != undefined) {
                    this.permission = data.permission;
                }
                if ("weight" in data && data.weight != undefined) {
                    this.weight = data.weight;
                }
            }
        }
        get permission() {
            return pb_1.Message.getWrapperField(this, PermissionLevel, 1) as PermissionLevel;
        }
        set permission(value: PermissionLevel) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_permission() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get weight() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set weight(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            permission?: ReturnType<typeof PermissionLevel.prototype.toObject>;
            weight?: number;
        }): PermissionLevelWeight {
            const message = new PermissionLevelWeight({});
            if (data.permission != null) {
                message.permission = PermissionLevel.fromObject(data.permission);
            }
            if (data.weight != null) {
                message.weight = data.weight;
            }
            return message;
        }
        toObject() {
            const data: {
                permission?: ReturnType<typeof PermissionLevel.prototype.toObject>;
                weight?: number;
            } = {};
            if (this.permission != null) {
                data.permission = this.permission.toObject();
            }
            if (this.weight != null) {
                data.weight = this.weight;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_permission)
                writer.writeMessage(1, this.permission, () => this.permission.serialize(writer));
            if (this.weight != 0)
                writer.writeUint32(2, this.weight);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PermissionLevelWeight {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PermissionLevelWeight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.permission, () => message.permission = PermissionLevel.deserialize(reader));
                        break;
                    case 2:
                        message.weight = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PermissionLevelWeight {
            return PermissionLevelWeight.deserialize(bytes);
        }
    }
    export class WaitWeight extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            wait_sec?: number;
            weight?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("wait_sec" in data && data.wait_sec != undefined) {
                    this.wait_sec = data.wait_sec;
                }
                if ("weight" in data && data.weight != undefined) {
                    this.weight = data.weight;
                }
            }
        }
        get wait_sec() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set wait_sec(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get weight() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set weight(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            wait_sec?: number;
            weight?: number;
        }): WaitWeight {
            const message = new WaitWeight({});
            if (data.wait_sec != null) {
                message.wait_sec = data.wait_sec;
            }
            if (data.weight != null) {
                message.weight = data.weight;
            }
            return message;
        }
        toObject() {
            const data: {
                wait_sec?: number;
                weight?: number;
            } = {};
            if (this.wait_sec != null) {
                data.wait_sec = this.wait_sec;
            }
            if (this.weight != null) {
                data.weight = this.weight;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.wait_sec != 0)
                writer.writeUint32(1, this.wait_sec);
            if (this.weight != 0)
                writer.writeUint32(2, this.weight);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WaitWeight {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WaitWeight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.wait_sec = reader.readUint32();
                        break;
                    case 2:
                        message.weight = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WaitWeight {
            return WaitWeight.deserialize(bytes);
        }
    }
    export class RlimitOp extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3, 4, 5]];
        constructor(data?: any[] | ({
            operation?: RlimitOp.Operation;
        } & (({
            state?: RlimitState;
            config?: never;
            account_limits?: never;
            account_usage?: never;
        } | {
            state?: never;
            config?: RlimitConfig;
            account_limits?: never;
            account_usage?: never;
        } | {
            state?: never;
            config?: never;
            account_limits?: RlimitAccountLimits;
            account_usage?: never;
        } | {
            state?: never;
            config?: never;
            account_limits?: never;
            account_usage?: RlimitAccountUsage;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("config" in data && data.config != undefined) {
                    this.config = data.config;
                }
                if ("account_limits" in data && data.account_limits != undefined) {
                    this.account_limits = data.account_limits;
                }
                if ("account_usage" in data && data.account_usage != undefined) {
                    this.account_usage = data.account_usage;
                }
            }
        }
        get operation() {
            return pb_1.Message.getFieldWithDefault(this, 1, RlimitOp.Operation.OPERATION_UNKNOWN) as RlimitOp.Operation;
        }
        set operation(value: RlimitOp.Operation) {
            pb_1.Message.setField(this, 1, value);
        }
        get state() {
            return pb_1.Message.getWrapperField(this, RlimitState, 2) as RlimitState;
        }
        set state(value: RlimitState) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_state() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get config() {
            return pb_1.Message.getWrapperField(this, RlimitConfig, 3) as RlimitConfig;
        }
        set config(value: RlimitConfig) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_config() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get account_limits() {
            return pb_1.Message.getWrapperField(this, RlimitAccountLimits, 4) as RlimitAccountLimits;
        }
        set account_limits(value: RlimitAccountLimits) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_account_limits() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get account_usage() {
            return pb_1.Message.getWrapperField(this, RlimitAccountUsage, 5) as RlimitAccountUsage;
        }
        set account_usage(value: RlimitAccountUsage) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_account_usage() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get kind() {
            const cases: {
                [index: number]: "none" | "state" | "config" | "account_limits" | "account_usage";
            } = {
                0: "none",
                2: "state",
                3: "config",
                4: "account_limits",
                5: "account_usage"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5])];
        }
        static fromObject(data: {
            operation?: RlimitOp.Operation;
            state?: ReturnType<typeof RlimitState.prototype.toObject>;
            config?: ReturnType<typeof RlimitConfig.prototype.toObject>;
            account_limits?: ReturnType<typeof RlimitAccountLimits.prototype.toObject>;
            account_usage?: ReturnType<typeof RlimitAccountUsage.prototype.toObject>;
        }): RlimitOp {
            const message = new RlimitOp({});
            if (data.operation != null) {
                message.operation = data.operation;
            }
            if (data.state != null) {
                message.state = RlimitState.fromObject(data.state);
            }
            if (data.config != null) {
                message.config = RlimitConfig.fromObject(data.config);
            }
            if (data.account_limits != null) {
                message.account_limits = RlimitAccountLimits.fromObject(data.account_limits);
            }
            if (data.account_usage != null) {
                message.account_usage = RlimitAccountUsage.fromObject(data.account_usage);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: RlimitOp.Operation;
                state?: ReturnType<typeof RlimitState.prototype.toObject>;
                config?: ReturnType<typeof RlimitConfig.prototype.toObject>;
                account_limits?: ReturnType<typeof RlimitAccountLimits.prototype.toObject>;
                account_usage?: ReturnType<typeof RlimitAccountUsage.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation;
            }
            if (this.state != null) {
                data.state = this.state.toObject();
            }
            if (this.config != null) {
                data.config = this.config.toObject();
            }
            if (this.account_limits != null) {
                data.account_limits = this.account_limits.toObject();
            }
            if (this.account_usage != null) {
                data.account_usage = this.account_usage.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.operation != RlimitOp.Operation.OPERATION_UNKNOWN)
                writer.writeEnum(1, this.operation);
            if (this.has_state)
                writer.writeMessage(2, this.state, () => this.state.serialize(writer));
            if (this.has_config)
                writer.writeMessage(3, this.config, () => this.config.serialize(writer));
            if (this.has_account_limits)
                writer.writeMessage(4, this.account_limits, () => this.account_limits.serialize(writer));
            if (this.has_account_usage)
                writer.writeMessage(5, this.account_usage, () => this.account_usage.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RlimitOp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RlimitOp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.operation = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.state, () => message.state = RlimitState.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.config, () => message.config = RlimitConfig.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.account_limits, () => message.account_limits = RlimitAccountLimits.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.account_usage, () => message.account_usage = RlimitAccountUsage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RlimitOp {
            return RlimitOp.deserialize(bytes);
        }
    }
    export namespace RlimitOp {
        export enum Operation {
            OPERATION_UNKNOWN = 0,
            OPERATION_INSERT = 1,
            OPERATION_UPDATE = 2
        }
    }
    export class RlimitState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            average_block_net_usage?: UsageAccumulator;
            average_block_cpu_usage?: UsageAccumulator;
            pending_net_usage?: string;
            pending_cpu_usage?: string;
            total_net_weight?: string;
            total_cpu_weight?: string;
            total_ram_bytes?: string;
            virtual_net_limit?: string;
            virtual_cpu_limit?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("average_block_net_usage" in data && data.average_block_net_usage != undefined) {
                    this.average_block_net_usage = data.average_block_net_usage;
                }
                if ("average_block_cpu_usage" in data && data.average_block_cpu_usage != undefined) {
                    this.average_block_cpu_usage = data.average_block_cpu_usage;
                }
                if ("pending_net_usage" in data && data.pending_net_usage != undefined) {
                    this.pending_net_usage = data.pending_net_usage;
                }
                if ("pending_cpu_usage" in data && data.pending_cpu_usage != undefined) {
                    this.pending_cpu_usage = data.pending_cpu_usage;
                }
                if ("total_net_weight" in data && data.total_net_weight != undefined) {
                    this.total_net_weight = data.total_net_weight;
                }
                if ("total_cpu_weight" in data && data.total_cpu_weight != undefined) {
                    this.total_cpu_weight = data.total_cpu_weight;
                }
                if ("total_ram_bytes" in data && data.total_ram_bytes != undefined) {
                    this.total_ram_bytes = data.total_ram_bytes;
                }
                if ("virtual_net_limit" in data && data.virtual_net_limit != undefined) {
                    this.virtual_net_limit = data.virtual_net_limit;
                }
                if ("virtual_cpu_limit" in data && data.virtual_cpu_limit != undefined) {
                    this.virtual_cpu_limit = data.virtual_cpu_limit;
                }
            }
        }
        get average_block_net_usage() {
            return pb_1.Message.getWrapperField(this, UsageAccumulator, 1) as UsageAccumulator;
        }
        set average_block_net_usage(value: UsageAccumulator) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_average_block_net_usage() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get average_block_cpu_usage() {
            return pb_1.Message.getWrapperField(this, UsageAccumulator, 2) as UsageAccumulator;
        }
        set average_block_cpu_usage(value: UsageAccumulator) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_average_block_cpu_usage() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get pending_net_usage() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set pending_net_usage(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get pending_cpu_usage() {
            return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
        }
        set pending_cpu_usage(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get total_net_weight() {
            return pb_1.Message.getFieldWithDefault(this, 5, "0") as string;
        }
        set total_net_weight(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get total_cpu_weight() {
            return pb_1.Message.getFieldWithDefault(this, 6, "0") as string;
        }
        set total_cpu_weight(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get total_ram_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 7, "0") as string;
        }
        set total_ram_bytes(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get virtual_net_limit() {
            return pb_1.Message.getFieldWithDefault(this, 8, "0") as string;
        }
        set virtual_net_limit(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get virtual_cpu_limit() {
            return pb_1.Message.getFieldWithDefault(this, 9, "0") as string;
        }
        set virtual_cpu_limit(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            average_block_net_usage?: ReturnType<typeof UsageAccumulator.prototype.toObject>;
            average_block_cpu_usage?: ReturnType<typeof UsageAccumulator.prototype.toObject>;
            pending_net_usage?: string;
            pending_cpu_usage?: string;
            total_net_weight?: string;
            total_cpu_weight?: string;
            total_ram_bytes?: string;
            virtual_net_limit?: string;
            virtual_cpu_limit?: string;
        }): RlimitState {
            const message = new RlimitState({});
            if (data.average_block_net_usage != null) {
                message.average_block_net_usage = UsageAccumulator.fromObject(data.average_block_net_usage);
            }
            if (data.average_block_cpu_usage != null) {
                message.average_block_cpu_usage = UsageAccumulator.fromObject(data.average_block_cpu_usage);
            }
            if (data.pending_net_usage != null) {
                message.pending_net_usage = data.pending_net_usage;
            }
            if (data.pending_cpu_usage != null) {
                message.pending_cpu_usage = data.pending_cpu_usage;
            }
            if (data.total_net_weight != null) {
                message.total_net_weight = data.total_net_weight;
            }
            if (data.total_cpu_weight != null) {
                message.total_cpu_weight = data.total_cpu_weight;
            }
            if (data.total_ram_bytes != null) {
                message.total_ram_bytes = data.total_ram_bytes;
            }
            if (data.virtual_net_limit != null) {
                message.virtual_net_limit = data.virtual_net_limit;
            }
            if (data.virtual_cpu_limit != null) {
                message.virtual_cpu_limit = data.virtual_cpu_limit;
            }
            return message;
        }
        toObject() {
            const data: {
                average_block_net_usage?: ReturnType<typeof UsageAccumulator.prototype.toObject>;
                average_block_cpu_usage?: ReturnType<typeof UsageAccumulator.prototype.toObject>;
                pending_net_usage?: string;
                pending_cpu_usage?: string;
                total_net_weight?: string;
                total_cpu_weight?: string;
                total_ram_bytes?: string;
                virtual_net_limit?: string;
                virtual_cpu_limit?: string;
            } = {};
            if (this.average_block_net_usage != null) {
                data.average_block_net_usage = this.average_block_net_usage.toObject();
            }
            if (this.average_block_cpu_usage != null) {
                data.average_block_cpu_usage = this.average_block_cpu_usage.toObject();
            }
            if (this.pending_net_usage != null) {
                data.pending_net_usage = this.pending_net_usage;
            }
            if (this.pending_cpu_usage != null) {
                data.pending_cpu_usage = this.pending_cpu_usage;
            }
            if (this.total_net_weight != null) {
                data.total_net_weight = this.total_net_weight;
            }
            if (this.total_cpu_weight != null) {
                data.total_cpu_weight = this.total_cpu_weight;
            }
            if (this.total_ram_bytes != null) {
                data.total_ram_bytes = this.total_ram_bytes;
            }
            if (this.virtual_net_limit != null) {
                data.virtual_net_limit = this.virtual_net_limit;
            }
            if (this.virtual_cpu_limit != null) {
                data.virtual_cpu_limit = this.virtual_cpu_limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_average_block_net_usage)
                writer.writeMessage(1, this.average_block_net_usage, () => this.average_block_net_usage.serialize(writer));
            if (this.has_average_block_cpu_usage)
                writer.writeMessage(2, this.average_block_cpu_usage, () => this.average_block_cpu_usage.serialize(writer));
            if (this.pending_net_usage != "0")
                writer.writeUint64String(3, this.pending_net_usage);
            if (this.pending_cpu_usage != "0")
                writer.writeUint64String(4, this.pending_cpu_usage);
            if (this.total_net_weight != "0")
                writer.writeUint64String(5, this.total_net_weight);
            if (this.total_cpu_weight != "0")
                writer.writeUint64String(6, this.total_cpu_weight);
            if (this.total_ram_bytes != "0")
                writer.writeUint64String(7, this.total_ram_bytes);
            if (this.virtual_net_limit != "0")
                writer.writeUint64String(8, this.virtual_net_limit);
            if (this.virtual_cpu_limit != "0")
                writer.writeUint64String(9, this.virtual_cpu_limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RlimitState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RlimitState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.average_block_net_usage, () => message.average_block_net_usage = UsageAccumulator.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.average_block_cpu_usage, () => message.average_block_cpu_usage = UsageAccumulator.deserialize(reader));
                        break;
                    case 3:
                        message.pending_net_usage = reader.readUint64String();
                        break;
                    case 4:
                        message.pending_cpu_usage = reader.readUint64String();
                        break;
                    case 5:
                        message.total_net_weight = reader.readUint64String();
                        break;
                    case 6:
                        message.total_cpu_weight = reader.readUint64String();
                        break;
                    case 7:
                        message.total_ram_bytes = reader.readUint64String();
                        break;
                    case 8:
                        message.virtual_net_limit = reader.readUint64String();
                        break;
                    case 9:
                        message.virtual_cpu_limit = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RlimitState {
            return RlimitState.deserialize(bytes);
        }
    }
    export class RlimitConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            cpu_limit_parameters?: ElasticLimitParameters;
            net_limit_parameters?: ElasticLimitParameters;
            account_cpu_usage_average_window?: number;
            account_net_usage_average_window?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cpu_limit_parameters" in data && data.cpu_limit_parameters != undefined) {
                    this.cpu_limit_parameters = data.cpu_limit_parameters;
                }
                if ("net_limit_parameters" in data && data.net_limit_parameters != undefined) {
                    this.net_limit_parameters = data.net_limit_parameters;
                }
                if ("account_cpu_usage_average_window" in data && data.account_cpu_usage_average_window != undefined) {
                    this.account_cpu_usage_average_window = data.account_cpu_usage_average_window;
                }
                if ("account_net_usage_average_window" in data && data.account_net_usage_average_window != undefined) {
                    this.account_net_usage_average_window = data.account_net_usage_average_window;
                }
            }
        }
        get cpu_limit_parameters() {
            return pb_1.Message.getWrapperField(this, ElasticLimitParameters, 1) as ElasticLimitParameters;
        }
        set cpu_limit_parameters(value: ElasticLimitParameters) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_cpu_limit_parameters() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get net_limit_parameters() {
            return pb_1.Message.getWrapperField(this, ElasticLimitParameters, 2) as ElasticLimitParameters;
        }
        set net_limit_parameters(value: ElasticLimitParameters) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_net_limit_parameters() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get account_cpu_usage_average_window() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set account_cpu_usage_average_window(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get account_net_usage_average_window() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set account_net_usage_average_window(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            cpu_limit_parameters?: ReturnType<typeof ElasticLimitParameters.prototype.toObject>;
            net_limit_parameters?: ReturnType<typeof ElasticLimitParameters.prototype.toObject>;
            account_cpu_usage_average_window?: number;
            account_net_usage_average_window?: number;
        }): RlimitConfig {
            const message = new RlimitConfig({});
            if (data.cpu_limit_parameters != null) {
                message.cpu_limit_parameters = ElasticLimitParameters.fromObject(data.cpu_limit_parameters);
            }
            if (data.net_limit_parameters != null) {
                message.net_limit_parameters = ElasticLimitParameters.fromObject(data.net_limit_parameters);
            }
            if (data.account_cpu_usage_average_window != null) {
                message.account_cpu_usage_average_window = data.account_cpu_usage_average_window;
            }
            if (data.account_net_usage_average_window != null) {
                message.account_net_usage_average_window = data.account_net_usage_average_window;
            }
            return message;
        }
        toObject() {
            const data: {
                cpu_limit_parameters?: ReturnType<typeof ElasticLimitParameters.prototype.toObject>;
                net_limit_parameters?: ReturnType<typeof ElasticLimitParameters.prototype.toObject>;
                account_cpu_usage_average_window?: number;
                account_net_usage_average_window?: number;
            } = {};
            if (this.cpu_limit_parameters != null) {
                data.cpu_limit_parameters = this.cpu_limit_parameters.toObject();
            }
            if (this.net_limit_parameters != null) {
                data.net_limit_parameters = this.net_limit_parameters.toObject();
            }
            if (this.account_cpu_usage_average_window != null) {
                data.account_cpu_usage_average_window = this.account_cpu_usage_average_window;
            }
            if (this.account_net_usage_average_window != null) {
                data.account_net_usage_average_window = this.account_net_usage_average_window;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_cpu_limit_parameters)
                writer.writeMessage(1, this.cpu_limit_parameters, () => this.cpu_limit_parameters.serialize(writer));
            if (this.has_net_limit_parameters)
                writer.writeMessage(2, this.net_limit_parameters, () => this.net_limit_parameters.serialize(writer));
            if (this.account_cpu_usage_average_window != 0)
                writer.writeUint32(3, this.account_cpu_usage_average_window);
            if (this.account_net_usage_average_window != 0)
                writer.writeUint32(4, this.account_net_usage_average_window);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RlimitConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RlimitConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.cpu_limit_parameters, () => message.cpu_limit_parameters = ElasticLimitParameters.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.net_limit_parameters, () => message.net_limit_parameters = ElasticLimitParameters.deserialize(reader));
                        break;
                    case 3:
                        message.account_cpu_usage_average_window = reader.readUint32();
                        break;
                    case 4:
                        message.account_net_usage_average_window = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RlimitConfig {
            return RlimitConfig.deserialize(bytes);
        }
    }
    export class RlimitAccountLimits extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner?: string;
            pending?: boolean;
            net_weight?: number;
            cpu_weight?: number;
            ram_bytes?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("pending" in data && data.pending != undefined) {
                    this.pending = data.pending;
                }
                if ("net_weight" in data && data.net_weight != undefined) {
                    this.net_weight = data.net_weight;
                }
                if ("cpu_weight" in data && data.cpu_weight != undefined) {
                    this.cpu_weight = data.cpu_weight;
                }
                if ("ram_bytes" in data && data.ram_bytes != undefined) {
                    this.ram_bytes = data.ram_bytes;
                }
            }
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pending() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set pending(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get net_weight() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set net_weight(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get cpu_weight() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set cpu_weight(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get ram_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set ram_bytes(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            owner?: string;
            pending?: boolean;
            net_weight?: number;
            cpu_weight?: number;
            ram_bytes?: number;
        }): RlimitAccountLimits {
            const message = new RlimitAccountLimits({});
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.pending != null) {
                message.pending = data.pending;
            }
            if (data.net_weight != null) {
                message.net_weight = data.net_weight;
            }
            if (data.cpu_weight != null) {
                message.cpu_weight = data.cpu_weight;
            }
            if (data.ram_bytes != null) {
                message.ram_bytes = data.ram_bytes;
            }
            return message;
        }
        toObject() {
            const data: {
                owner?: string;
                pending?: boolean;
                net_weight?: number;
                cpu_weight?: number;
                ram_bytes?: number;
            } = {};
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.pending != null) {
                data.pending = this.pending;
            }
            if (this.net_weight != null) {
                data.net_weight = this.net_weight;
            }
            if (this.cpu_weight != null) {
                data.cpu_weight = this.cpu_weight;
            }
            if (this.ram_bytes != null) {
                data.ram_bytes = this.ram_bytes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner.length)
                writer.writeString(1, this.owner);
            if (this.pending != false)
                writer.writeBool(2, this.pending);
            if (this.net_weight != 0)
                writer.writeInt64(3, this.net_weight);
            if (this.cpu_weight != 0)
                writer.writeInt64(4, this.cpu_weight);
            if (this.ram_bytes != 0)
                writer.writeInt64(5, this.ram_bytes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RlimitAccountLimits {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RlimitAccountLimits();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner = reader.readString();
                        break;
                    case 2:
                        message.pending = reader.readBool();
                        break;
                    case 3:
                        message.net_weight = reader.readInt64();
                        break;
                    case 4:
                        message.cpu_weight = reader.readInt64();
                        break;
                    case 5:
                        message.ram_bytes = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RlimitAccountLimits {
            return RlimitAccountLimits.deserialize(bytes);
        }
    }
    export class RlimitAccountUsage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner?: string;
            net_usage?: UsageAccumulator;
            cpu_usage?: UsageAccumulator;
            ram_usage?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("net_usage" in data && data.net_usage != undefined) {
                    this.net_usage = data.net_usage;
                }
                if ("cpu_usage" in data && data.cpu_usage != undefined) {
                    this.cpu_usage = data.cpu_usage;
                }
                if ("ram_usage" in data && data.ram_usage != undefined) {
                    this.ram_usage = data.ram_usage;
                }
            }
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get net_usage() {
            return pb_1.Message.getWrapperField(this, UsageAccumulator, 2) as UsageAccumulator;
        }
        set net_usage(value: UsageAccumulator) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_net_usage() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get cpu_usage() {
            return pb_1.Message.getWrapperField(this, UsageAccumulator, 3) as UsageAccumulator;
        }
        set cpu_usage(value: UsageAccumulator) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_cpu_usage() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get ram_usage() {
            return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
        }
        set ram_usage(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            owner?: string;
            net_usage?: ReturnType<typeof UsageAccumulator.prototype.toObject>;
            cpu_usage?: ReturnType<typeof UsageAccumulator.prototype.toObject>;
            ram_usage?: string;
        }): RlimitAccountUsage {
            const message = new RlimitAccountUsage({});
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.net_usage != null) {
                message.net_usage = UsageAccumulator.fromObject(data.net_usage);
            }
            if (data.cpu_usage != null) {
                message.cpu_usage = UsageAccumulator.fromObject(data.cpu_usage);
            }
            if (data.ram_usage != null) {
                message.ram_usage = data.ram_usage;
            }
            return message;
        }
        toObject() {
            const data: {
                owner?: string;
                net_usage?: ReturnType<typeof UsageAccumulator.prototype.toObject>;
                cpu_usage?: ReturnType<typeof UsageAccumulator.prototype.toObject>;
                ram_usage?: string;
            } = {};
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.net_usage != null) {
                data.net_usage = this.net_usage.toObject();
            }
            if (this.cpu_usage != null) {
                data.cpu_usage = this.cpu_usage.toObject();
            }
            if (this.ram_usage != null) {
                data.ram_usage = this.ram_usage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner.length)
                writer.writeString(1, this.owner);
            if (this.has_net_usage)
                writer.writeMessage(2, this.net_usage, () => this.net_usage.serialize(writer));
            if (this.has_cpu_usage)
                writer.writeMessage(3, this.cpu_usage, () => this.cpu_usage.serialize(writer));
            if (this.ram_usage != "0")
                writer.writeUint64String(4, this.ram_usage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RlimitAccountUsage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RlimitAccountUsage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.net_usage, () => message.net_usage = UsageAccumulator.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.cpu_usage, () => message.cpu_usage = UsageAccumulator.deserialize(reader));
                        break;
                    case 4:
                        message.ram_usage = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RlimitAccountUsage {
            return RlimitAccountUsage.deserialize(bytes);
        }
    }
    export class UsageAccumulator extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            last_ordinal?: number;
            value_ex?: string;
            consumed?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("last_ordinal" in data && data.last_ordinal != undefined) {
                    this.last_ordinal = data.last_ordinal;
                }
                if ("value_ex" in data && data.value_ex != undefined) {
                    this.value_ex = data.value_ex;
                }
                if ("consumed" in data && data.consumed != undefined) {
                    this.consumed = data.consumed;
                }
            }
        }
        get last_ordinal() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set last_ordinal(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get value_ex() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set value_ex(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get consumed() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set consumed(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            last_ordinal?: number;
            value_ex?: string;
            consumed?: string;
        }): UsageAccumulator {
            const message = new UsageAccumulator({});
            if (data.last_ordinal != null) {
                message.last_ordinal = data.last_ordinal;
            }
            if (data.value_ex != null) {
                message.value_ex = data.value_ex;
            }
            if (data.consumed != null) {
                message.consumed = data.consumed;
            }
            return message;
        }
        toObject() {
            const data: {
                last_ordinal?: number;
                value_ex?: string;
                consumed?: string;
            } = {};
            if (this.last_ordinal != null) {
                data.last_ordinal = this.last_ordinal;
            }
            if (this.value_ex != null) {
                data.value_ex = this.value_ex;
            }
            if (this.consumed != null) {
                data.consumed = this.consumed;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.last_ordinal != 0)
                writer.writeUint32(1, this.last_ordinal);
            if (this.value_ex != "0")
                writer.writeUint64String(2, this.value_ex);
            if (this.consumed != "0")
                writer.writeUint64String(3, this.consumed);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UsageAccumulator {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UsageAccumulator();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.last_ordinal = reader.readUint32();
                        break;
                    case 2:
                        message.value_ex = reader.readUint64String();
                        break;
                    case 3:
                        message.consumed = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UsageAccumulator {
            return UsageAccumulator.deserialize(bytes);
        }
    }
    export class ElasticLimitParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            target?: string;
            max?: string;
            periods?: number;
            max_multiplier?: number;
            contract_rate?: Ratio;
            expand_rate?: Ratio;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("target" in data && data.target != undefined) {
                    this.target = data.target;
                }
                if ("max" in data && data.max != undefined) {
                    this.max = data.max;
                }
                if ("periods" in data && data.periods != undefined) {
                    this.periods = data.periods;
                }
                if ("max_multiplier" in data && data.max_multiplier != undefined) {
                    this.max_multiplier = data.max_multiplier;
                }
                if ("contract_rate" in data && data.contract_rate != undefined) {
                    this.contract_rate = data.contract_rate;
                }
                if ("expand_rate" in data && data.expand_rate != undefined) {
                    this.expand_rate = data.expand_rate;
                }
            }
        }
        get target() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set target(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get max() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set max(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get periods() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set periods(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get max_multiplier() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set max_multiplier(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get contract_rate() {
            return pb_1.Message.getWrapperField(this, Ratio, 5) as Ratio;
        }
        set contract_rate(value: Ratio) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_contract_rate() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get expand_rate() {
            return pb_1.Message.getWrapperField(this, Ratio, 6) as Ratio;
        }
        set expand_rate(value: Ratio) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_expand_rate() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            target?: string;
            max?: string;
            periods?: number;
            max_multiplier?: number;
            contract_rate?: ReturnType<typeof Ratio.prototype.toObject>;
            expand_rate?: ReturnType<typeof Ratio.prototype.toObject>;
        }): ElasticLimitParameters {
            const message = new ElasticLimitParameters({});
            if (data.target != null) {
                message.target = data.target;
            }
            if (data.max != null) {
                message.max = data.max;
            }
            if (data.periods != null) {
                message.periods = data.periods;
            }
            if (data.max_multiplier != null) {
                message.max_multiplier = data.max_multiplier;
            }
            if (data.contract_rate != null) {
                message.contract_rate = Ratio.fromObject(data.contract_rate);
            }
            if (data.expand_rate != null) {
                message.expand_rate = Ratio.fromObject(data.expand_rate);
            }
            return message;
        }
        toObject() {
            const data: {
                target?: string;
                max?: string;
                periods?: number;
                max_multiplier?: number;
                contract_rate?: ReturnType<typeof Ratio.prototype.toObject>;
                expand_rate?: ReturnType<typeof Ratio.prototype.toObject>;
            } = {};
            if (this.target != null) {
                data.target = this.target;
            }
            if (this.max != null) {
                data.max = this.max;
            }
            if (this.periods != null) {
                data.periods = this.periods;
            }
            if (this.max_multiplier != null) {
                data.max_multiplier = this.max_multiplier;
            }
            if (this.contract_rate != null) {
                data.contract_rate = this.contract_rate.toObject();
            }
            if (this.expand_rate != null) {
                data.expand_rate = this.expand_rate.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.target != "0")
                writer.writeUint64String(1, this.target);
            if (this.max != "0")
                writer.writeUint64String(2, this.max);
            if (this.periods != 0)
                writer.writeUint32(3, this.periods);
            if (this.max_multiplier != 0)
                writer.writeUint32(4, this.max_multiplier);
            if (this.has_contract_rate)
                writer.writeMessage(5, this.contract_rate, () => this.contract_rate.serialize(writer));
            if (this.has_expand_rate)
                writer.writeMessage(6, this.expand_rate, () => this.expand_rate.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ElasticLimitParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ElasticLimitParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.target = reader.readUint64String();
                        break;
                    case 2:
                        message.max = reader.readUint64String();
                        break;
                    case 3:
                        message.periods = reader.readUint32();
                        break;
                    case 4:
                        message.max_multiplier = reader.readUint32();
                        break;
                    case 5:
                        reader.readMessage(message.contract_rate, () => message.contract_rate = Ratio.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.expand_rate, () => message.expand_rate = Ratio.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ElasticLimitParameters {
            return ElasticLimitParameters.deserialize(bytes);
        }
    }
    export class Ratio extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            numerator?: string;
            denominator?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("numerator" in data && data.numerator != undefined) {
                    this.numerator = data.numerator;
                }
                if ("denominator" in data && data.denominator != undefined) {
                    this.denominator = data.denominator;
                }
            }
        }
        get numerator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set numerator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get denominator() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set denominator(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            numerator?: string;
            denominator?: string;
        }): Ratio {
            const message = new Ratio({});
            if (data.numerator != null) {
                message.numerator = data.numerator;
            }
            if (data.denominator != null) {
                message.denominator = data.denominator;
            }
            return message;
        }
        toObject() {
            const data: {
                numerator?: string;
                denominator?: string;
            } = {};
            if (this.numerator != null) {
                data.numerator = this.numerator;
            }
            if (this.denominator != null) {
                data.denominator = this.denominator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.numerator != "0")
                writer.writeUint64String(1, this.numerator);
            if (this.denominator != "0")
                writer.writeUint64String(2, this.denominator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ratio {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ratio();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.numerator = reader.readUint64String();
                        break;
                    case 2:
                        message.denominator = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Ratio {
            return Ratio.deserialize(bytes);
        }
    }
    export class Exception extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            name?: string;
            message?: string;
            stack?: Exception.LogMessage[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("stack" in data && data.stack != undefined) {
                    this.stack = data.stack;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get stack() {
            return pb_1.Message.getRepeatedWrapperField(this, Exception.LogMessage, 4) as Exception.LogMessage[];
        }
        set stack(value: Exception.LogMessage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            code?: number;
            name?: string;
            message?: string;
            stack?: ReturnType<typeof Exception.LogMessage.prototype.toObject>[];
        }): Exception {
            const message = new Exception({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.stack != null) {
                message.stack = data.stack.map(item => Exception.LogMessage.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                name?: string;
                message?: string;
                stack?: ReturnType<typeof Exception.LogMessage.prototype.toObject>[];
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.stack != null) {
                data.stack = this.stack.map((item: Exception.LogMessage) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (this.stack.length)
                writer.writeRepeatedMessage(4, this.stack, (item: Exception.LogMessage) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Exception {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Exception();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.stack, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Exception.LogMessage.deserialize(reader), Exception.LogMessage));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Exception {
            return Exception.deserialize(bytes);
        }
    }
    export namespace Exception {
        export class LogMessage extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                context?: Exception.LogContext;
                format?: string;
                data?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("context" in data && data.context != undefined) {
                        this.context = data.context;
                    }
                    if ("format" in data && data.format != undefined) {
                        this.format = data.format;
                    }
                    if ("data" in data && data.data != undefined) {
                        this.data = data.data;
                    }
                }
            }
            get context() {
                return pb_1.Message.getWrapperField(this, Exception.LogContext, 1) as Exception.LogContext;
            }
            set context(value: Exception.LogContext) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_context() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get format() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set format(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get data() {
                return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
            }
            set data(value: Uint8Array) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                context?: ReturnType<typeof Exception.LogContext.prototype.toObject>;
                format?: string;
                data?: Uint8Array;
            }): LogMessage {
                const message = new LogMessage({});
                if (data.context != null) {
                    message.context = Exception.LogContext.fromObject(data.context);
                }
                if (data.format != null) {
                    message.format = data.format;
                }
                if (data.data != null) {
                    message.data = data.data;
                }
                return message;
            }
            toObject() {
                const data: {
                    context?: ReturnType<typeof Exception.LogContext.prototype.toObject>;
                    format?: string;
                    data?: Uint8Array;
                } = {};
                if (this.context != null) {
                    data.context = this.context.toObject();
                }
                if (this.format != null) {
                    data.format = this.format;
                }
                if (this.data != null) {
                    data.data = this.data;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_context)
                    writer.writeMessage(1, this.context, () => this.context.serialize(writer));
                if (this.format.length)
                    writer.writeString(2, this.format);
                if (this.data.length)
                    writer.writeBytes(4, this.data);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogMessage {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogMessage();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.context, () => message.context = Exception.LogContext.deserialize(reader));
                            break;
                        case 2:
                            message.format = reader.readString();
                            break;
                        case 4:
                            message.data = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): LogMessage {
                return LogMessage.deserialize(bytes);
            }
        }
        export class LogContext extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                level?: string;
                file?: string;
                line?: number;
                method?: string;
                hostname?: string;
                thread_name?: string;
                timestamp?: dependency_1.google.protobuf.Timestamp;
                context?: Exception.LogContext;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("level" in data && data.level != undefined) {
                        this.level = data.level;
                    }
                    if ("file" in data && data.file != undefined) {
                        this.file = data.file;
                    }
                    if ("line" in data && data.line != undefined) {
                        this.line = data.line;
                    }
                    if ("method" in data && data.method != undefined) {
                        this.method = data.method;
                    }
                    if ("hostname" in data && data.hostname != undefined) {
                        this.hostname = data.hostname;
                    }
                    if ("thread_name" in data && data.thread_name != undefined) {
                        this.thread_name = data.thread_name;
                    }
                    if ("timestamp" in data && data.timestamp != undefined) {
                        this.timestamp = data.timestamp;
                    }
                    if ("context" in data && data.context != undefined) {
                        this.context = data.context;
                    }
                }
            }
            get level() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set level(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get file() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set file(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get line() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set line(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get method() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set method(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get hostname() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set hostname(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            get thread_name() {
                return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
            }
            set thread_name(value: string) {
                pb_1.Message.setField(this, 6, value);
            }
            get timestamp() {
                return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 7) as dependency_1.google.protobuf.Timestamp;
            }
            set timestamp(value: dependency_1.google.protobuf.Timestamp) {
                pb_1.Message.setWrapperField(this, 7, value);
            }
            get has_timestamp() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get context() {
                return pb_1.Message.getWrapperField(this, Exception.LogContext, 8) as Exception.LogContext;
            }
            set context(value: Exception.LogContext) {
                pb_1.Message.setWrapperField(this, 8, value);
            }
            get has_context() {
                return pb_1.Message.getField(this, 8) != null;
            }
            static fromObject(data: {
                level?: string;
                file?: string;
                line?: number;
                method?: string;
                hostname?: string;
                thread_name?: string;
                timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                context?: ReturnType<typeof Exception.LogContext.prototype.toObject>;
            }): LogContext {
                const message = new LogContext({});
                if (data.level != null) {
                    message.level = data.level;
                }
                if (data.file != null) {
                    message.file = data.file;
                }
                if (data.line != null) {
                    message.line = data.line;
                }
                if (data.method != null) {
                    message.method = data.method;
                }
                if (data.hostname != null) {
                    message.hostname = data.hostname;
                }
                if (data.thread_name != null) {
                    message.thread_name = data.thread_name;
                }
                if (data.timestamp != null) {
                    message.timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.timestamp);
                }
                if (data.context != null) {
                    message.context = Exception.LogContext.fromObject(data.context);
                }
                return message;
            }
            toObject() {
                const data: {
                    level?: string;
                    file?: string;
                    line?: number;
                    method?: string;
                    hostname?: string;
                    thread_name?: string;
                    timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                    context?: ReturnType<typeof Exception.LogContext.prototype.toObject>;
                } = {};
                if (this.level != null) {
                    data.level = this.level;
                }
                if (this.file != null) {
                    data.file = this.file;
                }
                if (this.line != null) {
                    data.line = this.line;
                }
                if (this.method != null) {
                    data.method = this.method;
                }
                if (this.hostname != null) {
                    data.hostname = this.hostname;
                }
                if (this.thread_name != null) {
                    data.thread_name = this.thread_name;
                }
                if (this.timestamp != null) {
                    data.timestamp = this.timestamp.toObject();
                }
                if (this.context != null) {
                    data.context = this.context.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.level.length)
                    writer.writeString(1, this.level);
                if (this.file.length)
                    writer.writeString(2, this.file);
                if (this.line != 0)
                    writer.writeInt32(3, this.line);
                if (this.method.length)
                    writer.writeString(4, this.method);
                if (this.hostname.length)
                    writer.writeString(5, this.hostname);
                if (this.thread_name.length)
                    writer.writeString(6, this.thread_name);
                if (this.has_timestamp)
                    writer.writeMessage(7, this.timestamp, () => this.timestamp.serialize(writer));
                if (this.has_context)
                    writer.writeMessage(8, this.context, () => this.context.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogContext {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogContext();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.level = reader.readString();
                            break;
                        case 2:
                            message.file = reader.readString();
                            break;
                        case 3:
                            message.line = reader.readInt32();
                            break;
                        case 4:
                            message.method = reader.readString();
                            break;
                        case 5:
                            message.hostname = reader.readString();
                            break;
                        case 6:
                            message.thread_name = reader.readString();
                            break;
                        case 7:
                            reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                            break;
                        case 8:
                            reader.readMessage(message.context, () => message.context = Exception.LogContext.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): LogContext {
                return LogContext.deserialize(bytes);
            }
        }
    }
    export class Feature extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            feature_digest?: string;
            subjective_restrictions?: SubjectiveRestrictions;
            description_digest?: string;
            dependencies?: string[];
            protocol_feature_type?: string;
            specification?: Specification[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("feature_digest" in data && data.feature_digest != undefined) {
                    this.feature_digest = data.feature_digest;
                }
                if ("subjective_restrictions" in data && data.subjective_restrictions != undefined) {
                    this.subjective_restrictions = data.subjective_restrictions;
                }
                if ("description_digest" in data && data.description_digest != undefined) {
                    this.description_digest = data.description_digest;
                }
                if ("dependencies" in data && data.dependencies != undefined) {
                    this.dependencies = data.dependencies;
                }
                if ("protocol_feature_type" in data && data.protocol_feature_type != undefined) {
                    this.protocol_feature_type = data.protocol_feature_type;
                }
                if ("specification" in data && data.specification != undefined) {
                    this.specification = data.specification;
                }
            }
        }
        get feature_digest() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set feature_digest(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get subjective_restrictions() {
            return pb_1.Message.getWrapperField(this, SubjectiveRestrictions, 2) as SubjectiveRestrictions;
        }
        set subjective_restrictions(value: SubjectiveRestrictions) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_subjective_restrictions() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get description_digest() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description_digest(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get dependencies() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set dependencies(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get protocol_feature_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set protocol_feature_type(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get specification() {
            return pb_1.Message.getRepeatedWrapperField(this, Specification, 6) as Specification[];
        }
        set specification(value: Specification[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            feature_digest?: string;
            subjective_restrictions?: ReturnType<typeof SubjectiveRestrictions.prototype.toObject>;
            description_digest?: string;
            dependencies?: string[];
            protocol_feature_type?: string;
            specification?: ReturnType<typeof Specification.prototype.toObject>[];
        }): Feature {
            const message = new Feature({});
            if (data.feature_digest != null) {
                message.feature_digest = data.feature_digest;
            }
            if (data.subjective_restrictions != null) {
                message.subjective_restrictions = SubjectiveRestrictions.fromObject(data.subjective_restrictions);
            }
            if (data.description_digest != null) {
                message.description_digest = data.description_digest;
            }
            if (data.dependencies != null) {
                message.dependencies = data.dependencies;
            }
            if (data.protocol_feature_type != null) {
                message.protocol_feature_type = data.protocol_feature_type;
            }
            if (data.specification != null) {
                message.specification = data.specification.map(item => Specification.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                feature_digest?: string;
                subjective_restrictions?: ReturnType<typeof SubjectiveRestrictions.prototype.toObject>;
                description_digest?: string;
                dependencies?: string[];
                protocol_feature_type?: string;
                specification?: ReturnType<typeof Specification.prototype.toObject>[];
            } = {};
            if (this.feature_digest != null) {
                data.feature_digest = this.feature_digest;
            }
            if (this.subjective_restrictions != null) {
                data.subjective_restrictions = this.subjective_restrictions.toObject();
            }
            if (this.description_digest != null) {
                data.description_digest = this.description_digest;
            }
            if (this.dependencies != null) {
                data.dependencies = this.dependencies;
            }
            if (this.protocol_feature_type != null) {
                data.protocol_feature_type = this.protocol_feature_type;
            }
            if (this.specification != null) {
                data.specification = this.specification.map((item: Specification) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.feature_digest.length)
                writer.writeString(1, this.feature_digest);
            if (this.has_subjective_restrictions)
                writer.writeMessage(2, this.subjective_restrictions, () => this.subjective_restrictions.serialize(writer));
            if (this.description_digest.length)
                writer.writeString(3, this.description_digest);
            if (this.dependencies.length)
                writer.writeRepeatedString(4, this.dependencies);
            if (this.protocol_feature_type.length)
                writer.writeString(5, this.protocol_feature_type);
            if (this.specification.length)
                writer.writeRepeatedMessage(6, this.specification, (item: Specification) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Feature {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Feature();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.feature_digest = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.subjective_restrictions, () => message.subjective_restrictions = SubjectiveRestrictions.deserialize(reader));
                        break;
                    case 3:
                        message.description_digest = reader.readString();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.protocol_feature_type = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.specification, () => pb_1.Message.addToRepeatedWrapperField(message, 6, Specification.deserialize(reader), Specification));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Feature {
            return Feature.deserialize(bytes);
        }
    }
    export class SubjectiveRestrictions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            enabled?: boolean;
            preactivation_required?: boolean;
            earliest_allowed_activation_time?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
                if ("preactivation_required" in data && data.preactivation_required != undefined) {
                    this.preactivation_required = data.preactivation_required;
                }
                if ("earliest_allowed_activation_time" in data && data.earliest_allowed_activation_time != undefined) {
                    this.earliest_allowed_activation_time = data.earliest_allowed_activation_time;
                }
            }
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get preactivation_required() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set preactivation_required(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get earliest_allowed_activation_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set earliest_allowed_activation_time(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            enabled?: boolean;
            preactivation_required?: boolean;
            earliest_allowed_activation_time?: string;
        }): SubjectiveRestrictions {
            const message = new SubjectiveRestrictions({});
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            if (data.preactivation_required != null) {
                message.preactivation_required = data.preactivation_required;
            }
            if (data.earliest_allowed_activation_time != null) {
                message.earliest_allowed_activation_time = data.earliest_allowed_activation_time;
            }
            return message;
        }
        toObject() {
            const data: {
                enabled?: boolean;
                preactivation_required?: boolean;
                earliest_allowed_activation_time?: string;
            } = {};
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            if (this.preactivation_required != null) {
                data.preactivation_required = this.preactivation_required;
            }
            if (this.earliest_allowed_activation_time != null) {
                data.earliest_allowed_activation_time = this.earliest_allowed_activation_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.enabled != false)
                writer.writeBool(1, this.enabled);
            if (this.preactivation_required != false)
                writer.writeBool(2, this.preactivation_required);
            if (this.earliest_allowed_activation_time.length)
                writer.writeString(3, this.earliest_allowed_activation_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubjectiveRestrictions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubjectiveRestrictions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.enabled = reader.readBool();
                        break;
                    case 2:
                        message.preactivation_required = reader.readBool();
                        break;
                    case 3:
                        message.earliest_allowed_activation_time = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubjectiveRestrictions {
            return SubjectiveRestrictions.deserialize(bytes);
        }
    }
    export class Specification extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            value?: string;
        }): Specification {
            const message = new Specification({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                value?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.value.length)
                writer.writeString(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Specification {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Specification();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Specification {
            return Specification.deserialize(bytes);
        }
    }
    export class AccountCreationRef extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account?: string;
            creator?: string;
            block_num?: string;
            block_id?: string;
            block_time?: dependency_1.google.protobuf.Timestamp;
            transaction_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("block_num" in data && data.block_num != undefined) {
                    this.block_num = data.block_num;
                }
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("block_time" in data && data.block_time != undefined) {
                    this.block_time = data.block_time;
                }
                if ("transaction_id" in data && data.transaction_id != undefined) {
                    this.transaction_id = data.transaction_id;
                }
            }
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get block_num() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set block_num(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get block_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set block_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get block_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set block_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_block_time() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get transaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set transaction_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            account?: string;
            creator?: string;
            block_num?: string;
            block_id?: string;
            block_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            transaction_id?: string;
        }): AccountCreationRef {
            const message = new AccountCreationRef({});
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.block_num != null) {
                message.block_num = data.block_num;
            }
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            if (data.block_time != null) {
                message.block_time = dependency_1.google.protobuf.Timestamp.fromObject(data.block_time);
            }
            if (data.transaction_id != null) {
                message.transaction_id = data.transaction_id;
            }
            return message;
        }
        toObject() {
            const data: {
                account?: string;
                creator?: string;
                block_num?: string;
                block_id?: string;
                block_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                transaction_id?: string;
            } = {};
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.block_num != null) {
                data.block_num = this.block_num;
            }
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            if (this.block_time != null) {
                data.block_time = this.block_time.toObject();
            }
            if (this.transaction_id != null) {
                data.transaction_id = this.transaction_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account.length)
                writer.writeString(1, this.account);
            if (this.creator.length)
                writer.writeString(2, this.creator);
            if (this.block_num != "0")
                writer.writeUint64String(3, this.block_num);
            if (this.block_id.length)
                writer.writeString(4, this.block_id);
            if (this.has_block_time)
                writer.writeMessage(5, this.block_time, () => this.block_time.serialize(writer));
            if (this.transaction_id.length)
                writer.writeString(6, this.transaction_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountCreationRef {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountCreationRef();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account = reader.readString();
                        break;
                    case 2:
                        message.creator = reader.readString();
                        break;
                    case 3:
                        message.block_num = reader.readUint64String();
                        break;
                    case 4:
                        message.block_id = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.block_time, () => message.block_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        message.transaction_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountCreationRef {
            return AccountCreationRef.deserialize(bytes);
        }
    }
    export class HeaderOnlyBlock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            number?: number;
            header?: BlockHeader;
            blockroot_merkle?: BlockRootMerkle;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("number" in data && data.number != undefined) {
                    this.number = data.number;
                }
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("blockroot_merkle" in data && data.blockroot_merkle != undefined) {
                    this.blockroot_merkle = data.blockroot_merkle;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get number() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set number(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get header() {
            return pb_1.Message.getWrapperField(this, BlockHeader, 4) as BlockHeader;
        }
        set header(value: BlockHeader) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get blockroot_merkle() {
            return pb_1.Message.getWrapperField(this, BlockRootMerkle, 11) as BlockRootMerkle;
        }
        set blockroot_merkle(value: BlockRootMerkle) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_blockroot_merkle() {
            return pb_1.Message.getField(this, 11) != null;
        }
        static fromObject(data: {
            id?: string;
            number?: number;
            header?: ReturnType<typeof BlockHeader.prototype.toObject>;
            blockroot_merkle?: ReturnType<typeof BlockRootMerkle.prototype.toObject>;
        }): HeaderOnlyBlock {
            const message = new HeaderOnlyBlock({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.number != null) {
                message.number = data.number;
            }
            if (data.header != null) {
                message.header = BlockHeader.fromObject(data.header);
            }
            if (data.blockroot_merkle != null) {
                message.blockroot_merkle = BlockRootMerkle.fromObject(data.blockroot_merkle);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                number?: number;
                header?: ReturnType<typeof BlockHeader.prototype.toObject>;
                blockroot_merkle?: ReturnType<typeof BlockRootMerkle.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.number != null) {
                data.number = this.number;
            }
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.blockroot_merkle != null) {
                data.blockroot_merkle = this.blockroot_merkle.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.number != 0)
                writer.writeUint32(2, this.number);
            if (this.has_header)
                writer.writeMessage(4, this.header, () => this.header.serialize(writer));
            if (this.has_blockroot_merkle)
                writer.writeMessage(11, this.blockroot_merkle, () => this.blockroot_merkle.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HeaderOnlyBlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HeaderOnlyBlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.number = reader.readUint32();
                        break;
                    case 4:
                        reader.readMessage(message.header, () => message.header = BlockHeader.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.blockroot_merkle, () => message.blockroot_merkle = BlockRootMerkle.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HeaderOnlyBlock {
            return HeaderOnlyBlock.deserialize(bytes);
        }
    }
    export class TransactionTraceWithBlockRef extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            trace?: TransactionTrace;
            block_ref?: BlockRef;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("trace" in data && data.trace != undefined) {
                    this.trace = data.trace;
                }
                if ("block_ref" in data && data.block_ref != undefined) {
                    this.block_ref = data.block_ref;
                }
            }
        }
        get trace() {
            return pb_1.Message.getWrapperField(this, TransactionTrace, 1) as TransactionTrace;
        }
        set trace(value: TransactionTrace) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_trace() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get block_ref() {
            return pb_1.Message.getWrapperField(this, BlockRef, 2) as BlockRef;
        }
        set block_ref(value: BlockRef) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_block_ref() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            trace?: ReturnType<typeof TransactionTrace.prototype.toObject>;
            block_ref?: ReturnType<typeof BlockRef.prototype.toObject>;
        }): TransactionTraceWithBlockRef {
            const message = new TransactionTraceWithBlockRef({});
            if (data.trace != null) {
                message.trace = TransactionTrace.fromObject(data.trace);
            }
            if (data.block_ref != null) {
                message.block_ref = BlockRef.fromObject(data.block_ref);
            }
            return message;
        }
        toObject() {
            const data: {
                trace?: ReturnType<typeof TransactionTrace.prototype.toObject>;
                block_ref?: ReturnType<typeof BlockRef.prototype.toObject>;
            } = {};
            if (this.trace != null) {
                data.trace = this.trace.toObject();
            }
            if (this.block_ref != null) {
                data.block_ref = this.block_ref.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_trace)
                writer.writeMessage(1, this.trace, () => this.trace.serialize(writer));
            if (this.has_block_ref)
                writer.writeMessage(2, this.block_ref, () => this.block_ref.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionTraceWithBlockRef {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionTraceWithBlockRef();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.trace, () => message.trace = TransactionTrace.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.block_ref, () => message.block_ref = BlockRef.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionTraceWithBlockRef {
            return TransactionTraceWithBlockRef.deserialize(bytes);
        }
    }
    export class BlockRef extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            hash?: Uint8Array;
            number?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
                if ("number" in data && data.number != undefined) {
                    this.number = data.number;
                }
            }
        }
        get hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set hash(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get number() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set number(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            hash?: Uint8Array;
            number?: string;
        }): BlockRef {
            const message = new BlockRef({});
            if (data.hash != null) {
                message.hash = data.hash;
            }
            if (data.number != null) {
                message.number = data.number;
            }
            return message;
        }
        toObject() {
            const data: {
                hash?: Uint8Array;
                number?: string;
            } = {};
            if (this.hash != null) {
                data.hash = this.hash;
            }
            if (this.number != null) {
                data.number = this.number;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hash.length)
                writer.writeBytes(1, this.hash);
            if (this.number != "0")
                writer.writeUint64String(2, this.number);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockRef {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockRef();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.hash = reader.readBytes();
                        break;
                    case 2:
                        message.number = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockRef {
            return BlockRef.deserialize(bytes);
        }
    }
}
