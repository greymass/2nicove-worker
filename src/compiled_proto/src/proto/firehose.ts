/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.0
 * source: src/proto/firehose.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/any";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace sf.firehose.v2 {
    export enum ForkStep {
        STEP_UNSET = 0,
        STEP_NEW = 1,
        STEP_UNDO = 2,
        STEP_FINAL = 3
    }
    export class SingleBlockRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4, 5]];
        constructor(data?: any[] | ({
            transforms?: dependency_1.google.protobuf.Any[];
        } & (({
            block_number?: SingleBlockRequest.BlockNumber;
            block_hash_and_number?: never;
            cursor?: never;
        } | {
            block_number?: never;
            block_hash_and_number?: SingleBlockRequest.BlockHashAndNumber;
            cursor?: never;
        } | {
            block_number?: never;
            block_hash_and_number?: never;
            cursor?: SingleBlockRequest.Cursor;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_number" in data && data.block_number != undefined) {
                    this.block_number = data.block_number;
                }
                if ("block_hash_and_number" in data && data.block_hash_and_number != undefined) {
                    this.block_hash_and_number = data.block_hash_and_number;
                }
                if ("cursor" in data && data.cursor != undefined) {
                    this.cursor = data.cursor;
                }
                if ("transforms" in data && data.transforms != undefined) {
                    this.transforms = data.transforms;
                }
            }
        }
        get block_number() {
            return pb_1.Message.getWrapperField(this, SingleBlockRequest.BlockNumber, 3) as SingleBlockRequest.BlockNumber;
        }
        set block_number(value: SingleBlockRequest.BlockNumber) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_block_number() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get block_hash_and_number() {
            return pb_1.Message.getWrapperField(this, SingleBlockRequest.BlockHashAndNumber, 4) as SingleBlockRequest.BlockHashAndNumber;
        }
        set block_hash_and_number(value: SingleBlockRequest.BlockHashAndNumber) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_block_hash_and_number() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get cursor() {
            return pb_1.Message.getWrapperField(this, SingleBlockRequest.Cursor, 5) as SingleBlockRequest.Cursor;
        }
        set cursor(value: SingleBlockRequest.Cursor) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_cursor() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get transforms() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.google.protobuf.Any, 6) as dependency_1.google.protobuf.Any[];
        }
        set transforms(value: dependency_1.google.protobuf.Any[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get reference() {
            const cases: {
                [index: number]: "none" | "block_number" | "block_hash_and_number" | "cursor";
            } = {
                0: "none",
                3: "block_number",
                4: "block_hash_and_number",
                5: "cursor"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5])];
        }
        static fromObject(data: {
            block_number?: ReturnType<typeof SingleBlockRequest.BlockNumber.prototype.toObject>;
            block_hash_and_number?: ReturnType<typeof SingleBlockRequest.BlockHashAndNumber.prototype.toObject>;
            cursor?: ReturnType<typeof SingleBlockRequest.Cursor.prototype.toObject>;
            transforms?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>[];
        }): SingleBlockRequest {
            const message = new SingleBlockRequest({});
            if (data.block_number != null) {
                message.block_number = SingleBlockRequest.BlockNumber.fromObject(data.block_number);
            }
            if (data.block_hash_and_number != null) {
                message.block_hash_and_number = SingleBlockRequest.BlockHashAndNumber.fromObject(data.block_hash_and_number);
            }
            if (data.cursor != null) {
                message.cursor = SingleBlockRequest.Cursor.fromObject(data.cursor);
            }
            if (data.transforms != null) {
                message.transforms = data.transforms.map(item => dependency_1.google.protobuf.Any.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                block_number?: ReturnType<typeof SingleBlockRequest.BlockNumber.prototype.toObject>;
                block_hash_and_number?: ReturnType<typeof SingleBlockRequest.BlockHashAndNumber.prototype.toObject>;
                cursor?: ReturnType<typeof SingleBlockRequest.Cursor.prototype.toObject>;
                transforms?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>[];
            } = {};
            if (this.block_number != null) {
                data.block_number = this.block_number.toObject();
            }
            if (this.block_hash_and_number != null) {
                data.block_hash_and_number = this.block_hash_and_number.toObject();
            }
            if (this.cursor != null) {
                data.cursor = this.cursor.toObject();
            }
            if (this.transforms != null) {
                data.transforms = this.transforms.map((item: dependency_1.google.protobuf.Any) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_block_number)
                writer.writeMessage(3, this.block_number, () => this.block_number.serialize(writer));
            if (this.has_block_hash_and_number)
                writer.writeMessage(4, this.block_hash_and_number, () => this.block_hash_and_number.serialize(writer));
            if (this.has_cursor)
                writer.writeMessage(5, this.cursor, () => this.cursor.serialize(writer));
            if (this.transforms.length)
                writer.writeRepeatedMessage(6, this.transforms, (item: dependency_1.google.protobuf.Any) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SingleBlockRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SingleBlockRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        reader.readMessage(message.block_number, () => message.block_number = SingleBlockRequest.BlockNumber.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.block_hash_and_number, () => message.block_hash_and_number = SingleBlockRequest.BlockHashAndNumber.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.cursor, () => message.cursor = SingleBlockRequest.Cursor.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.transforms, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.google.protobuf.Any.deserialize(reader), dependency_1.google.protobuf.Any));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SingleBlockRequest {
            return SingleBlockRequest.deserialize(bytes);
        }
    }
    export namespace SingleBlockRequest {
        export class BlockNumber extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                num?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("num" in data && data.num != undefined) {
                        this.num = data.num;
                    }
                }
            }
            get num() {
                return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
            }
            set num(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                num?: string;
            }): BlockNumber {
                const message = new BlockNumber({});
                if (data.num != null) {
                    message.num = data.num;
                }
                return message;
            }
            toObject() {
                const data: {
                    num?: string;
                } = {};
                if (this.num != null) {
                    data.num = this.num;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.num != "0")
                    writer.writeUint64String(1, this.num);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockNumber {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockNumber();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.num = reader.readUint64String();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): BlockNumber {
                return BlockNumber.deserialize(bytes);
            }
        }
        export class BlockHashAndNumber extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                num?: string;
                hash?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("num" in data && data.num != undefined) {
                        this.num = data.num;
                    }
                    if ("hash" in data && data.hash != undefined) {
                        this.hash = data.hash;
                    }
                }
            }
            get num() {
                return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
            }
            set num(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get hash() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set hash(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                num?: string;
                hash?: string;
            }): BlockHashAndNumber {
                const message = new BlockHashAndNumber({});
                if (data.num != null) {
                    message.num = data.num;
                }
                if (data.hash != null) {
                    message.hash = data.hash;
                }
                return message;
            }
            toObject() {
                const data: {
                    num?: string;
                    hash?: string;
                } = {};
                if (this.num != null) {
                    data.num = this.num;
                }
                if (this.hash != null) {
                    data.hash = this.hash;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.num != "0")
                    writer.writeUint64String(1, this.num);
                if (this.hash.length)
                    writer.writeString(2, this.hash);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockHashAndNumber {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockHashAndNumber();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.num = reader.readUint64String();
                            break;
                        case 2:
                            message.hash = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): BlockHashAndNumber {
                return BlockHashAndNumber.deserialize(bytes);
            }
        }
        export class Cursor extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                cursor?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("cursor" in data && data.cursor != undefined) {
                        this.cursor = data.cursor;
                    }
                }
            }
            get cursor() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set cursor(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                cursor?: string;
            }): Cursor {
                const message = new Cursor({});
                if (data.cursor != null) {
                    message.cursor = data.cursor;
                }
                return message;
            }
            toObject() {
                const data: {
                    cursor?: string;
                } = {};
                if (this.cursor != null) {
                    data.cursor = this.cursor;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.cursor.length)
                    writer.writeString(1, this.cursor);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Cursor {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Cursor();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.cursor = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Cursor {
                return Cursor.deserialize(bytes);
            }
        }
    }
    export class SingleBlockResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block?: dependency_1.google.protobuf.Any;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 1) as dependency_1.google.protobuf.Any;
        }
        set block(value: dependency_1.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            block?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
        }): SingleBlockResponse {
            const message = new SingleBlockResponse({});
            if (data.block != null) {
                message.block = dependency_1.google.protobuf.Any.fromObject(data.block);
            }
            return message;
        }
        toObject() {
            const data: {
                block?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            } = {};
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_block)
                writer.writeMessage(1, this.block, () => this.block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SingleBlockResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SingleBlockResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block, () => message.block = dependency_1.google.protobuf.Any.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SingleBlockResponse {
            return SingleBlockResponse.deserialize(bytes);
        }
    }
    export class Request extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_block_num?: number;
            cursor?: string;
            stop_block_num?: string;
            final_blocks_only?: boolean;
            transforms?: dependency_1.google.protobuf.Any[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_block_num" in data && data.start_block_num != undefined) {
                    this.start_block_num = data.start_block_num;
                }
                if ("cursor" in data && data.cursor != undefined) {
                    this.cursor = data.cursor;
                }
                if ("stop_block_num" in data && data.stop_block_num != undefined) {
                    this.stop_block_num = data.stop_block_num;
                }
                if ("final_blocks_only" in data && data.final_blocks_only != undefined) {
                    this.final_blocks_only = data.final_blocks_only;
                }
                if ("transforms" in data && data.transforms != undefined) {
                    this.transforms = data.transforms;
                }
            }
        }
        get start_block_num() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set start_block_num(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get cursor() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set cursor(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get stop_block_num() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set stop_block_num(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get final_blocks_only() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set final_blocks_only(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get transforms() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.google.protobuf.Any, 10) as dependency_1.google.protobuf.Any[];
        }
        set transforms(value: dependency_1.google.protobuf.Any[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        static fromObject(data: {
            start_block_num?: number;
            cursor?: string;
            stop_block_num?: string;
            final_blocks_only?: boolean;
            transforms?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>[];
        }): Request {
            const message = new Request({});
            if (data.start_block_num != null) {
                message.start_block_num = data.start_block_num;
            }
            if (data.cursor != null) {
                message.cursor = data.cursor;
            }
            if (data.stop_block_num != null) {
                message.stop_block_num = data.stop_block_num;
            }
            if (data.final_blocks_only != null) {
                message.final_blocks_only = data.final_blocks_only;
            }
            if (data.transforms != null) {
                message.transforms = data.transforms.map(item => dependency_1.google.protobuf.Any.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                start_block_num?: number;
                cursor?: string;
                stop_block_num?: string;
                final_blocks_only?: boolean;
                transforms?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>[];
            } = {};
            if (this.start_block_num != null) {
                data.start_block_num = this.start_block_num;
            }
            if (this.cursor != null) {
                data.cursor = this.cursor;
            }
            if (this.stop_block_num != null) {
                data.stop_block_num = this.stop_block_num;
            }
            if (this.final_blocks_only != null) {
                data.final_blocks_only = this.final_blocks_only;
            }
            if (this.transforms != null) {
                data.transforms = this.transforms.map((item: dependency_1.google.protobuf.Any) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start_block_num != 0)
                writer.writeInt64(1, this.start_block_num);
            if (this.cursor.length)
                writer.writeString(2, this.cursor);
            if (this.stop_block_num != "0")
                writer.writeUint64String(3, this.stop_block_num);
            if (this.final_blocks_only != false)
                writer.writeBool(4, this.final_blocks_only);
            if (this.transforms.length)
                writer.writeRepeatedMessage(10, this.transforms, (item: dependency_1.google.protobuf.Any) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start_block_num = reader.readInt64();
                        break;
                    case 2:
                        message.cursor = reader.readString();
                        break;
                    case 3:
                        message.stop_block_num = reader.readUint64String();
                        break;
                    case 4:
                        message.final_blocks_only = reader.readBool();
                        break;
                    case 10:
                        reader.readMessage(message.transforms, () => pb_1.Message.addToRepeatedWrapperField(message, 10, dependency_1.google.protobuf.Any.deserialize(reader), dependency_1.google.protobuf.Any));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Request {
            return Request.deserialize(bytes);
        }
    }
    export class Response extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block?: dependency_1.google.protobuf.Any;
            step?: ForkStep;
            cursor?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
                if ("step" in data && data.step != undefined) {
                    this.step = data.step;
                }
                if ("cursor" in data && data.cursor != undefined) {
                    this.cursor = data.cursor;
                }
            }
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 1) as dependency_1.google.protobuf.Any;
        }
        set block(value: dependency_1.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get step() {
            return pb_1.Message.getFieldWithDefault(this, 6, ForkStep.STEP_UNSET) as ForkStep;
        }
        set step(value: ForkStep) {
            pb_1.Message.setField(this, 6, value);
        }
        get cursor() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set cursor(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            block?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            step?: ForkStep;
            cursor?: string;
        }): Response {
            const message = new Response({});
            if (data.block != null) {
                message.block = dependency_1.google.protobuf.Any.fromObject(data.block);
            }
            if (data.step != null) {
                message.step = data.step;
            }
            if (data.cursor != null) {
                message.cursor = data.cursor;
            }
            return message;
        }
        toObject() {
            const data: {
                block?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
                step?: ForkStep;
                cursor?: string;
            } = {};
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            if (this.step != null) {
                data.step = this.step;
            }
            if (this.cursor != null) {
                data.cursor = this.cursor;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_block)
                writer.writeMessage(1, this.block, () => this.block.serialize(writer));
            if (this.step != ForkStep.STEP_UNSET)
                writer.writeEnum(6, this.step);
            if (this.cursor.length)
                writer.writeString(10, this.cursor);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block, () => message.block = dependency_1.google.protobuf.Any.deserialize(reader));
                        break;
                    case 6:
                        message.step = reader.readEnum();
                        break;
                    case 10:
                        message.cursor = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Response {
            return Response.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedStreamService {
        static definition = {
            Blocks: {
                path: "/sf.firehose.v2.Stream/Blocks",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: Request) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Request.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Response.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Blocks(call: grpc_1.ServerWritableStream<Request, Response>): void;
    }
    export class StreamClient extends grpc_1.makeGenericClientConstructor(UnimplementedStreamService.definition, "Stream", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Blocks: GrpcStreamServiceInterface<Request, Response> = (message: Request, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<Response> => {
            return super.Blocks(message, metadata, options);
        };
    }
    export abstract class UnimplementedFetchService {
        static definition = {
            Block: {
                path: "/sf.firehose.v2.Fetch/Block",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SingleBlockRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SingleBlockRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SingleBlockResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SingleBlockResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Block(call: grpc_1.ServerUnaryCall<SingleBlockRequest, SingleBlockResponse>, callback: grpc_1.sendUnaryData<SingleBlockResponse>): void;
    }
    export class FetchClient extends grpc_1.makeGenericClientConstructor(UnimplementedFetchService.definition, "Fetch", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Block: GrpcUnaryServiceInterface<SingleBlockRequest, SingleBlockResponse> = (message: SingleBlockRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SingleBlockResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SingleBlockResponse>, callback?: grpc_1.requestCallback<SingleBlockResponse>): grpc_1.ClientUnaryCall => {
            return super.Block(message, metadata, options, callback);
        };
    }
}
